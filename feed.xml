<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Ian Wold</title>
    <link>https://ian.wold.guru/feed.xml</link>
    <description>Ian Wold's Blog</description>
    <item>
      <guid isPermaLink="false">adding_a_database_to_our_railway_app</guid>
      <link>https://ian.wold.guru/Posts/adding_a_database_to_our_railway_app.html</link>
      <title>Adding a Database to our Railway App</title>
      <description>&lt;p&gt;&lt;a href="https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html"&gt;Last time I looked at Railway&lt;/a&gt;, I got it up and running with a Blazor WASM app. Now, I'll look at adding a PostgreSQL database to it. As with the app I got working, Railway's interface will make it incredibly simple to provision the database, and we'll need to do minimal work to get the connection info to our app.&lt;/p&gt;
&lt;h1&gt;Provisioning the Database&lt;/h1&gt;
&lt;p&gt;From the Railway dashboard, you can click into your project, and there should be a New button at the top (as in a buttno that says &amp;quot;New&amp;quot;, not a button whose appearance would not heretofore be expected):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This brings up the familiar dialog to provision resources, from which we'll select Database:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new-project.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And then I'm going to choose PostgreSQL here. Note that if Railway doesn't have an option here for the database you want, you can always create a plain Docker image from an image of your preferred database.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new-database.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And look at that, it deploys a new PostgreSQL database! This is one of the things I love about Railway - their interface to set up resources has eliminated &lt;em&gt;all&lt;/em&gt; of the steps to setup that aren't 100% necessary, and the default settings they choose are logical and easily overwritten later if we need.&lt;/p&gt;
&lt;p&gt;Notice also the attached &lt;code&gt;pgdata&lt;/code&gt; volume. As discussed before, Railway just stores all of your resources in Docker images. This doesn't require that you create a &lt;code&gt;dockerfile&lt;/code&gt; for each of your projects and resources, they can do that for you if you don't want to. It is to say that they give you all the tools you might want to use to be able to manage your resources as docker containers and volumes, so you can more or less choose the level of control you need over your resources.&lt;/p&gt;
&lt;p&gt;The way I use Railway, I let it manage all my resources for me, and I don't bog myself down in the weeds of Docker as much. I've got plenty of time in my day job to get frustrated with Docker!&lt;/p&gt;
&lt;h1&gt;Connecting to our Database&lt;/h1&gt;
&lt;p&gt;If you click on your new database resource and then the &lt;code&gt;Variables&lt;/code&gt; tab, you should see a bunch of variables:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-variables.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This contains all the information that our app will need to connect to it. Railway allows the resources within a project to reference each others' variables, so we just need to know which ones to reference to build a connection string.&lt;/p&gt;
&lt;p&gt;Now, they've all got incredibly obvious names so you can certainly accomplish this by guessing in as much time as it takes you to read this article, but for thoroughness' sake I've got a connection string here:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;User Id=${{Postgres.PGUSER}};Password=${{Postgres.PGPASSWORD}};Host=${{Postgres.PGHOST}};Port=${{Postgres.PGPORT}};Database=${{Postgres.PGDATABASE}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you copy that as the value of a new variable in your application, it will fill in each of the references with the values from your database's variables, and that should be a sufficient connectino string to test that it works:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-connection-string.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Note that I'm using the variable name &lt;code&gt;ConnectionStrings__Database&lt;/code&gt;, with two underscores, which behaves as though I'm inserting the following into my &lt;code&gt;appsettings&lt;/code&gt; (in a .NET context):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;Database&amp;quot;: &amp;quot;...&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's all the configuration needed for your app to be able to consume your new database!&lt;/p&gt;
</description>
      <a10:updated>2023-11-08T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">a_scrum_odyssey</guid>
      <link>https://ian.wold.guru/Posts/a_scrum_odyssey.html</link>
      <title>A Scrum Odyssey</title>
      <description>&lt;p&gt;I had an unexpected and not entirely unpleasant experience in a recent retrospective meeting: all of the engineers on the team moved to stop having daily standup meetings altogether. Although I'm no stranger to working without standup meetings, and in many ways I prefer that way of working, I don't think it's unreasonable to suggest that the majority of engineers are fine with well-structured daily standups.&lt;/p&gt;
&lt;p&gt;Even with a team that enjoys standup meetings however, there's value in breaking the norm, becoming more flexible, and trying things out. Maybe such a team would settle back into daily standups, maybe they'd find something else that works for them. Teams which don't enjoy their standups though will almost certaily settle on a new scheme.&lt;/p&gt;
&lt;p&gt;I sat down to type out a guide on how and why a team might experiment with alternative approaches to the daily standup. But that came out so incredibly dry I weaved those points into a story demonstrating a hypothetical team undergoing that process. That resulted in something which I'm not entirely sure got the point across. But then I remembered that ChatGPT (insert eye roll here) is actually pretty good at generating Shakespearean sonnets (insert double eye roll here). So, I ran my story through the ringer and I present to you &lt;strong&gt;A Scrum Odyssey: A journey away from daily scrum meetings, as a cycle of eight Shakespearean sonnets&lt;/strong&gt;:&lt;/p&gt;
&lt;h1&gt;The Rite of Dawn's Assembly&lt;/h1&gt;
&lt;p&gt;In days of yore, where standups held their sway,&lt;br /&gt;
Religious teams to this rite did cling tight.&lt;br /&gt;
Believing in its might, they'd all display&lt;br /&gt;
Their tasks and toils, at morning's first light.&lt;/p&gt;
&lt;p&gt;“'Tis the only path!” they’d loudly decree,&lt;br /&gt;
To boost our voice and our work's potency.&lt;br /&gt;
Yet, in this sea of daily scrutiny,&lt;br /&gt;
Did they e'er question its necessity?&lt;/p&gt;
&lt;p&gt;For in their hearts, joy and productivity,&lt;br /&gt;
Seemed hand in hand with scrum's consistency.&lt;br /&gt;
But having not trod another pathway,&lt;br /&gt;
How sure were they, in their daily ballet?&lt;/p&gt;
&lt;p&gt;To question not is to be but a drone,&lt;br /&gt;
Yet change may show more ways than they've known.&lt;/p&gt;
&lt;h1&gt;Whispers 'Midst the Court of Teams&lt;/h1&gt;
&lt;p&gt;As time doth pass, objections loud do cry,&lt;br /&gt;
Standups draw long, and patience wears so thin.&lt;br /&gt;
Some feel the gaze of oversight too nigh,&lt;br /&gt;
Whilst others sigh at tales they're lost within.&lt;/p&gt;
&lt;p&gt;The daily rite, once held in high esteem,&lt;br /&gt;
Now burdens hearts, and feels not quite so lean.&lt;br /&gt;
&amp;quot;Maintain the stand!&amp;quot; the managers exclaim,&lt;br /&gt;
&amp;quot;For knowledge's spread, 'tis the only regime.&amp;quot;&lt;/p&gt;
&lt;p&gt;Another quips, &amp;quot;'Tis how we stay aligned!&amp;quot;&lt;br /&gt;
Yet in their hearts, a restlessness they find.&lt;br /&gt;
The status quo, now feels a heavy chain,&lt;br /&gt;
With every voice, there grows a silent pain.&lt;/p&gt;
&lt;p&gt;Unease doth spread, as waters dark and deep,&lt;br /&gt;
The team in hope, for change they might yet reap.&lt;/p&gt;
&lt;h1&gt;Into Uncharted Councils Steered&lt;/h1&gt;
&lt;p&gt;In growing dissent, the teams make their stand,&lt;br /&gt;
To question the rites of daily discourse.&lt;br /&gt;
With keen eyes they search, across the vast land,&lt;br /&gt;
For new methods, their spirit to endorse.&lt;/p&gt;
&lt;p&gt;The captains do doubt, and their concerns voice,&lt;br /&gt;
Yet vibrant ideas do from teams arise.&lt;br /&gt;
&amp;quot;Demos!&amp;quot; cries one, &amp;quot;Let our works make their noise!&amp;quot;,&lt;br /&gt;
Another suggests, one-on-one 'neath the skies.&lt;/p&gt;
&lt;p&gt;Pair programming, reviews, new tactics bloom,&lt;br /&gt;
As weary traditions begin to wane.&lt;br /&gt;
The tides of change, they sweep away the gloom,&lt;br /&gt;
Old ways dissolve, as new paths become plain.&lt;/p&gt;
&lt;p&gt;Thus in the dance of time and adaptability,&lt;br /&gt;
Teams find their stride, and new possibility.&lt;/p&gt;
&lt;h1&gt;Quests in the Halls of Converse&lt;/h1&gt;
&lt;p&gt;In search of ways, the teams diverge their path,&lt;br /&gt;
Asynchronous rites, emails that they pen,&lt;br /&gt;
Fewer meets they seek, to avoid the wrath,&lt;br /&gt;
Of daily drudgery, again and again.&lt;/p&gt;
&lt;p&gt;More intimate chats, one-on-one they hold,&lt;br /&gt;
In pair programming, they sharpen their skill.&lt;br /&gt;
Exploring each method, both new and old,&lt;br /&gt;
They weigh every boon, every bitter pill.&lt;/p&gt;
&lt;p&gt;Managers, once stern, now their gaze doth shift,&lt;br /&gt;
Witnessing changes, benefits unfold.&lt;br /&gt;
Yielding their ground, as sands of time do sift,&lt;br /&gt;
Embracing the new, releasing the old.&lt;/p&gt;
&lt;p&gt;In the grand ballet of work's ebb and flow,&lt;br /&gt;
Teams evolve, and brighter futures they sow.&lt;/p&gt;
&lt;h1&gt;Where Two Worlds in Concert Meet&lt;/h1&gt;
&lt;p&gt;From all the trials, some choices do emerge,&lt;br /&gt;
Asynchronous standups, the globe's teams cheer.&lt;br /&gt;
For visual minds, digital boards surge,&lt;br /&gt;
As preferred tools, their thoughts to make clear.&lt;/p&gt;
&lt;p&gt;Meetings grow few, much to all's delight,&lt;br /&gt;
Those that remain, are purposeful and keen.&lt;br /&gt;
Gone are the days of endless oversight,&lt;br /&gt;
In place, moments of value are seen.&lt;/p&gt;
&lt;p&gt;&amp;quot;Support!&amp;quot; cry the captains, in newfound glee,&lt;br /&gt;
Feeling the strength of their teams' tethered core.&lt;br /&gt;
From the throes of old, they now are set free,&lt;br /&gt;
Bonded and strong, as never before.&lt;/p&gt;
&lt;p&gt;From trials and tests, the best paths are clear,&lt;br /&gt;
Teams and their leaders, in harmony steer.&lt;/p&gt;
&lt;h1&gt;Musing on Fortune's Fickle Hand&lt;/h1&gt;
&lt;p&gt;With shifts in tide, come trials unforeseen,&lt;br /&gt;
Some souls do long for morning meetings past.&lt;br /&gt;
An anchor lost, in routines once serene,&lt;br /&gt;
Others claim that commitment's not so vast.&lt;/p&gt;
&lt;p&gt;Managers note, their gaze oft on boards dwell,&lt;br /&gt;
More than before, in this changed paradigm.&lt;br /&gt;
For in each change, some benefits dispel,&lt;br /&gt;
Replaced by costs, in this evolving time.&lt;/p&gt;
&lt;p&gt;&amp;quot;No method’s perfect,&amp;quot; the team concedes true,&lt;br /&gt;
Every path has its toll, its weight to bear.&lt;br /&gt;
But in pursuit of what’s best, they pursue,&lt;br /&gt;
Balancing gains, with costs they must wear.&lt;/p&gt;
&lt;p&gt;In life’s grand dance of loss and of gain,&lt;br /&gt;
Teams learn to thrive, through pleasure and pain.&lt;/p&gt;
&lt;h1&gt;Melding Yesteryears with the Morrow&lt;/h1&gt;
&lt;p&gt;From experiments vast, wisdom teams glean,&lt;br /&gt;
Blending the best from methods they've tried.&lt;br /&gt;
A hybrid emerges, both fresh and seen,&lt;br /&gt;
Balancing old and new, side by side.&lt;/p&gt;
&lt;p&gt;Asynchronous notes, for days in-between,&lt;br /&gt;
With face-to-face meets, weekly they decide.&lt;br /&gt;
Though returning to paths once before seen,&lt;br /&gt;
They come renewed, with broader stride.&lt;/p&gt;
&lt;p&gt;Most vital of all, in this new phase,&lt;br /&gt;
Teams claim their process, its reins they hold.&lt;br /&gt;
Each member engaged, in collective praise,&lt;br /&gt;
For a system by them, shaped and molded.&lt;/p&gt;
&lt;p&gt;From trials diverse, a way they have found,&lt;br /&gt;
Where every voice in harmony does sound.&lt;/p&gt;
&lt;h1&gt;Ascendance Beyond Time's Norms&lt;/h1&gt;
&lt;p&gt;In newfound grace, the teams now flex and bend,&lt;br /&gt;
Having learnt the worth of norms held askew.&lt;br /&gt;
Witnessed have they, to what change can tend,&lt;br /&gt;
The boon of steps, both retraced and anew.&lt;/p&gt;
&lt;p&gt;The culture's hue, to feedback does incline,&lt;br /&gt;
Embracing shifts, with open arms and heart.&lt;br /&gt;
Where once was rigidity, now they entwine&lt;br /&gt;
Flexibility, as their foremost art.&lt;/p&gt;
&lt;p&gt;Managers see, that control's grip too tight,&lt;br /&gt;
Does not always lead to the best of ways.&lt;br /&gt;
Productivity, in this newfound light,&lt;br /&gt;
Reaches peaks unseen, to everyone's praise.&lt;/p&gt;
&lt;p&gt;From challenging norms, to heights unforeseen,&lt;br /&gt;
They've journeyed forth, with purpose evergreen.&lt;/p&gt;
</description>
      <a10:updated>2023-10-20T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_10-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_10-2023.html</link>
      <title>Book Club 10/2023: Functional Patterns in C#</title>
      <description>&lt;p&gt;&lt;em&gt;My Book Club is a monthly curated list of things I've been reading or watching, sent out via my newsletter. If you'd like to follow along with me, please &lt;a href="https://buttondown.email/ianwold"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Happy spooky season!&lt;/p&gt;
&lt;p&gt;This month I've focused on functional domain modeling and related patterns. We're just a few weeks away from the release of the next version of C#, and like each previous version it'll introduce even more functional features. We still aren't getting discriminated unions, but as C# becomes more functional, these patterns are becoming increasingly more attractive. Traditionally, C# is written in OO or procedural styles, and from my perspective there doesn't seem to be a great deal of discussion among C# engineers about incorporating functional patterns. Maybe you run in different circles, but I think there's room for improvement across the board here. Even the result monad, which can be used within an entirely OO context, is infrequently implemented.&lt;/p&gt;
&lt;p&gt;I think it's important to be discussing functional patterns in C#, for a few practical reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eventually we're getting DU, and that's going to change a lot of things&lt;/li&gt;
&lt;li&gt;Our F# colleagues are doing great work in this area, we should engage them more&lt;/li&gt;
&lt;li&gt;Using functional patterns is cool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But above all, if C# supports these patterns and they can help us write better code, &lt;em&gt;why would we neglect them&lt;/em&gt;? To explore this topic, I've curated a set of talks by Scott Wlaschin and Mark Seemann who both do a great job explaining functional programming from a conceptual perspective, demonstrating its power in F#, and ultimately demonstrating C# equivalents.&lt;/p&gt;
&lt;p&gt;I hope these talks make you all as excited for discriminated unions in C# as I am!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2JB1_e5wZmU"&gt;Domain Modeling Made Functional - Scott Wlaschin (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=srQt1NAHYC0"&gt;Functional Design Patterns - Scott Wlaschin (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WhEkBCWpDas"&gt;The Power of Composition - Scott Wlaschin (2018)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=IYzDFHx6QPY"&gt;The Lazy Programmer's Guide to Writing Thousands of Tests - Scott Wlaschin (2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=US8QG9I1XW0"&gt;Functional Architecture - The Pits of Success - Mark Seemann (2016)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F9bznonKc64"&gt;Get Value out of Your Monad - Mark Seemann (2018)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cxs7oLGrxQ4"&gt;From Dependency Injection to Dependency Rejection - Mark Seemann (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qBYVW4ghMi8"&gt;Dependency Injection Revisited - Mark Seemann (2018)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <a10:updated>2023-10-27T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_11-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_11-2023.html</link>
      <title>Book Club 11/2023: New .NET, New C#</title>
      <description>&lt;p&gt;&lt;em&gt;My Book Club is a monthly curated list of things I've been reading or watching, sent out via my newsletter. If you'd like to follow along with me, please &lt;a href="https://buttondown.email/ianwold"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm looking forward to turkey day tomorrow gobble gobble! This year I'm thankful that I work in ecommerce so I get to have a peaceful extended weekend because nobody visits ecommerce sites on Thanksgiving weekend. At least that's what they told me in the interview before they hired me. &lt;em&gt;Insert joke about how it's better to be working in ecommerce than at OpenAI this weekend regardless...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anyway, last week we got the new release of .NET, which brings langauge and tooling updates across the board, so I want to focus on some of those fun things.&lt;/p&gt;
&lt;p&gt;First, Blazor has taken the third (or is it fourth now) of the 1,000 steps it needs to take to become a viable platform for SAAS, with hybrid client/server rendering. I don't have a lot to say there, but I use Blazor for a number of personal projects when I need to quickly draw up a UI to look into some .NET backend scenario or another.&lt;/p&gt;
&lt;p&gt;Since Microsoft started down the path of .NET Core, the whole ecosystem has been embracing OSS and free software in a way that's completely rewritten the whole modus operandi of Microsoft under Nadella. Indeed, it seems like at this point in time, you can use .NET without a single worry about vendor lock-in. Well, Microsoft is here to save you from that horrible wasteland of unrestricted freedom with &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/"&gt;.NET Aspire&lt;/a&gt;. Nevermind that &lt;a href="https://www.fearofoblivion.com/build-a-modular-monolith-first"&gt;you probably don't need a distributed system&lt;/a&gt;, and even if you did &lt;a href="https://renegadeotter.com/2023/09/10/death-by-a-thousand-microservices.html"&gt;you almost certainly don't need microservices&lt;/a&gt;, they have cloud computes to sell you! Aspire makes it easy to avoid footgunning yourself as you begin your next project distributed from the start by skipping you right to the step where you blow your foot off with a bazooka - all hail the mighty Azure! Or, you know, if like 99.99% of all apps out there you'd be fine with it deployed in a Docker container with a couple of related services, &lt;a href="https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html"&gt;you could just use Railway&lt;/a&gt;. &lt;em&gt;Note that I'm definitely queuing up an article on using Aspire with Railway despite my skepticism that Aspire is a good idea.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12"&gt;C# hasn't gotten too many updates&lt;/a&gt;, but we have two syntactical updates that are essential and should have been included much earlier: collection expressions and primary constructors for classes.&lt;/p&gt;
&lt;p&gt;Collection expressions, or perhaps &amp;quot;enumerable literals&amp;quot;, should have been a part of the language from the start, and you should convert all of your code over to using these.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var list = [1, 2, 3, 4, 5];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Records have had primary constructors since they were introduced, and I think that was largely related to the desire to have tuple interop (is interop the right word here?), but now classes have them too &lt;em&gt;except quite different&lt;/em&gt;. The parameters in a primary constructor for a class are, more logically than records, private members of that class, significantly reducing the amount of boilerplate &lt;a href="https://ian.wold.guru/Posts/book_club_10-2023.html"&gt;if you're still using dependency injection&lt;/a&gt;. It's been how many years since Scala came out, but now we can be one of the cool kids on the block too! Right?&lt;/p&gt;
&lt;p&gt;Anyway, I'll just leave you with a few talks from the .NET conference with some of the other tidbits that should be used in .NET going forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BnjHArsYGLM?si=NsnqXLMKwcmirGZM"&gt;Improving your application telemetry using .NET 8 and Open Telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/FpQXyFoZ9aY?si=qhDqySjMAOrxa_9x"&gt;Tiny, fast ASP.NET Core APIs with native AOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qXsRz0YWvu4?si=p9oaPMq8h4an1Fq5"&gt;From IL Weaving to Source Generators, the Realm story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Yf8t7GqA6zA?si=WoidTSJRaUe4be-0"&gt;All About C# Source Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then a couple of talks from the lead designers of C# and F# regarding the history and direction of each language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=v8bqAm4aUFM"&gt;Where's C# Headed? - Mads Torgersen (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLKZ7ZgVido"&gt;The Functional Journey of C# - Mads Torgersen (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sC0HUq2KkFc"&gt;The F# Path to Relaxation - Don Syme (2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MXKM5dSk_8o"&gt;What's new in F# 5 &amp;amp; 6 - Don Syme (2021)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <a10:updated>2023-11-22T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_9-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_9-2023.html</link>
      <title>Book Club 9/2023: Papers I Love</title>
      <description>&lt;p&gt;&lt;em&gt;My Book Club is a monthly curated list of things I've been reading or watching, sent out via my newsletter. If you'd like to follow along with me, please &lt;a href="https://buttondown.email/ianwold"&gt;subscribe to my newsletter&lt;/a&gt;. Note: this first &amp;quot;Book Club&amp;quot; post is not included in the newsletter; I hadn't yet set up the newsletter.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last week I attended the final &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. This conference has been very influential on my career and my academic interests. In fact, this conference began a short time before I started making money in software. Having been able to watch the talks on the YouTubes over the years, I credit it with having a significant impact on how I've approached my career as well as my studies in college, where I got bachelors' in both philosophy and computer science.&lt;/p&gt;
&lt;p&gt;However, I had never been to a Strange Loop before! It's bitersweet then that I was able to attend the final one. Perhaps unurprisingly, I attended several presentations sponsored by (or should I say &amp;quot;presented by&amp;quot;? unsure) &lt;a href="https://paperswelove.org/"&gt;Papers We Love&lt;/a&gt;. In that spirit, I'm going to share five papers here that cut across my philosophical and computer science inclinations that I have very much enjoyed over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dinhe.net/%7Earedridel/.notmine/PDFs/Parsing/SPIEWAK%2C%20Daniel%20%282010%29%20-%20Generalized%20Parser%20Combinators.pdf"&gt;Generalized Parser Combinators - Daniel Spiewak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philpapers.org/archive/FLOSIA-5.pdf"&gt;Semantic Information and the Correctness Theory of Truth - Luciano Floridi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.type-driven.org.uk/edwinb/papers/impldtp.pdf"&gt;Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation - Edwin Brady&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.umass.edu/klement/lambda.pdf"&gt;Russell's 1903-1905 Anticiaption of the Lambda Calculus - Kevin C. Klement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ics.uci.edu/%7Efielding/pubs/dissertation/top.htm"&gt;Architectural Styles and the Design of Network-based Software Architectures - Roy Thomas Fielding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <a10:updated>2023-09-28T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">clean_meetings_a_software_engineers_guide</guid>
      <link>https://ian.wold.guru/Posts/clean_meetings_a_software_engineers_guide.html</link>
      <title>Clean Meetings: A Software Engineer's Guide</title>
      <description>&lt;p&gt;If being in meetings all day isn't bad enough, spending more time thinking about them seems horrible. However, meetings are going to continue to be inflicted upon us, and there will come a time (perhaps more than a few) that we'll need to inflict meetings upon our colleagues in turn. Meetings should be short, concise, and mutually beneficial to everyone involved, and in order to ensure their utility it's necessary to be mindful and considerate when facilitating or participating in a meeting.&lt;/p&gt;
&lt;p&gt;I've had to hold a lot of meetings in my time. I've spent many years in the roles of engineer, team leader, and architect, and I have to conduct meetings outside of work besides. If you want to go full-on meeting nerd I recommend that you pick up a copy of Robert's Rules, but I wanted to distill my experience and thinking on the matter into an easy-to-follow checklist for the 99.99% of us that don't want to have to spend more time than necessary on one of the admittedly more onerous parts of our profession. So, here's a simple guide on making sure you're getting the most out of your meetings.&lt;/p&gt;
&lt;p&gt;Before we get started though, I want to give the single most important advice regarding meetings. If you read no further, take this away: &lt;strong&gt;Meetings are an unfortunate tool of last resort.&lt;/strong&gt; Do you actually need to have this meeting? Would an email chain suffice? How about a Slack message, thread, or channel? Uncle Bob says (paraphrasing) that we should strive to write as few comments in our code as we can, and when we do we should acknowledge it as a failure. Take a similar approach to meetings: While maybe not a failure, we should rarely be having meetings and should, let's say, acknowledge that there might be a potential for a better way of working here. (Is that appropriately diplomatic?)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that meetings can take any level of formality between ad-hoc meetings between junior engineers and a senior-level presentation to the CEO. Some meetings require you to write some or all of these down, such as formulating and distributing an agenda, but some do not. Irrespective the level of formality and preparation, it's good to keep these points at least in mind as you conduct meetings at different levels.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Meeting Structure&lt;/h1&gt;
&lt;p&gt;The most often overlooked aspect to keeping meetings clean is the meeting structure. Meetings have a &lt;strong&gt;purpose&lt;/strong&gt; and an &lt;strong&gt;outcome&lt;/strong&gt; that should be specified in an &lt;strong&gt;agenda&lt;/strong&gt; (whether it is explicitly written or not) that is understood and agreed to by all participants. Some participants play different &lt;strong&gt;roles&lt;/strong&gt; in the meeting, and they will take different &lt;strong&gt;actions&lt;/strong&gt; (what Robert would call &amp;quot;motions&amp;quot; but I'm not going to use that language lest I might confuse those of you who use Vim BTW) during the meeting. This might seem low-level, but it's often the details that can keep a meeting productive.&lt;/p&gt;
&lt;h2&gt;Purpose and Outcome&lt;/h2&gt;
&lt;p&gt;A meeting is scheduled with a specific set of participants agreen on a &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt;: Why is it necessary to gather this group of people and what do they need to achieve? You might need a brainstorming session, you might need to reach a decision or consensus, or you might need to share information. Either way, &lt;em&gt;be clear about each of these&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;✔️ Do define a &lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do specify an &lt;strong&gt;outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do ensure all participants understand the &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;❌ Do not neglect this step! Don't neglect the others but especially this!&lt;/p&gt;
&lt;p&gt;❌ Do not assume all participants understand or agree with the &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Agenda&lt;/h2&gt;
&lt;p&gt;Simply put, an agenda is a set of topics to discuss at the meeting. This can be as simple as a single bullet point &lt;code&gt;* Brainstorm a name for the new microservice&lt;/code&gt; or a detailed breakdown of gaps in technical knowledge.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: if your agenda is &amp;quot;Brainstorm a name for the new microservice that's just a Slack thread. I've been in that exact meeting too many times and I'm here to tell you - your microservice will be replaced by 5 others and deleted in 2 years anyway, just call it &amp;quot;Craig&amp;quot; or something.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some agendas are written, some aren't, but each meeting &lt;em&gt;has an agenda&lt;/em&gt;. There are few absolute truths in the world, but I can tell you that meetings which follow the agenda are good, meeting that don't aren't.&lt;/p&gt;
&lt;p&gt;Another often-overlooked point is that the agenda needs to be agreed on by all participants. It is not the job of the individual calling the meeting to carve the agenda in stone, it's their responsibility to make sure the agenda fulfils the purposes intended by the participants and the outcomes desired by them. Are these intents and desires contradictory? Sounds like multiple meetings.&lt;/p&gt;
&lt;p&gt;✔️ Do be specific about the purpose and outcome in the agenda&lt;/p&gt;
&lt;p&gt;✔️ Do communicate the agenda to participants ahead of time&lt;/p&gt;
&lt;p&gt;✔️ Do ask participants to contribute to the agenda, both before and at the beginning of each meeting&lt;/p&gt;
&lt;p&gt;❌ Do not require all potential participants to attend even if they feel they aren't interested in the agenda&lt;/p&gt;
&lt;p&gt;❌ Do not try to write a perfect, final agenda. Instead, write a &amp;quot;first pass&amp;quot; and then give ownership to the other participants&lt;/p&gt;
&lt;h2&gt;Roles&lt;/h2&gt;
&lt;p&gt;Each meeting has roles. At the least, you need to acknowledge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facilitator&lt;/strong&gt; leads the meeting, ensures the agenda is followed, and facilitates discussion,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secretary&lt;/strong&gt; records the minutes and important decisions,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participants&lt;/strong&gt; engage in the discussion, provide input, and carry out assigned action items post-meeting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✔️ Do be clear about which role is fulfilled by which participant&lt;/p&gt;
&lt;p&gt;❌ Do not assign multiple roles to a single person in important meetings&lt;/p&gt;
&lt;h1&gt;Before the Meeting&lt;/h1&gt;
&lt;p&gt;There are a few steps to take before holding a meeting, and they can greatly help to set the meeting up for success. The most important thing before the meeting is to remember the most important advice: Is this meeting actually necessary? Abort if not.&lt;/p&gt;
&lt;h2&gt;Prepare the Agenda&lt;/h2&gt;
&lt;p&gt;I covered all the dos and don'ts in the previous section, but this is the most important step before the meeting. Write the agenda down and distribute it as early as you can. Some meetings are regular rituals, and it still helps to write the agenda for these down and distribute them. Sometimes there is requisite technical or business information for the meeting - provide these as resources for participants. If they suggest suggest changes, make them!&lt;/p&gt;
&lt;p&gt;✔️ Do include knowledge perrequisite for the meeting in the agenda (links and short descriptions, please)&lt;/p&gt;
&lt;p&gt;✔️ Do take feedback - if necessary, send a revised agenda to participants&lt;/p&gt;
&lt;p&gt;✔️ Do include any necessary discription or goal for points needing clarification&lt;/p&gt;
&lt;p&gt;❌ Do not write a novel as the agenda - stick to bullet points&lt;/p&gt;
&lt;p&gt;Sometimes the objective of the meeting is reached while distributing the agenda. If it is - abort the meeting. Your objective is reached. As Sun Tzu says in The Art of War - &amp;quot;The wisest general is the general who never fights.&amp;quot;&lt;/p&gt;
&lt;h2&gt;Pre-Meeting Preparation&lt;/h2&gt;
&lt;p&gt;While the facilitator has the most work to understand the agenda and work towards the objective, participants need to prepare as well. Read the agenda, suggest feedback if needed, and study the prerequisite information.&lt;/p&gt;
&lt;p&gt;✔️ Do review the agenda beforehand&lt;/p&gt;
&lt;p&gt;✔️ Do suggest agenda changes. If you think you might have solved the problem or resolved the outcome of the meeting, even if only minutes before, say so and &lt;em&gt;abort the meeting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;❌ Do not attend the meeting if you feel you don't have to. Best to ask the facilitator to drop, explaining why.&lt;/p&gt;
&lt;h1&gt;During the Meeting&lt;/h1&gt;
&lt;p&gt;In a meeting, everyone should be engaged and it should be kept as short as possible. If you're not engaged, drop. I've worked at places where I was told explicitly to not do this, but I would drop anyway and never heard any complaints. Your mileage might vary. If you're facilitating a meeting, let your participants drop.&lt;/p&gt;
&lt;h2&gt;Adhrere to the Agenda&lt;/h2&gt;
&lt;p&gt;The agenda specifies the purpose and outcome of the meeting, and the topics worthy of consideration in furtherance of the objective. At the start of the meeting, the first order of business is to approve the agenda: make any last-minute changes needed by the participants. Once everyone agrees on the agenda, &lt;em&gt;stick to it&lt;/em&gt;. Topics not on the agenda are to be tabled, either for another meeting or preferrably for a Slack thread.&lt;/p&gt;
&lt;p&gt;✔️ Do ensure everyone agrees to and understands the agenda&lt;/p&gt;
&lt;p&gt;✔️ Do be clear when moving from one agenda item to the next&lt;/p&gt;
&lt;p&gt;✔️ Do cut participants or yourself off if non-agenda topics start being discussed: &amp;quot;Let's table that thought&amp;quot;&lt;/p&gt;
&lt;p&gt;✔️ Do allow for a brief period at the end of the meeting for any additional topics if it's a wide-ranging meeting, but be eager to move individual conversations to later meetings&lt;/p&gt;
&lt;p&gt;❌ Do not amend the agenda mid-meeting. It was agreed to, and if it's not right now that signifies that we can &lt;em&gt;abort the meeting&lt;/em&gt;. It's not too late.&lt;/p&gt;
&lt;p&gt;❌ Do not &amp;quot;afterparty&amp;quot; - these are separate conversations and either separate meetings (or Slack threads better yet).&lt;/p&gt;
&lt;h2&gt;Time Management&lt;/h2&gt;
&lt;p&gt;The meeting should have a specific amount of time. My favorite, and I am very serious when I say favorite - historical fact is that Winston Churchill would limit all meetings &lt;em&gt;during the war&lt;/em&gt; to 20 minutes. &lt;strong&gt;YOUR MICROSERVICE'S RAM CONSUMPTION IS NOT MORE IMPORTANT THAN THE ALLIES WINNING THE SECOND WORLD WAR&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I don't know how accurate that fact is but I quote it more than once a week on average and in my experience nobody ever checks me on it so it's either true or you can also use it to keep your meetings below 20 minutes. Whatever the historical accuracy, my experience has taught me that 20 minutes is enough for almost all meetings I've had to attend or conduct. Meetings that have gone over 20 minutes deliver exponentially less value to participants per minute of runtime. The ideal length of a meeting is the amount time it takes to compose a Slack message. Oh look at that, your meeting can be a Slack message!&lt;/p&gt;
&lt;p&gt;✔️ Do adhere to a strict time limit. Some objectives need to be reached and the meeting extended if not, but the vast majority don't. Set the expectation with everyone that you'll hold them to a timeframe and, as if by magic, the meeting will resolve in the right amount of time.&lt;/p&gt;
&lt;p&gt;✔️ Do keep conversation flexible but insert yourself when it needs to move along.&lt;/p&gt;
&lt;p&gt;✔️ Do set approximate time limits for top-level items.&lt;/p&gt;
&lt;p&gt;❌ Do not tell participants about those time limits - just convey how long the meeting will be.&lt;/p&gt;
&lt;p&gt;❌ Don't harp on participants about time, they're doing their best to navigate the meeting. It's always OK to politely interrupt with a brief reminder about time when necessary.&lt;/p&gt;
&lt;h2&gt;Take Notes&lt;/h2&gt;
&lt;p&gt;Take notes. This is why I enumerated &amp;quot;secretary&amp;quot; as one of the roles in the meeting. Someone other than the facilitator should be writing down notes. &amp;quot;Even for daily standup meetings?&amp;quot; you might ask. Well, you should consider whether those are necessary, but yeah you probably should be taking notes if you're having that meeting.&lt;/p&gt;
&lt;p&gt;Notes will serve as important documentation after the fact for participants about what's been discussed and agreed to. What's more is that not everyone in your company can be in every meeting, but you need to make sure that information is available to everyone in your organization. Keep minutes to allow everyone to revisit them when necessary.&lt;/p&gt;
&lt;p&gt;✔️ Do appoint a &amp;quot;secretary&amp;quot; to take notes&lt;/p&gt;
&lt;p&gt;✔️ Do share the notes with everyone during the meeting&lt;/p&gt;
&lt;p&gt;✔️ Do take note of important questions, information, and decisions&lt;/p&gt;
&lt;p&gt;❌ Do not record every word of every participant&lt;/p&gt;
&lt;p&gt;❌ In fact, do not record the actions of specific participants unless it's absolutely necessary&lt;/p&gt;
&lt;p&gt;❌ Do not let everyone amend the minutes during the meeting - have one person dedicated to this task (brainstorming sessions maybe aside)&lt;/p&gt;
&lt;h2&gt;Everyone Must Participate&lt;/h2&gt;
&lt;p&gt;If you have a participant who isn't participating, then you don't have a &amp;quot;participant&amp;quot; - you have a voyeur. I'm creeped out by voyeurs, and you probably are too. Excuse them.&lt;/p&gt;
&lt;p&gt;Everyone in a meeting should be participating, either actively listening or contributing to the present conversation. If you're facilitating and notice someone isn't participating, ask their opinion. Create an atmosphere where they're welcome to share their opinion, no matter their seniority (either rank-wise or domain-wise). Participants asking clarifying questions, no matter how basic they may be, must be encouraged.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note on the topic of conversations: if a participant gives a hostile answer to a question, call them out on it. This is difficult but it's a win-win - the participant at the receiving end of the hostility knows you have their back, and the hostile participant (and everyone else) knows that behavior isn't acceptable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do encourage a diversity in opinions and voices&lt;/p&gt;
&lt;p&gt;✔️ Do ask everyone their thoughts regularly&lt;/p&gt;
&lt;p&gt;✔️ Do actively engage in the conduct of the meeting and encourage a positive atmosphere&lt;/p&gt;
&lt;p&gt;❌ Do not let participants be passive in a meeting&lt;/p&gt;
&lt;p&gt;❌ Do not overlook non-verbal cues in virtual meetings; they can be indicators of agreement, confusion, or the desire to speak&lt;/p&gt;
&lt;p&gt;❌ Do not avoid tough conversations. About that...&lt;/p&gt;
&lt;h2&gt;Engage Difficult Conversations&lt;/h2&gt;
&lt;p&gt;Meetings are called for specific purposes - sometimes to reach decisions, sometimes to explore new ideas, or any multitude of reasons that might touch on the passions of several participants. Meetings can bring up difficult, complicated, or heated conversations or even arguments. Make no mistake - this is good, and it's a good sign that a meeting was needed if this happens. A team that is passionately engaged is infinitely more preferrable than a team that always agrees with itself. There will always be a difference in opinion, and the best thing for the team(s) involved is to engage these points head-on.&lt;/p&gt;
&lt;p&gt;✔️ Do allow heated conversations and respectful arguments&lt;/p&gt;
&lt;p&gt;✔️ Do ensure the topic is stuck to during these moments, and ensure everyone maintains the overall focus of the meeting&lt;/p&gt;
&lt;p&gt;✔️ Do act to keep participants in-line when necessary&lt;/p&gt;
&lt;p&gt;✔️ Do suggest a breather if necessary. Do reprimand participants if they cross a line&lt;/p&gt;
&lt;p&gt;✔️ Do create a safe space for dissent and disagreement. DO emphasize the focus on ideas and not individuals&lt;/p&gt;
&lt;p&gt;❌ Do not shut down difficult conversations or honest arguments&lt;/p&gt;
&lt;p&gt;❌ Do not disengage if an argument comes up&lt;/p&gt;
&lt;h1&gt;After the Meeting&lt;/h1&gt;
&lt;p&gt;There's still a bit more work to do after the meeting - you're not done yet! All the more reason to respect the time of the meeting, or to try to avoid it altogether. Remember that what was discussed needs to be appropriately documented and easy to reference for participants. Remember also that not everyone in your organization was able to attend this meeting, but goodness knows when the topics discussed will impact them.&lt;/p&gt;
&lt;p&gt;I recommend keeping your meeting minutes in a single place that's easy to reference for everyone in your organization. Products like Notion, Monday, or Confluence allow you to add tags and @ members as necessary, making them searchable too.&lt;/p&gt;
&lt;h2&gt;Finalize the Minutes&lt;/h2&gt;
&lt;p&gt;After the meeting, ask all participants to spend a minute or two to add anything to the minutes that might have been missed. You asked them to refrain from adding anything to the minutes during the meeting so they could stay focused on the conversation, now that the conversation is over they can add any extra context they need.&lt;/p&gt;
&lt;p&gt;✔️ Do leave the minutes editable, at least for a period of time. Preferrably store them in a system with history tracking.&lt;/p&gt;
&lt;p&gt;✔️ Do follow up and ensure everyone agrees on the final minutes&lt;/p&gt;
&lt;p&gt;✔️ Do broadcast to your organization that your meeting is done and the minutes are available&lt;/p&gt;
&lt;p&gt;✔️ Do set a deadline for when minutes must be finalized and shared post-meeting&lt;/p&gt;
&lt;p&gt;❌ Do not fail to publish the minutes&lt;/p&gt;
&lt;p&gt;❌ Do not allow a &amp;quot;he said, she said&amp;quot; fight in the minutes after the meeting&lt;/p&gt;
&lt;h2&gt;Follow-Up Actions&lt;/h2&gt;
&lt;p&gt;A lot of meetings will result in participants being assigned specific tasks. You should either follow up with them in the appropriate timeframe, or ensure their managers do, that they've completed these tasks. It's good to update the minutes at this time to reflect that this was done, and if possible link to the result.&lt;/p&gt;
&lt;p&gt;✔️ Do ensure all participants are clear on follow-up items&lt;/p&gt;
&lt;p&gt;✔️ Do record follow-up work in the minutes&lt;/p&gt;
&lt;p&gt;❌ Do not assign follow up work after the meeting&lt;/p&gt;
&lt;h1&gt;Keep in Mind Always&lt;/h1&gt;
&lt;h2&gt;Meeting Etiquette&lt;/h2&gt;
&lt;p&gt;✔️ Do be mindful of your role, participation, and conduct during meetings&lt;/p&gt;
&lt;p&gt;✔️ Do respect everyone's time&lt;/p&gt;
&lt;p&gt;✔️ Do respect everyone's individual contributions&lt;/p&gt;
&lt;p&gt;✔️ Do adhere to virtual meeting norms, such as muting when not speaking&lt;/p&gt;
&lt;p&gt;✔️ Do leave, not attend, or &lt;em&gt;abort&lt;/em&gt; the meeting if you can&lt;/p&gt;
&lt;p&gt;❌ Do not dominate a meeting, either as a participant or a facilitator&lt;/p&gt;
&lt;p&gt;❌ Do not underestimate the impact of your physical environment in virtual meetings (e.g., background, lighting)&lt;/p&gt;
&lt;h2&gt;Regular Review&lt;/h2&gt;
&lt;p&gt;✔️ Do regularly assess the necessity and effectiveness of meetings, especially regular rituals&lt;/p&gt;
&lt;p&gt;✔️ Do be open to feedback and make adjustments as needed&lt;/p&gt;
&lt;p&gt;✔️ Do make adjustments or &lt;em&gt;abort the meeting&lt;/em&gt; if and when necessary&lt;/p&gt;
&lt;p&gt;✔️ Do periodically ask if the frequency of regular meetings is still appropriate or if adjustments are needed&lt;/p&gt;
&lt;p&gt;❌ Do not ignore patterns of unproductive meetings. If certain meetings consistently fail to achieve their objectives, it's a sign that they need to be reevaluated&lt;/p&gt;
&lt;p&gt;❌ Do not continue meetings just because they are a routine&lt;/p&gt;
&lt;h2&gt;Diverse Perspectives&lt;/h2&gt;
&lt;p&gt;✔️ Do value and seek a range of opinions and ideas, and encourage participation from everyone&lt;/p&gt;
&lt;p&gt;✔️ Be mindful of inclusive participation, especially in diverse teams&lt;/p&gt;
&lt;p&gt;❌ Do not allow the same individuals to dominate the conversation in every meeting&lt;/p&gt;
&lt;p&gt;❌ Do not dismiss ideas without proper consideration, and do not create an environment where only certain opinions are valued over others&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Yeah that's a lot of bullet points, but I have a lot of ideas on this topic. I feel strongly that meetings are very productive tools, but there's a lot of awkwardness in our industry around how any why we have meetings. Be considerate and hold your meetings with intention and purpose, drive towards your outcome, and your meetings will work for you and all of your colleagues.&lt;/p&gt;
&lt;p&gt;Above all, remember: &lt;em&gt;you probably don't need a meeting for it.&lt;/em&gt;&lt;/p&gt;
</description>
      <a10:updated>2023-12-03T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">console2048</guid>
      <link>https://ian.wold.guru/Posts/console2048.html</link>
      <title>Console2048</title>
      <description>&lt;p&gt;Jumping on the bandwagon, here's a C# implementation of Console 2048. Of course, 2048 has had a few console implementations, and most better done than this, but here it is anyway, because sometimes life is a mixed bag of apples and grapes.&lt;/p&gt;
&lt;p&gt;I've got it on the GitHub &lt;a href="https://github.com/IanWold/Console2048"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <a10:updated>2014-04-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">daily_grug</guid>
      <link>https://ian.wold.guru/Posts/daily_grug.html</link>
      <title>Daily Grug</title>
      <description>&lt;p&gt;One of favorite article is &lt;a href="https://grugbrain.dev/"&gt;The Grug Brained Developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Much wisdom, big article, hard read. Need daily small grug.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bit.ly/daily-grug"&gt;So made API for daily grug&lt;/a&gt; and made home page.&lt;/p&gt;
</description>
      <a10:updated>2023-10-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">deploying_aspdotnet_7_projects_with_railway</guid>
      <link>https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html</link>
      <title>Deploying ASP.NET 7 Projects with Railway</title>
      <description>&lt;p&gt;Nevermind that I haven't posted in more than 6 years, &lt;a href="https://www.railway.app"&gt;Railway&lt;/a&gt; is a startup cloud infrastructure provider that has gained a fair amount of traction for being easy to use and very cost effective to get started with. It's pretty barebones right now, but that makes it especially great for hobbyist projects. They have a free introductory tier, but then the next tier is $5/month plus a small resource usage fee. Really, their pricing is fantastic.&lt;/p&gt;
&lt;p&gt;When you deploy with Railway, they'll shove your app into a Docker container and handle the management/scaling/etc. behind the scenes. In addition, they have the ability to stand up a database for you - as of the time of this writing, you can choose PostgreSQL, MySQL, Mongo, and Redis. That said, they of course allow you to deploy any docker image or volume, so if you're willing to put in a little more work I imagine you can make any stack work for you. That all means of course that Railway probably isn't the best solution if you need control over container orchestration, but for CRUD projects and startups it seems quite promising to me.&lt;/p&gt;
&lt;p&gt;What's especially great is their integration with GitHub - it takes just a couple minutes to sign up for Railway, authenticate with GitHub, point it at a repo, and Railway takes care of the deployment from there. It has some magic to sense what kind of project your repo is and attempt to construct a build pipeline for your project right away. This doesn't work too well in .NET, but their interface is very sparse and easy to use to get up and going with it.&lt;/p&gt;
&lt;p&gt;In the remainder of this article, I'm going to be demonstrating how to get a .NET 7 app deployed with Railway. I'll start with a simple ASP.NET API, and then I'll demonstrate getting Blazor working. I'd encourage you to follow along with me - it's no cost to you (you don't even need to type in a credit card) and I think you'll be impressed with how easy it is to get a little hobby app deployed with Railway.&lt;/p&gt;
&lt;h1&gt;Setting Up&lt;/h1&gt;
&lt;p&gt;We'll just need three things to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An ASP.NET API&lt;/li&gt;
&lt;li&gt;A GitHub repo for that API&lt;/li&gt;
&lt;li&gt;A Railway account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's go top to bottom there&lt;/p&gt;
&lt;h2&gt;Setting up a new .NET API&lt;/h2&gt;
&lt;p&gt;To begin with, I'll assume you have .NET installed, and you have a GitHub account. We can create a barebones API from the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;dotnet new web -n RailwayAspApiDemo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This starts us off with the following, which will output &amp;quot;Hello, World!&amp;quot; at &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;);

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;MyApi&lt;/code&gt; directory, we can create a new repo. I'd recommend adding the &lt;a href="https://raw.githubusercontent.com/github/gitignore/main/VisualStudio.gitignore"&gt;VS .gitignore&lt;/a&gt; first, too.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;git add .
git commit -m &amp;quot;Getting Started&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you've created a repo in GitHub, we can push it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;git remote add origin https://github.com/{username}/RailwayAspApiDemo.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For reference, you can &lt;a href="https://github.com/IanWold/RailwayAspApiDemo"&gt;see this repo here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting up Railway&lt;/h2&gt;
&lt;p&gt;This is real simple - just go to &lt;a href="http://railway.app"&gt;railway.app&lt;/a&gt;, click login at the top, and then you can login with GitHub.&lt;/p&gt;
&lt;p&gt;That's all you need in order to set up Railway. Seriously! Of course we're going to push ahead and click that shiny New Project button though...&lt;/p&gt;
&lt;h1&gt;Deploying our first API&lt;/h1&gt;
&lt;p&gt;If we had containerized our API with Docker, Railway would have been perfectly happy for us to give it a dockerfile, and it would deploy that no problem. However, Railway also supports building and deploying .NET apps without needing to containerize them. Let's do that first, since we're trying to keep things barebones to get started.&lt;/p&gt;
&lt;h2&gt;Deploying From a GitHub Repo&lt;/h2&gt;
&lt;p&gt;One of Railway's coolest features is that you can start a project off by pointing it at a GitHub repo, and it'll automatically (ish) deploy the repo, and set up hooks to listen to any changes on &lt;code&gt;master&lt;/code&gt; and deploy then.&lt;/p&gt;
&lt;h3&gt;Configuring the Repository for Deployment&lt;/h3&gt;
&lt;p&gt;After logging in, we should be faced with a big New Project button&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Here we'll select Deploy from GitHub repo&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-select-github.png" alt="Select GitHub in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And then we can select the repo we just pushed&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-select-repo.png" alt="Select Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And why not try deploying right off the bat, so long as it's giving us the option?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-deploy-repo.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;We should see the deployment fail in just a few seconds.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-deploy-first-fail.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h3&gt;Debugging the First Errors&lt;/h3&gt;
&lt;p&gt;Let's click on the deployment and inspect the deploy logs. The first thing to notice is that Railway actually did a really good job guessing what our build config should be. At the top of the logs, we can see:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt; setup      │ dotnet-sdk                                    
────────────────────────────────────────────────────────────
 install    │ dotnet restore                                
────────────────────────────────────────────────────────────
 build      │ dotnet publish --no-restore -c Release -o out 
────────────────────────────────────────────────────────────
 start      │ ./out/RailwayAspApiDemo                       
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's really spectacular! Just because we had a &lt;code&gt;.csproj&lt;/code&gt; file, it was able to fill this all out. But it's not all peaches and pringles, we've got a build error. And indeed we're able to see a failure just a few lines down:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;#10 1.426 /nix/store/832ihvqk3vxgqqs5hvcyvg6bxqybky14-dotnet-sdk-6.0.403/sdk/6.0.403/Sdks
          /Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(144,5):
          error NETSDK1045: The current .NET SDK does not support targeting .NET 7.0.
          Either target .NET 6.0 or lower, or use a version of the .NET SDK
          that supports .NET 7.0. [/app/RailwayAspApiDemo.csproj]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Classic cloud moment - we need to know how to configure the .NET SDK version. Thankfully, &lt;a href="https://nixpacks.com/docs/providers/csharp"&gt;Railway's docs&lt;/a&gt;, though sparse, do give us exactly what we need, an environment variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;NIXPACKS_CSHARP_SDK_VERSION=&amp;quot;7.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be set on the &lt;code&gt;Variables&lt;/code&gt; tab on the UI for the service:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-variables-sdk-version.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Adding that variable should reschedule the deployment. Indeed, it works!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-deploy-second-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Just one thing - how do we see it? We'll need to generate a domain ourselves in the &lt;code&gt;Settings&lt;/code&gt; tab in the UI for the service:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-settings-networking.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;That will generate a slightly random &lt;code&gt;.up.railway.app&lt;/code&gt; domain for you to get started with. Of course, you can add a custom domain here if you've purchased one, but I'm going to roll with this because somehow I managed to snag &lt;a href="http://railwayaspapidemo-production.up.railway.app"&gt;railwayaspapidemo-production.up.railway.app&lt;/a&gt;. Luky me!&lt;/p&gt;
&lt;p&gt;Now we can navigate to that link and see &amp;quot;Hello, World!&amp;quot; right?&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-failed-respond.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Well, the build deployed, so let's look at our deploy logs. I imagine yours will look similar to mine:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;info: Microsoft.Hosting.Lifetime[14]
Now listening on: http://0.0.0.0:3000
info: Microsoft.Hosting.Lifetime[0]
Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
Content root path: /app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It says it's listening on port 3000, so it seems like the app is running, but why can't we see it? That's because when Railway deploys our app, it deploys it in a Docker container and generates a port for us. That means we either need to wire our app up to listen on the port that Railway dictates, or we need to tell Railway to use our nice, pretty port 3000. Luckily, Railway allows us to do both; the port number lives in the environment variable &lt;code&gt;PORT&lt;/code&gt;, so we can either override that in Railway or consume the environment variable from our API.&lt;/p&gt;
&lt;h3&gt;Overriding Railway's Port Assignment&lt;/h3&gt;
&lt;p&gt;To override Railway's port assignment, we can just set the environment variable in the variables tab, just like how we set the &lt;code&gt;NIXPACKS_CSHARP_SDK_VERSION&lt;/code&gt; variable earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;PORT=&amp;quot;3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will trigger a redeploy, and then we'll cross our fingers, refresh the app, and...&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-hello-world-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;h3&gt;Using Railway's Port in our API&lt;/h3&gt;
&lt;p&gt;Alternatively, if you want to use the Railway-generated port, we can add just a bit of code to do that. Go ahead and delete the &lt;code&gt;PORT&lt;/code&gt; environment variable if you added that.&lt;/p&gt;
&lt;p&gt;We can update our &lt;code&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

if (Environment.GetEnvironmentVariable(&amp;quot;PORT&amp;quot;) is not null and string environmentPort
    &amp;amp;&amp;amp; int.TryParse(environmentPort, out int port))
{
    builder.WebHost.ConfigureKestrel(o =&amp;gt; o.ListenAnyIP(port));
}

var app = builder.Build();

app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;);

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Aside: I &lt;strong&gt;hate&lt;/strong&gt; the syntax &lt;code&gt;is not null and string&lt;/code&gt; but I'm not going to complain. Too much.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Push that code to master and you should see Railway start deploying your API right away. Once that's up, you should see &amp;quot;Hello, World!&amp;quot; in the browser at your app.&lt;/p&gt;
&lt;h2&gt;Deploy From Docker or CLI&lt;/h2&gt;
&lt;p&gt;I could type out a whole section here, but honestly I would just be copying &lt;a href="https://rendle.dev/posts/deploying-to-railway-with-dotnet/"&gt;Mark Rendle's excelent explanation&lt;/a&gt;. His tutorial was quite helpful for me getting started, and I'd like to give some credit where it's due. So, if you want to containerize your app and use the dockerfile instead of Railway's build steps, or if you want to deploy using Railway's CLI, please give his article a visit!&lt;/p&gt;
&lt;h1&gt;Deploying a Blazor App&lt;/h1&gt;
&lt;p&gt;We've got our barebones API up and running, but it's missing a number of things yet. Frankly, that's a trivial example that's hiding a number of problems that still exist. I think Blazor's a good way to demonstrate these, especially since an ASP.NET-hosted Blazor WASM project requires sharing static files.&lt;/p&gt;
&lt;h2&gt;Setting up a Blazor Project&lt;/h2&gt;
&lt;p&gt;Similar to the API we created above, we can get the default Blazor project initialized with&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;dotnet new blazorwasm --hosted -n RailwayBlazorDemo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create an &amp;quot;ASP.NET-hosted&amp;quot; Blazor app, which means we'll get a separate client and server project. Go ahead and run this locally - it will spin up the server, and the server will serve you the Blazor WASM client at root:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-blazor-default.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Go ahead and push this to a new repository (for reference you can &lt;a href="https://github.com/IanWold/RailwayBlazorDemo"&gt;see mine here&lt;/a&gt;) and create a new project in Railway, linking to this new repository.&lt;/p&gt;
&lt;p&gt;That should start a deploy like before, and just like before you'll get a failed build. Remember to set the &lt;code&gt;NIXPACKS_CSHARP_SDK_VERSION&lt;/code&gt; environment variable, and resolve the port issue however you choose. I'll choose to resolve it in my code. In order to do that, I'll edit the &lt;code&gt;/Server/Program.cs&lt;/code&gt; file with the same lines we added to the barebones API. While that deploys, we also need to generate a domain for this app like we did before. And, don't you know it, I got lucky again: &lt;a href="http://railwayblazordemo-production.up.railway.app"&gt;railwayblazordemo-production.up.railway.app&lt;/a&gt;! Neat.&lt;/p&gt;
&lt;h3&gt;Configuring Railway to Deploy the Server&lt;/h3&gt;
&lt;p&gt;At this point, we might expect it to work. However, you'll notice after building Railway attempts to start the service several times, but fails with the same message:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/bin/bash: line 1: ./out/RailwayBlazorDemo.Client: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uh oh - we don't want to deploy the &lt;em&gt;client&lt;/em&gt;, we want to deploy the &lt;em&gt;server&lt;/em&gt;, because the server is configured to serve the client. The cause of this can be seen in the build logs like we'd expect - the automagic build figurer-outer guessed that we wanted to deploy the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;setup      │ dotnet-sdk_7                                  
───────────────────────────────────────────────────────────
install    │ dotnet restore                                
───────────────────────────────────────────────────────────
build      │ dotnet publish --no-restore -c Release -o out 
───────────────────────────────────────────────────────────
start      │ ./out/RailwayBlazorDemo.Client                
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This, like the other environment configuration issues in Railway, is simple to resolve. If you navigate back to the &lt;code&gt;Settings&lt;/code&gt; tab on the UI for the service, scroll down and you'll see Deploy settings, with a helpful place to override the start command. In fact you can override any of the build steps in these settings, although you'll notice that they're pretty sparse. For our needs here though, those settings are all fine, so we'll just update the start command to &lt;code&gt;./out/RailwayBlazorDemo.Server&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-settings-start-command.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This will trigger a rebuild, and that should succeed! Our app should now be at the address we generated earlier, right?&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-failed-404.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h3&gt;Configuring the ContentRootPath&lt;/h3&gt;
&lt;p&gt;Well, that's interesting, because it's a different error than we got when first deploying the barebones API earlier. In that case, we got a nice error displayed with Railway's UI. This tells us that the server is up and running - of course though we verified that when the server started logging after it deployed a minute ago. Thus, we know that the problem is with the server being able to serve up the client app.&lt;/p&gt;
&lt;p&gt;What's going on here isn't entirely obvious and it relies on a bit of knowledge about Docker to be able to intuit what's going on. There are two key lines in the logs. The key line is in the deploy logs:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;Content root path: /app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's going on is that the client is stored as a static file on the server, and the server needs access to that file to be able to serve it, of course. ASP calls the root directory for static files the &amp;quot;content root path&amp;quot;, and this one is a bit bunked.&lt;/p&gt;
&lt;p&gt;This has a code solution. Replace the first line of &lt;code&gt;Server/Program.cs&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(new WebApplicationOptions() {
    Args = args,
    ContentRootPath = &amp;quot;./&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, &lt;code&gt;ContentRootPath&lt;/code&gt; is &lt;em&gt;supposed&lt;/em&gt; to default to its root directory, but there's some weirdness that got introduced ... &lt;em&gt;*checks notes*&lt;/em&gt; ... somewhere? Honestly, I'm not sure how this solves it - I've just debugged enough weird directory issues with Docker in my professional career that it triggered my spidey senses.&lt;/p&gt;
&lt;p&gt;Making that change and pushing to &lt;code&gt;master&lt;/code&gt; will trigger a rebuild. Then, as if by magic, our app is working at the link:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-blazor-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Despite a few bumps in the road (which, apart from the content root path issue, make sense in context) we were able to get two .NET apps deployed in no time and with no money! In future, I think we'll explore adding a database with Railway and hooking our Blazor app up to it.&lt;/p&gt;
&lt;p&gt;I think this is the sort of case where Railway really excells. If you don't have an overly complicated backend system, deploying with Railway is extremely fast, simple, and cheap. Their focus on this area significantly reduces the barrier to entry to get a hobby app out the door. And, it seems that Railway does have enough capability to scale if you do attract users - at least through the first phase or two. Because of these factors, I'll be using Railway to deploy all my hobby apps in the future here! I'm very excited to discover a cloud provider this capable at this price.&lt;/p&gt;
&lt;p&gt;Railway's limitations are very apparent though - such is the tradeoff with the simplicity they've achieved. While you certainly can deploy any container with Railway, an overly complicated backend system could potentially become more burdensome to maintain than not. Really though, I don't know where that boundary is, but I suspect it's decently high enough that even if I do take some pet projects into production properly, I can rely on Railway to be able to serve them adequately.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;You can see my GitHub repos used in this article here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IanWold/RailwayAspApiDemo"&gt;RailwayAspApiDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IanWold/RailwayBlazorDemo"&gt;RailwayBlazorDemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.railway.app/"&gt;Railway's documentation&lt;/a&gt; is pretty good, but their &lt;a href="https://discord.com/invite/railway"&gt;Discord server&lt;/a&gt; is an excellent and lively place to get help when you need it.&lt;/p&gt;
</description>
      <a10:updated>2023-09-05T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">giscus_is_awesome</guid>
      <link>https://ian.wold.guru/Posts/giscus_is_awesome.html</link>
      <title>Giscus Is Awesome</title>
      <description>&lt;p&gt;&lt;a href="https://giscus.app/"&gt;giscus.app&lt;/a&gt; is really awesome!&lt;/p&gt;
&lt;p&gt;Last week I posted for the first time in six years and I figured I wanted to see about adding comments to this site. A Google search got me to Giscus really quick, and I was able to wire it up in just ten minutes. The thing that's still blowing my mind is that &lt;em&gt;it works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Behind the scenes, it syncs up with the GitHub Discussions tab on the repo that hosts this website, and it matches a discussion to a page based on the the page's title.&lt;/p&gt;
&lt;p&gt;When somebody adds the first comment to a page, it creates a corresponding discussion thread for the page. When a page loads, it checks to see if there is a corresponding discussion and it loads the conversations from that discussion thread.&lt;/p&gt;
&lt;p&gt;I can do comment moderation and whatnot on GitHub discussions, and if somebody stumbles upon my website on GitHub they can see the conversation right there. If the tool stops working, the conversations still exist in GitHub, living right alongside the source for this site.&lt;/p&gt;
&lt;p&gt;And - I can't emphasis this enough - &lt;em&gt;it just works&lt;/em&gt;. I see so few tools that &lt;em&gt;just work&lt;/em&gt; and this one does.&lt;/p&gt;
&lt;p&gt;Check it out!&lt;/p&gt;
</description>
      <a10:updated>2023-09-14T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">monokai_gray</guid>
      <link>https://ian.wold.guru/Posts/monokai_gray.html</link>
      <title>Monokai Gray</title>
      <description>&lt;p&gt;About a week (?) or so ago I hashed out a quick Sublime Text color scheme called Monokai Gray. I did so because I desperately love Monokai and I love the &lt;a href="https://sublime.wbond.net/packages/Wombat%20Theme"&gt;Wombat Theme&lt;/a&gt; as well. Unfortunately, I couldn't use Monokai with Wombat (without throwing up) because the yellowey hue of Monokai clashed with the classy grays of Wombat. Truthfully, I had been using a similar color scheme in Visual Studio for some time (the yellowey background didn't fly there, either). So I copied many of the colors over and prettied it up a tad, and this was the result.&lt;/p&gt;
&lt;p&gt;Here's a preview of what it looks like with some code I got &lt;a href="https://wiki.python.org/moin/SimplePrograms"&gt;here&lt;/a&gt; using the aforementioned Wombat Theme:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://bit.ly/MonokaiGraySample1" alt="Monokai Gray" /&gt;&lt;/p&gt;
&lt;p&gt;If you think it's neat, you can &lt;a href="https://sublime.wbond.net/packages/Monokai%20Gray"&gt;check it out&lt;/a&gt; on Package Control. I love feedback and pull requests alike!&lt;/p&gt;
</description>
      <a10:updated>2013-12-05T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">quick_and_dirty_sequential_ids_in_mongo</guid>
      <link>https://ian.wold.guru/Posts/quick_and_dirty_sequential_ids_in_mongo.html</link>
      <title>Quick &amp; Dirty Sequential IDs in MongoDB</title>
      <description>&lt;p&gt;That Mongo doesn't natively support sequential IDs is one of the many knocks against it. Sure, you &lt;em&gt;should&lt;/em&gt; be using GUID IDs in Mongo, but suppose you're working on a microservices conversion and you have a legacy mainframe that needs to be able to know what your objects are? If you're content just using Atlas, you can create a counter collection and add a trigger for auto-incrementing IDs &lt;a href="https://www.mongodb.com/basics/mongodb-auto-increment"&gt;fairly easily&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suppose however that you can't use a pure Atlas solution - you'll need to implement this logic yourself in your own code. If you happen to be working in a microservices environment you have concurrency concerns - there might be multiple shards of your database and/or multiple replicas of your microservice.&lt;/p&gt;
&lt;p&gt;Is a primary key generator really the sort of thing you want &amp;quot;quick and dirty&amp;quot;? Probably not. Am I doing it in prod? Yes.&lt;/p&gt;
&lt;h1&gt;Updating a counter collection&lt;/h1&gt;
&lt;p&gt;As a prerequisite, ensure you have the Mongo driver:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;go get go.mongodb.org/mongo-driver/mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just as Mongo's tutorial for Atlas recommends, we'll implement a counter collection. This collection will contain one document per &amp;quot;kind&amp;quot; of ID we need to generate. If you have just one object that needs sequential IDs, then you'll only have one document in this collection. We'll represent this collection document with a struct. It only needs one field, &lt;code&gt;sequence&lt;/code&gt;, which will represent the latest ID generated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoCounterDocument struct {
    sequence int `bson:&amp;quot;sequence&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ID of each document in the collection should be a string you hardcode or keep in a settings file (such as &lt;code&gt;&amp;quot;personIdCounter&amp;quot;&lt;/code&gt;), and doesn't need to be in the document struct. Instead, we'll encapsulate that in a generator struct along with a reference to the collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the functionality to generate the next ID, we'll use the &lt;code&gt;FindOneAndUpdate&lt;/code&gt; operation to increment &lt;code&gt;sequence&lt;/code&gt; and return the new ID to us. We can specify a couple options here: we can upsert the document so that it will be created automatically if one isn't there for us (useful for integration tests), and we can specify that we want the operation to read and return us a copy of the document &lt;em&gt;after&lt;/em&gt; the update has taken place.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func (generator *MongoIdGenerator) GetNextId() (int, error) {
    filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
    update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: 1)}
    options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

    var updatedDocument MongoIdCounter

    err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
    if err != nil {
        return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
    }

    return updatedDocument.sequence, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;FindOneAndUpdate&lt;/code&gt; is atomic and shouldn't have any concurrency concerns so long as you &lt;strong&gt;do not shard the counter collection&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;But I don't want to have to hit Mongo every time I want a new id&lt;/h1&gt;
&lt;p&gt;Huh, you and I think alike, I didn't either! To get around this, we can have our app generate multiple IDs each time it hits Mongo and use these IDs until it runs out locally.&lt;/p&gt;
&lt;p&gt;With this approach you have the concern that if your app is spinning up and tearing down too frequently, you'll start losing IDs in the mix. There are various strategies to mitigate this, such as retrieving a small number of IDs from Mongo each time or persisting the cache of IDs, but I'm not going to get into those here.&lt;/p&gt;
&lt;p&gt;We'll add &lt;code&gt;nextId&lt;/code&gt; and &lt;code&gt;maxId&lt;/code&gt; properties to the generator object, as well as an increment field to specify how many IDs we should generate each time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int
    nextId            int
    maxId             int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll add a func to instantiate this at startup. It'll be important that your app only has one of these objects per &amp;quot;kind&amp;quot; of ID you need to generate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func SetupMongoIdGenerator(collection *mongo.Collection, documentId string) *MongoIdGenerator {
    return $MongoIdGenerator{
        counterCollection   : collection,
        counterDocumentId   : documentId,
        // Adjust this up or down depending on how many IDs you want to generate at once:
        incrementBy         : 25,
        nextId              : 0,
        maxId               : 0
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can update our &lt;code&gt;GetNextId&lt;/code&gt; function to consult Mongo or not if &lt;code&gt;nextId&lt;/code&gt; equals &lt;code&gt;maxId&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func (generator *MongoIdGenerator) GetNextId() (int, error) {
    if generator.nextId == generator.maxId {
        filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
        update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: generator.incrementBy)}
        options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

        var updatedDocument MongoIdCounter

        err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
        if err != nil {
            return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
        }

        generator.nextId = updatedDocument.sequence - incrementBy
        generator.maxId = updatedDocument.sequence
    }

    generator.nextId += 1
    return generator.nextId, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do have a concurrency concern here though - we want to ensure &lt;code&gt;nextId&lt;/code&gt; and &lt;code&gt;maxId&lt;/code&gt; are only being accessed one at a time. We can use a mutex in the generator for this. Update the generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int
    nextId            int
    maxId             int
    mutex             sync.Mutex
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add the following two to the beginning of &lt;code&gt;GetNextId&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;generator.mutex.Lock()
defer generator.mutex.Unlock()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be that! Here's the final code all together:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoCounterDocument struct {
    sequence int `bson:&amp;quot;sequence&amp;quot;`
}

type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int
    nextId            int
    maxId             int
    mutex             sync.Mutex
}

func SetupMongoIdGenerator(collection *mongo.Collection, documentId string) *MongoIdGenerator {
    return $MongoIdGenerator{
        counterCollection   : collection,
        counterDocumentId   : documentId,
        incrementBy         : 25,
        nextId              : 0,
        maxId               : 0
    }
}

func (generator *MongoIdGenerator) GetNextId() (int, error) {
    generator.mutex.Lock()
    defer generator.mutex.Unlock()

    if generator.nextId == generator.maxId {
        filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
        update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: generator.incrementBy)}
        options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

        var updatedDocument MongoIdCounter

        err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
        if err != nil {
            return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
        }

        generator.nextId = updatedDocument.sequence - incrementBy
        generator.maxId = updatedDocument.sequence
    }

    generator.nextId += 1
    return generator.nextId, nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      <a10:updated>2023-11-01T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">should_i_learn_insert_some_tech_here</guid>
      <link>https://ian.wold.guru/Posts/should_i_learn_insert_some_tech_here.html</link>
      <title>"Should I Learn (Insert Some Tech Here)?"</title>
      <description>&lt;p&gt;Yes.&lt;/p&gt;
</description>
      <a10:updated>2023-11-14T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprache</guid>
      <link>https://ian.wold.guru/Posts/sprache.html</link>
      <title>An Introduction to Sprache</title>
      <description>&lt;p&gt;As my activity on this blog and my GitHub account may attest, I'm quite fond of a C# library called Sprache. Sprache is a parser-combinator that uses LINQ (Language INtegrated Query) to allow for the elegant construction of parsers in C#. I've been using Sprache for three years now, before I started college, and I've used it to implement a number of domain-specific languages (DSLs) both in side projects on my GitHub and on applications I've worked on. It's only natural I would want to share my favorite C# library with my fellow undergraduate classmates, but there are several factors which make it rather unapproachable for the average undergraduate computer science student. Thus, I have written this piece to provide a completely introductory tutorial to using Sprache.&lt;/p&gt;
&lt;p&gt;I'll explain LINQ and BNF, and then I'll walk you through the implementation of a few simple grammars in Sprache such that I may touch upon all the most important concepts in the Sprache library to allow the reader to immediately begin to implement the grammars which they desire. At the end of this post, I link to several articles which cover the framework and other related readings. In the future, I may also write a short handbook/reference to certain Sprache concepts.&lt;/p&gt;
&lt;p&gt;One does not necessarily need to have an understanding of C# to begin using Sprache, but a familiarity of a similar language (i.e. Java) would go a long way. I'm going to assume the reader has an understanding of object-oriented programming. I won't be going into an explanation of what a parser-combinator is, nor what a &amp;quot;combinator&amp;quot; is, in general. If you would like to become more involved in the development of Sprache, though, you should definitely familiarize yourself with the concept. I provide some links at the end of this tutorial to that end.&lt;/p&gt;
&lt;h1&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;To begin with, of course, you'll need to download Sprache. You can find it &lt;a href="https://github.com/sprache/Sprache"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;LINQ&lt;/h2&gt;
&lt;p&gt;LINQ, short for Language INtegrated Query, is a wonderful feature of Visual C# which adds data-querying operators to C#. LINQ expressions are sometimes (grammatically incorrectly) referred to as &amp;quot;LINQ queries&amp;quot; as they read rather fluently as a query on a data set. Here is an example of a LINQ expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;var myList = new List&amp;lt;string&amp;gt;()
{
    &amp;quot;hello&amp;quot;,
    &amp;quot;world&amp;quot;,
    &amp;quot;how&amp;quot;,
    &amp;quot;are&amp;quot;,
    &amp;quot;you&amp;quot;
};

var startsWithH =
    from s in myList
    where s.ToCharArray()[0] == 'h'
    select s;

foreach (var a in startsWithH)
	Console.WriteLine(a);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we start with a list of words, and we desire to print to the console each word which begins with the letter 'h'. The variable &lt;em&gt;startsWithH&lt;/em&gt; is defined with the following LINQ expression, which is how we sort out those words which start with 'h':&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;from s in myList
where s.ToLower().ToCharArray()[0] == 'h'
select s;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's look at what's going on here. First, we have a &lt;em&gt;from&lt;/em&gt; statement. This will iterate over each object in &lt;em&gt;myList&lt;/em&gt;, using &lt;em&gt;s&lt;/em&gt; as the iterator variable. Next, we have a &lt;em&gt;where&lt;/em&gt; statement, which filters out the objects in &lt;em&gt;myList&lt;/em&gt; based on the condition provided. Note that several &lt;em&gt;where&lt;/em&gt; statements could be specified here. At the end of this LINQ expression, as with every LINQ expression, we have a &lt;em&gt;select&lt;/em&gt; statement, which returns each &amp;quot;queried&amp;quot; object. In this case, we only desire to return the strings which begin with the letter 'h'.&lt;/p&gt;
&lt;p&gt;LINQ supports several operators apart from &lt;em&gt;from&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, and &lt;em&gt;select&lt;/em&gt;, though these are the main ones. Microsoft, naturally, provides a very in-depth &lt;a href="https://msdn.microsoft.com/en-us/library/bb394939.aspx"&gt;list of LINQ operators&lt;/a&gt;, though Wikipedia has &lt;a href="https://en.wikipedia.org/wiki/Language_Integrated_Query#Standard_Query_Operators"&gt;a much more succinct list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sprache uses LINQ to construct its parsers. This allows for quick implementation and easy and intuitive readability.&lt;/p&gt;
&lt;h2&gt;Backus-Naur Form&lt;/h2&gt;
&lt;p&gt;Backus-Naur Form, or BNF for short, is a metalanguage used to describe the grammars and syntax of context-free grammars (essentially, for our purposes, this means the grammars of computing languages). BNF defines expressions in terms of other expressions and strings using a number of rules which will become more familiar as we begin implementing these grammars in Sprache.&lt;/p&gt;
&lt;p&gt;As an example, suppose I want to define a grammar which specifies an arithmetic expression which might add, subtract, multiply, or divide two digits. I'll provide a BNF definition of this grammar, and then explain it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;add&amp;gt; | &amp;lt;subtract&amp;gt; | &amp;lt;multiply&amp;gt; | &amp;lt;divide&amp;gt;

&amp;lt;add&amp;gt;       ::= &amp;lt;digit&amp;gt; &amp;quot;+&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;subtract&amp;gt;  ::= &amp;lt;digit&amp;gt; &amp;quot;-&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;multiply&amp;gt;  ::= &amp;lt;digit&amp;gt; &amp;quot;*&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;divide&amp;gt;    ::= &amp;lt;digit&amp;gt; &amp;quot;/&amp;quot; &amp;lt;digit&amp;gt;

&amp;lt;digit&amp;gt;     ::= &amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's look at each of the elements and what they do. First, the most notable and important element is the reference for an expression, which looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expression_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expressions are referenced by this convention, and they are defined with the &lt;em&gt;::=&lt;/em&gt; operator. In defining such expressions, a number of rules can be used. Look at the definition for &lt;em&gt;expr&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;add&amp;gt; | &amp;lt;subtract&amp;gt; | &amp;lt;multiply&amp;gt; | &amp;lt;divide&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bar ('|') denotes an &lt;em&gt;or&lt;/em&gt; relationship. That is, an expression &lt;em&gt;expr&lt;/em&gt; can be either an &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;subtract&lt;/em&gt;, &lt;em&gt;multiply&lt;/em&gt;, or &lt;em&gt;divide&lt;/em&gt; expression.&lt;/p&gt;
&lt;p&gt;Now let's look at the definition of the &lt;em&gt;add&lt;/em&gt; expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;add&amp;gt;       ::= &amp;lt;digit&amp;gt; &amp;quot;+&amp;quot; &amp;lt;digit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that an &lt;em&gt;add&lt;/em&gt; can be a &lt;em&gt;digit&lt;/em&gt;, followed by a plus sign, followed by another &lt;em&gt;digit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You might notice a bit of an inefficiency in the grammar I defined above. Namely, we define &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;subtract&lt;/em&gt;, &lt;em&gt;multiply&lt;/em&gt;, and &lt;em&gt;divide&lt;/em&gt; separately, but due to the similarity in their structures, it feels like we should be able to define them all together. While there are certainly good reasons one might want to define them separately as I did above, for succinctness one might desire to redefine the grammar as such:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;digit&amp;gt; (&amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot;) &amp;lt;digit&amp;gt;

&amp;lt;digit&amp;gt;     ::= &amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I introduce a grouping of terms, defined by the parentheses. Now, &lt;em&gt;expr&lt;/em&gt; is defined to be two &lt;em&gt;digits&lt;/em&gt; separated by either an addition, subtraction, multiplication, or division symbol. This is, however, a rather dumb grammar, in that only two &lt;em&gt;digits&lt;/em&gt; can be used in the arithmetic expression, while we might want to allow any number to be used. We can extend the grammar further to allow for this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;number&amp;gt; (&amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot;) &amp;lt;number&amp;gt;

&amp;lt;number&amp;gt;    ::= &amp;lt;integer&amp;gt; [&amp;quot;.&amp;quot; &amp;lt;integer&amp;gt;]
&amp;lt;integer&amp;gt;   ::= +(&amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have broken a number into two parts, a &lt;em&gt;number&lt;/em&gt; and an &lt;em&gt;integer&lt;/em&gt;. Where I define &lt;em&gt;integer&lt;/em&gt;, I introduce a plus sign, which allows the expression which it suffixes to be repeated one or more times. Where I define &lt;em&gt;number&lt;/em&gt;, I introduce the square brackets, which surround optional expressions. Thus, the following terms are captured by the expression &lt;em&gt;number&lt;/em&gt;: 0, 125, 3.14, and 123.456. However, the following terms are not captured by &lt;em&gt;number&lt;/em&gt;, and I will allow the reader to postulate why they are not, and how the grammar might need to be altered to capture them: .31, -12, -12.56, and -.987.&lt;/p&gt;
&lt;p&gt;When we want to parse a language with Sprache (or any other parser, for that matter), we will first define the language in BNF, so that we can easily reference the pieces of the parser we must create, and to keep track of our progress.&lt;/p&gt;
&lt;h1&gt;Sprache&lt;/h1&gt;
&lt;p&gt;Ultimately, once you get used to using LINQ to construct parsers, Sprache is just another library, and becoming proficient in Sprache is the same process one should be used to of learning the methods given by the library and learning how to ask questions on stack overflow.&lt;/p&gt;
&lt;p&gt;Let's begin familiarizing ourselves by constructing a parser which can parse the string &amp;quot;hello&amp;quot; into a string &amp;quot;hello.&amp;quot; This is an entirely non-useful task for Sprache, but it gets our feet wet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; myParser =
    from str in Parse.String(&amp;quot;hello&amp;quot;).Text()
    select str;

string val = myParser.Parse(&amp;quot;hello&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;val&lt;/em&gt; will, unremarkably, be &amp;quot;hello.&amp;quot;However, the parser should be very easy to understand, especially given our understanding of the working of a LINQ expression. The method &lt;em&gt;String(string)&lt;/em&gt; is a parser which parses any string you desire (in this case, we desired to parse the string &amp;quot;hello&amp;quot;). The &lt;em&gt;String&lt;/em&gt; parser returns an enumerable of chars, so we need to use &lt;em&gt;Text&lt;/em&gt; to turn the enumerable into a string. From there, it should be rather obvious what is going on.&lt;/p&gt;
&lt;p&gt;Now, let's suppose we want to parse the string &amp;quot;hello&amp;quot; multiple times, separated by whitespace, and we want to know how many times &amp;quot;hello&amp;quot; appears. We can extend our parser above like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;int&amp;gt; myParser =
    from str in
        Parse.String(&amp;quot;hello&amp;quot;).Text()
        .DelimitedBy(Parse.WhiteSpace.Many())
    select str.Count();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing this parser with the string &amp;quot;hello   hellohello  hello&amp;quot; should return a result of 4. Because of the way our parser is constructed, it is relatively straightforward to read it as &amp;quot;parse the string &amp;quot;hello&amp;quot; delimited by whitespace.&amp;quot; But let's look at what's going on here. &lt;em&gt;DelimitedBy&lt;/em&gt; will attempt to match the &amp;quot;hello&amp;quot; parser, and then it will look for whitespace (&lt;em&gt;WhiteSpace().Many()&lt;/em&gt; is a parser itself which matches 0 or more different whitespace characters in a row), and will then look to match &amp;quot;hello&amp;quot; again and more whitespace, until the parser is no longer able to match either &amp;quot;hello&amp;quot; or whitespace, at which point it returns an &lt;em&gt;IEnumberable&lt;/em&gt; containing several &amp;quot;hello&amp;quot;s. Our &lt;em&gt;select&lt;/em&gt; statement can then select the &lt;em&gt;Count&lt;/em&gt; of that &lt;em&gt;IEnumerable&lt;/em&gt;, and thus we can obtain the number of times &amp;quot;hello&amp;quot; is parsed.&lt;/p&gt;
&lt;p&gt;This idea of chaining parsers onto each other, as &lt;em&gt;DelimitedBy&lt;/em&gt; is chained onto &lt;em&gt;String&lt;/em&gt;, is the entire concept behind parser-combinators.&lt;/p&gt;
&lt;p&gt;A slightly more complicated task might be to try to parse a variable name surrounded by whitespace (often called an &amp;quot;identifier&amp;quot;). This example is given on the Sprache GitHub page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; identifier =
    from leading in Parse.WhiteSpace.Many()
    from first in Parse.Letter.Once()
    from rest in Parse.LetterOrDigit.Many()
    from trailing in Parse.WhiteSpace.Many()
    select new string(first.Concat(rest).ToArray());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, &amp;quot;   abc123   &amp;quot; should come out as &amp;quot;abc123&amp;quot;. Notice how staggering several &lt;em&gt;from&lt;/em&gt; statements in a row reads as though we are saying &amp;quot;then&amp;quot;. For example, this parser could be read by a human as &amp;quot;Parse many whitespace characters, &lt;em&gt;then&lt;/em&gt; parse one letter, &lt;em&gt;then&lt;/em&gt; parse 0 or more letters or digits, &lt;em&gt;then&lt;/em&gt; parse more whitespace, and return the first letter and the rest of the letters/digits concatenated to it&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Our First Language&lt;/h2&gt;
&lt;p&gt;So, let's now define the grammar for a small DSL, and we'll try to parse it. Let's make a language that defines variables: we can have an identifier, followed by a colon, and then a string, and we can define as many variables as we want on different lines. Ultimately, we want to parse this into a dictionary. So, our resulting language could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;identifier1 : &amp;quot;hello&amp;quot;
identifier2 : &amp;quot;world&amp;quot;
identifier3 : &amp;quot;yay parsing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The BNF for the language looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-BNF"&gt;&amp;lt;block&amp;gt;        ::= &amp;lt;expr&amp;gt; *(&amp;lt;newline&amp;gt; &amp;lt;expr&amp;gt;)
&amp;lt;expr&amp;gt;         ::= &amp;lt;identifier&amp;gt; [&amp;lt;whitespace&amp;gt;] &amp;quot;:&amp;quot; [&amp;lt;whitespace&amp;gt;] &amp;lt;string&amp;gt;
&amp;lt;identifier&amp;gt;   ::= &amp;lt;letter&amp;gt; *(&amp;lt;letter&amp;gt; | &amp;lt;digit&amp;gt;)
&amp;lt;string&amp;gt;       ::= &amp;quot;\&amp;quot;&amp;quot; *(&amp;lt;any_character&amp;gt;) &amp;quot;\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'll imagine you can determine what &lt;em&gt;newline&lt;/em&gt;, &lt;em&gt;letter&lt;/em&gt;, &lt;em&gt;digit&lt;/em&gt;, and &lt;em&gt;any_character&lt;/em&gt; are. Note, though, that we technically want &lt;em&gt;any_character&lt;/em&gt; to parse any character except a quotation mark.&lt;/p&gt;
&lt;p&gt;Sprache already contains parsers for a letter, digit, and any character, so we should be all good to go from here. We already have our identifier parser, so let's add to that by constructing our string parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; identifier =
    from first in Parse.Letter.Once()
    from rest in Parse.LetterOrDigit.Many()
    select new string(first.Concat(rest).ToArray());

Parser&amp;lt;string&amp;gt; stringParser =
    from first in Parse.Char('&amp;quot;')
    from text in Parse.AnyChar.Except(Parse.Char('&amp;quot;')).Many().Text()
    from last in Parse.Char('&amp;quot;')
    select text;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use &lt;em&gt;Except&lt;/em&gt; to add an exception to the &lt;em&gt;AnyChar&lt;/em&gt; parser. In addition, we use &lt;em&gt;Text&lt;/em&gt; at the end to tell sprache to convert the IEnumerable returned by &lt;em&gt;Many&lt;/em&gt; into a string. Now, we can add the parser for the expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;//Adding to the code above:

Parser&amp;lt;Dictionary&amp;lt;string, string&amp;gt;&amp;gt; expr =
    from id in identifier
    from colon in Parse.Char(':').Token()
    from str in stringParser
    select new Dictionary&amp;lt;string, string&amp;gt;() { { id, str } };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; is used here - that does exactly what it says - it makes the parser optional. In addition, I introduced &lt;em&gt;Token&lt;/em&gt;, which will parse whitespace before and after the &lt;em&gt;CHar&lt;/em&gt; parser. Notice how we are able to reference the parsers we created earlier, and we can use the values they return to create a new object. Let's finish it off by creating the &amp;quot;block&amp;quot; parser, which is supposed to parse several expressions separated by newlines:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;//Adding to the code above:

Parser&amp;lt;IEnumerable&amp;lt;Dictionary&amp;lt;string,string&amp;gt;&amp;gt;&amp;gt; block =
    expr.DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice  how we are not using the fancy LINQ expressions here. Because our parser fits on one line, and &lt;em&gt;DelimitedBy&lt;/em&gt; returns the type that we want, then we can condense our parser a bit. Now that we're done with our parser, we should be able to parse our example file just fine into an &lt;em&gt;IEnumberable&lt;/em&gt; of dictionaries containing our identifier-string pairs.&lt;/p&gt;
&lt;h2&gt;Comma-Separated Values&lt;/h2&gt;
&lt;p&gt;CSV files are extremely popular for storing tables in plaintext, and they're very easy to parse, as you might imagine. Frequently, programs which read from CSV files desire to read the files into their own data structures. So, we'll imagine a couple different scenarios involving CSVs, and we'll look at how we can go about parsing each one.&lt;/p&gt;
&lt;p&gt;First, I'll provide a rough CSV parser that sorts the CSV into a list of a list of strings, and from there we can talk about a custom data structure for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt;&amp;gt; csv = 
    Parse.AnyChar.Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token())
        .DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This parser is quite fun, as it can be written in one line, yet it parses a CSV file pretty much alright - you might notice that none of the values can contain a comma (Bonus problem: see if you can get the parser to recognize escape characters so that the user can insert commas. Later, in the JSON parser, we'll implement escape characters).&lt;/p&gt;
&lt;p&gt;Let's digress now, and suppose we have the following simplistic data structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;class Row
{
    public string Title { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Items { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let's further suppose that in a CSV, the first item of every row is the title of that row, and the remaining elements in that row are the items, corresponding to the structure above. So, we want to get a list of these rows, presumably. We can very easily modify our parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;Row&amp;gt; line =
    from first in
        Parse.AnyChar
        .Except(Parse.Char(',')
        .Or(Parse.Char('\n')))
        .Many().Text()
    from comma in Parse.Char(',').Token()
    from rest in
        Parse.AnyChar
        .Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token())
    select new Row() { Title = first, Items = rest };

Parser&amp;lt;IEnumerable&amp;lt;Row&amp;gt;&amp;gt; csv = line.DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally, if you're just interested in obtaining the rows, then this parser works perfectly. But let's suppose we didn't want the nested lists to contain the rows, but the columns. In this case, we can do some nifty snafu:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; line =
    Parse.AnyChar.Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt;&amp;gt; csv =
    from l in line.DelimitedBy(Parse.Char('\n'))
    select Transform(l);

//Here's the Transform method:
//Assume the table is n-by-n
static IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; Transform(IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; t)
{
    var toReturn = new List&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;();
    
    for (int i = 0; i &amp;lt; t.ElementAt(0).Count(); i++)
    {
        for (int j = 0; j &amp;lt; t.Count(); j++)
        {
            if (toReturn.Count == i) toReturn.Add(new List&amp;lt;string&amp;gt;);
            if (toReturn[i].Count == j) toReturn[i].Add(&amp;quot;&amp;quot;);
            
            toReturn[i][j] = t.ElementAt(j).ElementAt(i);
        }
    }

    return toReturn;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Transform&lt;/em&gt; just rotates the list of lists as though it's a matrix, so we're not adding anything too special here. What if we wanted to do what we did above with the rows, but with the columns? Try modifying this code to do just that. Bonus points if you can eliminate &lt;em&gt;Transform&lt;/em&gt; and perform the transformation within the parser!&lt;/p&gt;
&lt;h2&gt;XML&lt;/h2&gt;
&lt;p&gt;Obviously, XML is a rather complex language, and a &lt;a href="http://www.w3.org/TR/REC-xml/"&gt;complete BNF specification&lt;/a&gt; is thus very large. Therefore, we'll be using a much simpler variation of XML, which we can see below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;tag&amp;gt; ::= &amp;lt;single_line_tag&amp;gt; | &amp;lt;multi_line_tag&amp;gt;
&amp;lt;short_tag&amp;gt; ::= &amp;quot;&amp;lt;&amp;quot; &amp;lt;identifier&amp;gt; &amp;lt;whitespace&amp;gt; &amp;lt;attribute&amp;gt;* &amp;quot;/&amp;gt;&amp;quot;
&amp;lt;full_tag&amp;gt; ::= &amp;quot;&amp;lt;&amp;quot; &amp;lt;identifier&amp;gt; &amp;lt;whitespace&amp;gt; &amp;lt;attribute&amp;gt;* &amp;quot;&amp;gt;&amp;quot; &amp;lt;tag&amp;gt;*
    &amp;quot;&amp;lt;/&amp;quot; &amp;lt;identifier&amp;gt; &amp;quot;&amp;gt;&amp;quot;
&amp;lt;attribute&amp;gt; ::= &amp;lt;identifier&amp;gt; &amp;quot;=&amp;quot; &amp;quot;\&amp;quot;&amp;quot; &amp;lt;any_characters&amp;gt; &amp;quot;\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might notice I'm leaving out a few unnecessary components: Expressions which are intuitively obvious aren't defined, &lt;em&gt;whitespace&lt;/em&gt; is only used where necessary (we'll use &lt;em&gt;Token&lt;/em&gt; prolifically to allow for flexibility on the user's part), and when defining a &amp;quot;full&amp;quot; tag, the identifier of the opening and closing tags must be the same. The latter component cannot be defined in vanilla BNF, so it's something we'll need to account for in our code.&lt;/p&gt;
&lt;p&gt;Instead of writing this code out, I'll reference the &lt;a href="https://github.com/sprache/Sprache/blob/master/src/XmlExample/Program.cs"&gt;XML example&lt;/a&gt; which is included with Sprache, and I'll explain the new elements and solutions found there.&lt;/p&gt;
&lt;p&gt;Right off the bat, looking at the &lt;em&gt;Document&lt;/em&gt; parser, we're introduced to a new use of LINQ. As I alluded to previously, any LINQ query can be written in one line without the LINQ statements. Here's the critical portion of line 98:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Node.Select(n =&amp;gt; new Document { Root = n })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make this easier to comprehend, we can write it out using the regular LINQ notation we're familiar with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;from n in Node
select new Document() { Root = n };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, the LINQ statements we've been are just a shorthand (or perhaps more of a &amp;quot;paraphrasing,&amp;quot; as they tend to be longer) for the inline notation. &lt;em&gt;Document&lt;/em&gt;
very well could have been written using solely the LINQ statements, and that would have looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;public static readonly Parser&amp;lt;Document&amp;gt; Document =
    from leading in Parse.WhiteSpace.Many()
    from doc in from n in Node.End()
                select new Document() { Root = n }
    select doc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next parser up from &lt;em&gt;Document&lt;/em&gt; is &lt;em&gt;Item&lt;/em&gt;. We'll ignore the code regarding the comments (if you're interested in this, please see my post &lt;a href="https://ianwold.silvrback.com/parsing-comments-with-sprache"&gt;Parsing Comments with Sprache&lt;/a&gt;). This makes it easy to see that an &lt;em&gt;Item&lt;/em&gt; is either a &lt;em&gt;Node&lt;/em&gt; cast as an Item, or a &lt;em&gt;Content&lt;/em&gt;, and a &lt;em&gt;Node&lt;/em&gt; (looking above in the document) is either a short or full node.&lt;/p&gt;
&lt;p&gt;Looking at the &lt;em&gt;ShortNode&lt;/em&gt; parser, we can see it seems completely familiar, except that the LINQ expression is used as an argument to the &lt;em&gt;Tag&lt;/em&gt; method. The &lt;em&gt;Tag&lt;/em&gt; method returns a parser that parses a greater than and less than sign before and after the parser you specify. This abstraction allows us to write cleaner code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FullNode&lt;/em&gt; is fun for a couple reasons. First, look at how they solved the issue of requiring opening and closing tags to be named the same with the &lt;em&gt;EndTag&lt;/em&gt; method. In addition, notice the use of the &lt;em&gt;Ref&lt;/em&gt; parser. In &lt;em&gt;FullNode&lt;/em&gt;, we need to use &lt;em&gt;Item&lt;/em&gt;, but it has obviously not yet been created. &lt;em&gt;Ref&lt;/em&gt; allows us to reference a parser later in the document, thus allowing us to create some recursive or ambiguous grammars with Sprache.&lt;/p&gt;
&lt;h2&gt;JSON&lt;/h2&gt;
&lt;p&gt;JSON, or JavaScript Object Notation, is kind of like XML. It's a way of storing data in plaintext (in a key-value pair manner) which is also easily readable by a human. In addition, it's very easy to construct a parser for it. The BNF form is very clear and concise - here, I have transcribed the &lt;a href="http://json.org/"&gt;informal definition on json.org&lt;/a&gt; into the more formal BNF notation which we have been using in this tutorial:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;object&amp;gt;    ::= &amp;quot;{}&amp;quot; | &amp;quot;{&amp;quot; &amp;lt;members&amp;gt; &amp;quot;}&amp;quot;
&amp;lt;members&amp;gt;   ::= &amp;lt;pair&amp;gt; | &amp;lt;pair&amp;gt; &amp;quot;,&amp;quot; &amp;lt;members&amp;gt;
&amp;lt;pair&amp;gt;      ::= &amp;lt;string&amp;gt; &amp;quot;:&amp;quot; &amp;lt;value&amp;gt;
&amp;lt;array&amp;gt;     ::= &amp;quot;[]&amp;quot; | &amp;quot;[&amp;quot; &amp;lt;elements&amp;gt; &amp;quot;]&amp;quot;
&amp;lt;elements&amp;gt;  ::= &amp;lt;value&amp;gt; | &amp;lt;value&amp;gt; &amp;quot;,&amp;quot; &amp;lt;elements&amp;gt;
&amp;lt;value&amp;gt;     ::= &amp;lt;literal&amp;gt; | &amp;lt;array&amp;gt; | &amp;lt;object&amp;gt;
&amp;lt;literal&amp;gt;   ::= &amp;lt;string&amp;gt; | &amp;lt;number&amp;gt; | &amp;lt;bool&amp;gt; | &amp;quot;null&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example of a valid JSON file might be the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;,
  &amp;quot;age&amp;quot;: 25,
  &amp;quot;address&amp;quot;: {
    &amp;quot;streetAddress&amp;quot;: &amp;quot;21 2nd Street&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;,
    &amp;quot;state&amp;quot;: &amp;quot;NY&amp;quot;,
    &amp;quot;postalCode&amp;quot;: &amp;quot;10021-3100&amp;quot;
  },
  &amp;quot;phoneNumbers&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: &amp;quot;home&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;212 555-1234&amp;quot;
    },
    {
      &amp;quot;type&amp;quot;: &amp;quot;office&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;646 555-4567&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should allow us to construct the data structure we're going to store our data in (called an Abstract Syntax Tree):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;
public class JSONValue {}

public class JSONObject : JSONValue
{
    public Dictionary&amp;lt;string, JSONValue&amp;gt; Pairs { get; set; }

    public JSONObject(IEnumerable&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt; pairs)
    {
        Pairs = new Dictionary&amp;lt;string, JSONValue&amp;gt;();
        if (pairs != null)
            foreach (var p in pairs)
                Pairs.Add(p.Key, p.Value);
    }
}

public class JSONArray : JSONValue
{
    public List&amp;lt;JSONValue&amp;gt; Elements { get; set; }

    public JSONArray(IEnumerable&amp;lt;JSONValue&amp;gt; elements)
    {
        Elements = new List&amp;lt;JSONValue&amp;gt;();
        if (elements != null)
            foreach (var e in elements)
                Elements.Add(e);
    }
}

public class JSONLiteral : JSONValue
{
    public string Value { get; set; }

    public LiteralType ValueType { get; set; }

    public JSONLiteral(string value, LiteralType type)
    {
        Value = value;
        ValueType = type;
    }

    pubilc static enum LiteralType
    {
        String,
        Number,
        Boolean,
        Null
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the parser, we'll start from the bottom and work our way up, as we usually do. Literal values are expressed nicely by our JSONLiteral class, which stores every value as a string, and also keeps track of the type of literal it is. Parsing them all out is a bit of a pain, so I'll post each parser here and explain it briefly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONLiteral&amp;gt; JNull =
    from str in Parse.IgnoreCase(&amp;quot;null&amp;quot;)
    select new JSONLiteral(null, JSONLiteral.LiteralType.Null);

Parser&amp;lt;JSONLiteral&amp;gt; JBoolean =
    from str in Parse.IgnoreCase(&amp;quot;true&amp;quot;).Text()
    			.Or(Parse.IgnoreCase(&amp;quot;false&amp;quot;).Text())
    select new JSONLiteral(str, LiteralType.Boolean);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parsing a literal null or boolean value isn't all too complicated. We just need to parse the strings which represent them, ignoring the case, and return new JSONLiteral objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; JExp =
    from e in Parse.IgnoreCase(&amp;quot;e&amp;quot;).Text()
    from sign in Parse.String(&amp;quot;+&amp;quot;).Text()
                 .Or(Parse.String(&amp;quot;-&amp;quot;).Text())
                 .Optional()
    from digits in Parse.Digit.Many().Text()
    select e + ((sign.IsDefined) ? sign.Get() : &amp;quot;&amp;quot;) + digits;

Parser&amp;lt;string&amp;gt; JFrac =
    from dot in Parse.String(&amp;quot;.&amp;quot;).Text()
    from digits in Parse.Digit.Many().Text()
    select dot + digits;

Parser&amp;lt;string&amp;gt; JInt =
    from minus in Parse.String(&amp;quot;-&amp;quot;).Text().Optional()
    from digits in Parse.Digit.Many().Text()
    select (minus.IsDefined ? minus.Get() : &amp;quot;&amp;quot;) + digits;

Parser&amp;lt;JSONLiteral&amp;gt; JNumber =
    from integer in JInt
    from frac in JFrac.Optional()
    from exp in JExp.Optional()
    select new JSONLiteral(integer +
                           (frac.IsDefined ? frac.Get() : &amp;quot;&amp;quot;) +
                           (exp.IsDefined ? exp.Get() : &amp;quot;&amp;quot;),
                           LiteralType.Number);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parsing a number is much more exciting. We need to account for integers, decimals, negation, and 'e'. The code above for &lt;em&gt;JNumber&lt;/em&gt; knows we need at least an integer, and can be optionally followed by the fraction or the exponential term. Notice that &lt;em&gt;Optional&lt;/em&gt; returns a special object which may or may not be defined. Thus, we need to check whether it is defined with &lt;em&gt;IsDefined&lt;/em&gt; before we can &lt;em&gt;Get&lt;/em&gt; its value.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;List&amp;lt;char&amp;gt; EscapeChars = new List&amp;lt;char&amp;gt;
    { '\&amp;quot;', '\\', 'b', 'f', 'n', 'r', 't' };

Parser&amp;lt;char&amp;gt; ControlChar =
    from first in Parse.Char('\\')
    from next in Parse.EnumerateInput(EscapeChars, c =&amp;gt; Parse.Char(c))
    select ((next == 't') ? '\t' :
            (next == 'r') ? '\r' :
            (next == 'n') ? '\n' :
            (next == 'f') ? '\f' :
            (next == 'b') ? '\b' :
            next );

Parser&amp;lt;char&amp;gt; JChar =
    Parse.AnyChar
    .Except(Parse.Char('&amp;quot;')
    .Or(Parse.Char('\\')))
    .Or(ControlChar);

Parser&amp;lt;JSONLiteral&amp;gt; JString =
    from first in Parse.Char('&amp;quot;')
    from chars in JChar.Many().Text()
    from last in Parse.Char('&amp;quot;')
    select new JSONLiteral(chars, LiteralType.String);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To parse a string, we want to make sure that we allow for control characters (the control characters are all given on &lt;a href="http://json.org"&gt;json.org&lt;/a&gt;). As you can see, the string will be zero or more characters, which are in turn any character except a quotation mark or the escape character. Where &lt;em&gt;ControlChar&lt;/em&gt; is defined, &lt;em&gt;EnumerateInput&lt;/em&gt; is used on our list &lt;em&gt;EscapeChars&lt;/em&gt;. This instance of &lt;em&gt;EnumerateInput&lt;/em&gt; will return the following parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parse.Char( '\&amp;quot;').Or(Parse.Char('\\')).Or(Parse.Char('b')) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, it chains each element in &lt;em&gt;EscapeChars&lt;/em&gt; along as the parser &lt;em&gt;Parse.Char()&lt;/em&gt; using the &lt;em&gt;Or&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONLiteral&amp;gt; JLiteral =
    JString
    .XOr(JNumber)
    .XOr(JBoolean)
    .XOr(JNull);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we're able to piece them all together to form our &lt;em&gt;JLiteral&lt;/em&gt; parser. Luckily, this is half of our entire parser!&lt;/p&gt;
&lt;p&gt;As you can see from our JSON BNF, the rest of the grammar is recursive. That is, self-referential. This is where &lt;em&gt;Ref&lt;/em&gt; will come in handy. We need to implement objects and arrays, and those two &lt;strong&gt;plus&lt;/strong&gt; literals will be defined as a value. So, let's define our &lt;em&gt;JValue&lt;/em&gt; parser, and proceed from there.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONValue&amp;gt; JValue =
    Parse.Ref(() =&amp;gt; JObject)
    .Or(Parse.Ref(() =&amp;gt; JArray))
    .Or(JLiteral);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are using &lt;em&gt;Ref&lt;/em&gt; to reference our yet-undefined &lt;em&gt;JObject&lt;/em&gt; and &lt;em&gt;JArray&lt;/em&gt; parsers. Of course, we've already created our &lt;em&gt;JLiteral&lt;/em&gt; parser, so we do not need to use &lt;em&gt;Ref&lt;/em&gt; to access it.&lt;/p&gt;
&lt;p&gt;Now we just need to parse JSON arrays and objects. For convenience, let's recall the portion of the JSON BNF which defined them:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;object&amp;gt;    ::= &amp;quot;{}&amp;quot; | &amp;quot;{&amp;quot; &amp;lt;members&amp;gt; &amp;quot;}&amp;quot;
&amp;lt;members&amp;gt;   ::= &amp;lt;pair&amp;gt; | &amp;lt;pair&amp;gt; &amp;quot;,&amp;quot; &amp;lt;members&amp;gt;
&amp;lt;pair&amp;gt;      ::= &amp;lt;string&amp;gt; &amp;quot;:&amp;quot; &amp;lt;value&amp;gt;
&amp;lt;array&amp;gt;     ::= &amp;quot;[]&amp;quot; | &amp;quot;[&amp;quot; &amp;lt;elements&amp;gt; &amp;quot;]&amp;quot;
&amp;lt;elements&amp;gt;  ::= &amp;lt;value&amp;gt; | &amp;lt;value&amp;gt; &amp;quot;,&amp;quot; &amp;lt;elements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that &lt;em&gt;arrray&lt;/em&gt; and &lt;em&gt;object&lt;/em&gt; look very much alike, and the definition of &lt;em&gt;array&lt;/em&gt; appears to be a tad more simple. Therefore, we should write our &lt;em&gt;array&lt;/em&gt; parser first, and we can copy it down to create our slightly more complicated &lt;em&gt;object&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;JSONValue&amp;gt;&amp;gt; JElements =
    JValue.DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;JSONValue&amp;gt; JArray =
    from first in Parse.Char('[').Token()
    from elements in JElements.Optional()
    from last in Parse.Char(']').Token()
    select new JSONArray(elements.IsDefined ? elements.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how our &lt;em&gt;JElements&lt;/em&gt; parser almost perfectly matches the definition of &lt;em&gt;elements&lt;/em&gt; in the BNF. &lt;em&gt;DelimitedBy&lt;/em&gt; will parse any number of &lt;em&gt;JValue&lt;/em&gt; here, so long as they are separated by commas - this removes our need to call &lt;em&gt;JElements&lt;/em&gt; recursively. Our &lt;em&gt;JArray&lt;/em&gt; parser, then, just encases the &lt;em&gt;JElements&lt;/em&gt; parser in square brackets. If we desired we could combine the parsers into one. The reason I separated them here, however, was to demonstrate the close relationship between BNF and parsers like Sprache. Here is how the combined parsers would look:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONValue&amp;gt; JArray =
    from first in Parse.Char('[').Token()
    from elements in
        JValue.DelimitedBy(Parse.Char(',').Token()).Optional()
    from last in Parse.Char(']').Token()
    select new JSONArray(elements.IsDefined ? elements.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can move on to write our &lt;em&gt;JObject&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt; JPair =
    from name in JString
    from colon in Parse.Char(':').Token()
    from val in JValue
    select new KeyValuePair&amp;lt;string, JSONValue&amp;gt;(name.Value, val);

Parser&amp;lt;IEnumerable&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt;&amp;gt; JMembers =
    JPair.DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;JSONValue&amp;gt; JObject =
    from first in Parse.Char('{').Token()
    from members in JMembers.Optional()
    from last in Parse.Char('}').Token()
    select new JSONObject(members.IsDefined ? members.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, this should all be trivial to you - especially considering &lt;em&gt;JObject&lt;/em&gt; and &lt;em&gt;JMembers&lt;/em&gt; are copies of &lt;em&gt;JArray&lt;/em&gt; and &lt;em&gt;JElements&lt;/em&gt;, respectively. With that, we should now be able to parse any document which conforms to the JSON standard. Notice that every JSON document is itself a single JSON object. Thus, given a JSON document, we would parse it with our &lt;em&gt;JObject&lt;/em&gt; parser.&lt;/p&gt;
&lt;p&gt;If you would like to see the parser in full, there is a version &lt;a href="https://github.com/IanWold/SpracheJSON/blob/master/SpracheJSON/JSONParser.cs"&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;My Work With Sprache&lt;/h1&gt;
&lt;p&gt;As I mentioned above, I've been working with Sprache for three years now, after seeing a presentation about it at the &lt;a href="http://twincitiescodecamp.com/"&gt;Twin Cities Code Camp&lt;/a&gt;, which is totally awesome and you should all go (it's even free).&lt;/p&gt;
&lt;p&gt;I've contributed to Sprache by adding a &lt;a href="https://ianwold.silvrback.com/parsing-comments-with-sprache"&gt;comment parser&lt;/a&gt;, I've published a &lt;a href="https://github.com/IanWold/SpracheJSON"&gt;JSON serializer/mapper&lt;/a&gt;, and I'm working on a &lt;a href="https://github.com/IanWold/SpracheDown"&gt;Markdown parser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've used Sprache in small amounts in a couple other projects, and I enjoy using it wherever I'm able. An idea suggested to me at an &lt;a href="http://iowacodecamp.com/"&gt;Iowa Code Camp&lt;/a&gt;, which is also awesome and free and you should all go, was to write a tool to convert BNF into Sprache. I haven't done anything with this concept yet, but that is further work that could be done - if you're feeling the Sprache bug and you want to tackle that, go right ahead!&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;I'll keep this list updated as I encounter more on the interwebs. This list should provide a good base to continue exploring the topics introduced in this tutorial.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSDN has &lt;a href="https://msdn.microsoft.com/en-us/library/bb397926.aspx"&gt;extensive documentation&lt;/a&gt; of LINQ.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Parser_combinator"&gt;Wikipedia&lt;/a&gt; provides an excellent starting point for learning more about parser-combinators&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/sprache/Sprache"&gt;Sprache GitHub&lt;/a&gt; links several examples, projects, and other tutorials.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://stackoverflow.com/unanswered/tagged/sprache"&gt;StackOverflow tag&lt;/a&gt; receives regular traffic.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <a10:updated>2016-01-22T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprachedown</guid>
      <link>https://ian.wold.guru/Posts/sprachedown.html</link>
      <title>SpracheDown</title>
      <description>&lt;p&gt;About a year and a half ago I attended one of the &lt;a href="http://www.twincitiescodecamp.com"&gt;Twin Cities Code Camps&lt;/a&gt;, and there I was shown a nifty library called Sprache. Sprache is, by no means, a novel invention. It's a monadic parser combinator based on years of programming done with similar libraries popular in functional languages. I say it's nifty because it seems to be the cleanest monadic parser combinator made in C#. It's also got a large enough following that keeps it up-to-date well enough, and it's what I was taught at the code camp.&lt;/p&gt;
&lt;p&gt;Half a year after that, almost a full year ago now, I attended my first &lt;a href="http://www.iowacodecamp.com"&gt;Iowa Code Camp&lt;/a&gt;. One guy I taught about Sprache and monadic parser combinators asked if it was possible to create a markdown parser with it, and my answer was a brief &amp;quot;Well, yeah, you can totally do that.&amp;quot; I've been mulling that over for about a year now, and I decided to look for a Markdown parser implemented with a monadic parser combinator to see what it would look like.&lt;/p&gt;
&lt;p&gt;I found an excellent &lt;a href="http://www.greghendershott.com/2013/11/markdown-parser-redesign.html"&gt;article&lt;/a&gt; by Greg Hendershott who implemented a MarkDown parser with a variation of Parsec for Racket. I browsed through his &lt;a href="https://github.com/greghendershott/markdown"&gt;parser&lt;/a&gt; on GitHub, and to my alarm it seemed that the parser itself was 1,000 lines long (I could be misreading that, I've no prior experience with Racket, but I'm assuming &amp;quot;parse.rkt&amp;quot; contains the parser). This compelled me to attempt such a parser with Sprache. If nothing else, it would be an interesting comparison.&lt;/p&gt;
&lt;p&gt;So I began writing this parser in steps, gradually adding features to it. I started out with headers, then lists, then paragraphs, and so forth. As I was writing this parser, I deliberately omitted features from MarkDown, notably reference-style links and inline HTML. I think if you can parse the majority of MarkDown the little bits could be implemented with equal ease, so I don't believe this invalidates the parser. I may go on and add inline HTML (Sprache ships with an XML parser example), but so long as this is a neat little pet project, I don't think I'll go too far beyond that.&lt;/p&gt;
&lt;p&gt;At first, I parsed the MarkDown text directly into strings representing the HTML output. This was efficient, but of course it wouldn't do for any parser - the user needs to be able to manipulate the output. To save time, I borrowed the syntax tree that Sprache's XML example comes with. I adapted and modified the objects with a couple methods to bend them to my will, so to speak, and from there it only took a minute to plug them into my parser.&lt;/p&gt;
&lt;p&gt;One problem that Mr. Hendershott faced was parsing MarkDown's nested list feature (this is achieved by inserting spaces before the asterisk in MarkDown). I don't know if this was due to the language he was using or a limitation of the parser,&lt;/p&gt;
&lt;p&gt;Now, I can't say I actually ran into any major problems when I implemented the parser. Granted, I ignored the MarkDown I didn't like so well, but as I said, I don't believe that invalidates the parser. In fact, my success with this parser speaks to the beauty inherent in parser combinators, specifically Sprache in this case. Over the past two days, I've spent a total of six hours working on this, and it's already relatively well-polished. The code is clear and readable, thoroughly commented, and the syntax tree is easily scalable. In addition, my parser is significantly smaller than Mr. Hendershott's parser (perhaps an advantage of Sprache in C# over Parsack in Racket?), and I don't believe I could top 1000 lines in the parser alone if I were to bring the parser up to speed with all of MarkDown's features.&lt;/p&gt;
&lt;p&gt;As I've been saying, I wrote this as a proof of concept, and I don't really intend for it to go anywhere, but if you think this is the coolest thing ever and you want it to be something, you're more than welcome to submit pull requests, or you can fork it and do your own thing with it. I believe I've documented everything thoroughly, so it should be easy to find your way around, but if I've missed something don't wait to contact me. Have fun!&lt;/p&gt;
&lt;p&gt;You can find SpracheDown on GitHub right &lt;a href="https://github.com/IanWold/SpracheDown"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <a10:updated>2014-09-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprachejson</guid>
      <link>https://ian.wold.guru/Posts/sprachejson.html</link>
      <title>SpracheJSON</title>
      <description>&lt;p&gt;I've been meaning to write about this for a while now, but college got in the way of that. I wrote a deal I called SpracheJSON to parse JSON text into C# objects with Sprache, and it's kinda neat. I also played with the GitHub pages feature on this project, but that's not really interesting.&lt;/p&gt;
&lt;p&gt;I got this thing to the point where is parses the JSON just fine, no problem. But I also figured it made sense to serialize between JSON and C# objects. Like the other parsers I've written have ended up, it's got its own AST to throw the JSON into, but I can't imagine I'd ever want to use generic objects to store my data (isn't that the whole point of JSON?) That said, I've never been a fan of ISerializable, so I've got my own custom serializer thing going on. Obviously that makes it kinda imperfect, but that's how the world goes, I suppose.&lt;/p&gt;
&lt;p&gt;In the future I'm going to use ISerializable to make that part of the project go easier, but until then, I've got a nice half-baked parser here. I'm not going to detail the functionality of the library too much, but it's pretty slick, so you should definitely go check it out &lt;a href="https://github.com/IanWold/SpracheJSON"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <a10:updated>2015-04-10T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprache_comments</guid>
      <link>https://ian.wold.guru/Posts/sprache_comments.html</link>
      <title>Parsing Comments with Sprache</title>
      <description>&lt;p&gt;I recently made a comment parser for the Sprache framework, and I wanted to give a basic run-down on how it works.&lt;/p&gt;
&lt;p&gt;The CommentParser class gives you the option to define the header styles for comments, and it can parse both single- and multi-line comments. It's rather basic as of right now, but that's (hopefully) subject to change in the future.&lt;/p&gt;
&lt;p&gt;Using CommentParser is pretty simple, but it's a tad different from the rest of the flow of Sprache as a combinator library. You'll need to make an instance of the CommentParser class, using the comment headers and (optional) newline character you require as arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static CommentParser comments = new CommentParser(&amp;quot;//&amp;quot;, &amp;quot;/*&amp;quot;, &amp;quot;*/&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, CommentParser gives you a couple parsers you can use to parse single- and multi-line comments:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static Parser&amp;lt;string&amp;gt; myParser = Parse.String(&amp;quot;foobar&amp;quot;).Text().Or(comments.AnyComment);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CommentParser.AnyComment will parse either single- or multi-line comments for you, while CommentParser.SingleLineComment and CommentParser.MultiLineComment will parse those individually.&lt;/p&gt;
&lt;p&gt;A real, working example using the CommentParser class can be found in Sprache's &lt;a href="https://github.com/sprache/Sprache/tree/master/src/XmlExample"&gt;XMLParser&lt;/a&gt; example.&lt;/p&gt;
&lt;p&gt;In the future, it would be awesome if multiple comment headers could be included, and if whitespace could be defined to include comments. Some work towards this effort has been done on my GitHub &lt;a href="https://github.com/IanWold/Sprache/blob/Comments/src/Sprache/CommentParser.cs"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <a10:updated>2015-02-06T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">write_your_own_rdbms_versioned_migration_boilerplate</guid>
      <link>https://ian.wold.guru/Posts/write_your_own_rdbms_versioned_migration_boilerplate.html</link>
      <title>Write Your Own RDBMS Versioned Migration Boilerplate</title>
      <description>&lt;p&gt;If you're using a relational database, even perhaps for a small personal project, you've almost certainly had to have a serious think about migrations. Some databases require very heavily-engineered migration systems to be able to handle large, complex, and/or frequently-changing data. Other databases are very small and might do just fine with a single migrations file, or maybe even manual migrations computed off a shared schema script, if updates are few and far between.&lt;/p&gt;
&lt;p&gt;There's many different migration strategies, and there's no one-size-fits-all approach - different databases and applications can require vastly different strategies. One of the best and most ubiquitous strategies is the versioned migration, where individual updates are stored in SQL scripts that have an incremental version. I like a setup where, on startup, my application consults a migration history table in my database to see what the latest migration is, and to run any new migration scripts in sequential order.&lt;/p&gt;
&lt;p&gt;In my experience this setup works very well, and it can scale to a large size of project, database, or team. I start almost all of my projects - big or small, personal or professional - with this strategy, and I think you should consider making this strategy (or some variation of it) your default as well.&lt;/p&gt;
&lt;p&gt;One holdup though - isn't that a lot of overhead for a small, personal project? Should I really be investing the time to set up &lt;a href="https://flywaydb.org/"&gt;Flyway&lt;/a&gt; for every little API I want to set up? I contend no and no. I keep a snippet of boilerplate code to handle these migrations that I copy for every new project. It's a small amount of code, and I can modify it as needed per-project if it requires anything special. Best of all, my entire database from the start is migration-versioned, making it easy in future to switch to another system or onto Flyway if needed.&lt;/p&gt;
&lt;h1&gt;Versioned Migrations&lt;/h1&gt;
&lt;p&gt;As I described, this strategy involves breaking your migrations down into individual scripts for each discrete migration, and assigning them a version. What belongs in an individual file is up to you. You can restrict each file to only containing a single update on a table or column, or you could say that each feature card should have a single migration script. I prefer an in-between where each script contains a logically coupled, discrete set of changes, such that the database is valid at any migration version.&lt;/p&gt;
&lt;p&gt;However you split these up, you might have several migration scripts:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/ Migrations
  |- 01_CreateUsersTable.sql
  |- 02_CreateItemsTable.sql
  |- 03_CreateListsTable.sql
  |- 04_AddListIdToItemsTable.sql
  |- 05_AddUserIdToListsTable.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need some way to assign a version to each script. I prefer adding the version to each file name (as Flyway does, if I recall correctly) so that it's easy to see, and is aligned by version in my file system. If you prefer otherwise, you could maintain a separate map in your code or a config file from a file name to a version number, or no doubt any number of other strategies.&lt;/p&gt;
&lt;p&gt;The other aspect of this migrations strategy is that we will need to maintain a table containing the migration history of the database. I prefer a simple table myself:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;CREATE TABLE migration_history(
    &amp;quot;version&amp;quot; bigint primary key,
    &amp;quot;migrated&amp;quot; timestamp default NOW()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this way, I can keep track of where each database is at and apply migrations accordingly. When my app starts up, I'll look at this table to see what the latest version is. If the app sees that there are migration files exceeding this version, then I can run those migration scripts in the order they're intended.&lt;/p&gt;
&lt;h1&gt;Run the Migrations&lt;/h1&gt;
&lt;p&gt;Our migration-running code needs to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check the latest migration version, or create the &lt;code&gt;migration_history&lt;/code&gt; table if it's a new database,&lt;/li&gt;
&lt;li&gt;Find all the migration scripts after the latest version&lt;/li&gt;
&lt;li&gt;Execute these scripts in order, updating the &lt;code&gt;migration_history&lt;/code&gt; as it goes&lt;/li&gt;
&lt;li&gt;Commit the changes (important)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll be demonstrating this with C# and PostgreSQL (via Npgsql), but this approach will work in any language with any RDBMS. The code should be straightforward enough for you to translate to whatever your case is.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class DatabaseMigrator
{
    static int GetLatestVersion(NpgsqlConnection connection, NpgsqlTransaction transaction) // TODO
    static IEnumerable&amp;lt;(int, string)&amp;gt; GetNewMigrationFiles(int latestVersion) // TODO
    static void RunMigrationFile((int version, string name) file, NpgsqlConnection connection, NpgsqlTransaction transaction) // TODO

    public static void Migrate(string connectionString)
    {
        using var connection = new NpgsqlConnection(connectionString);
        using var transaction = connection.BeginTransaction();

        var latestVersion = GetLatestVersion(connection, transaction);
        var newMigrationFiles = GetNewMigrationFiles(latestVersion);

        foreach (var file in newMigrationFiles)
        {
            RunMigrationFile(file, connection, transaction);
        }

        transaction.Commit();
        connection.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then call &lt;code&gt;DatabaseMigrator.Migrate(connectionString);&lt;/code&gt; from your startup logic, and it's all wired up! We can focus then on implementing each of the TODOs here.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetLatestVersion&lt;/code&gt; is probably the most complicated of these, because we'll want to check whether &lt;code&gt;migration_history&lt;/code&gt; exists before we try to consult it, and create it if not. Before we get started implementing that method though, we'll want to write a little boilerplate to excute some queries on the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static NpgsqlCommand GetCommand(string query, NpgsqlConnection cnonnection, NpgsqlTransaction? transaction)
{
    var command = connection.CreateCommand();

    command.Connection = connection;
    command.CommandText = query;

    if (transaction is not null)
    {
        command.Transaction = transaction;
    }

    return command;
}

static void Command(NpgsqlConnection connection, NpgsqlTransaction transaction, string query)
{
    var command = GetCommand(query, connection, transaction);
    command.ExecuteNonQuery();
}

static T Query&amp;lt;T&amp;gt;(NpgsqlConnection connection, string query)
{
    var command = GetCommand(query, connection);
    return (T)command.ExecuteScalar();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanted to implement all the logic here to check that the result actually is a &lt;code&gt;T&lt;/code&gt; and handle that in a special flow, you can do. However, this is good enough for me - this code is running in a way where it's unlikely for me to encounter an exceptional scenario but in an &lt;em&gt;exceptional&lt;/em&gt; scenario, and if this code fails I want to let it throw anyway so that my app crashes and its health endpoint responds with a failure. Your scenario may well differ though.&lt;/p&gt;
&lt;p&gt;With that, I can outline &lt;code&gt;GetLatestVersion&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static int GetLatestVersion(NpgsqlConnection connection, NpgsqlTransaction transaction)
{
    var migrationHistoryExists = Query&amp;lt;bool&amp;gt;(
        connection,
        &amp;quot;SELECT EXISTS(SELECT 1 FROM pg_tables WHERE tablename = 'migration_history')&amp;quot;
    );

    if (migrationHistoryExists)
    {
        return Query&amp;lt;int&amp;gt;(
            connection,
            &amp;quot;SELECT MAX(version) FROM migration_history&amp;quot;
        );
    }
    else
    {
        Command(connection, transaction,
            &amp;quot;&amp;quot;&amp;quot;
            DROP SCHEMA public CASCADE;
            CREATE SCHEMA public;
            GRANT ALL ON SCHEMA public TO postgres;
            GRANT ALL ON SCHEMA public TO public;
            COMMENT ON SCHEMA public IS 'standard public schema';

            CREATE TABLE migration_history(
                &amp;quot;version&amp;quot; bigint primary key,
                &amp;quot;migrated&amp;quot; timestamp default NOW()
            )
            &amp;quot;&amp;quot;&amp;quot;
        );

        return -1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given that, it's quite easy to implement &lt;code&gt;GetMigrationFiles&lt;/code&gt;. The only peculiarity of that method is that it will return a tuple containing the version and file name for each file, so that it's easy for the other code to reference. Here I'm assuming all the migrations are in the &amp;quot;/Migrations&amp;quot; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static IEnumerable&amp;lt;(int, string)&amp;gt; GetNewMigrationFiles(int latestVersion) =&amp;gt;
    new DirectoryInfo(&amp;quot;/Migrations&amp;quot;).GetFiles()
    .Where(f =&amp;gt; f.Extension == &amp;quot;.sql&amp;quot;)
    .Select(f =&amp;gt; (version: Convert.ToInt32(f.Name.Split('_')[0]), file: f.FullName))
    .Where(f =&amp;gt; f.version &amp;gt; latestVersion)
    .OrderBy(f =&amp;gt; f.version);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can probably be more concise using query syntax and defining the version with &lt;code&gt;let&lt;/code&gt; but I'll leave that as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;The only thing left then is to run these scripts and update the migration history:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static void RunMigrationFile((int version, string name) file, NpgsqlConnection connection, NpgsqlTransaction transaction)
{
    var query = &amp;quot;&amp;quot;;
    using (var reader = new StreamReader(file.name))
    {
        query = reader.ReadToEnd();
    }

    conn.Command(connection, transaction, query);
    conn.Command(connection, transaction, $&amp;quot;INSERT INTO migration_history (version) VALUES ({file.version})&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's it! With just a 100-line C# file we've got fully-versioned migrations!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You can find all the code together on &lt;a href="https://gist.github.com/IanWold/d466f0e7e983da7b09e5ecc6bf719341"&gt;this GitHub Gist&lt;/a&gt;. I copy this for every project I start, and I start each database out with versioned migrations.&lt;/p&gt;
&lt;p&gt;You don't need to start your project off with a dependency on a third party migration library, you don't need to jump through any hoops - technical or conceptual - in order to get versioned migrations, and starting out with this puts you on the most solid path from the start. In future as your project evolves, if you end up in the rare situation of needing more features in your migrations, the code is right here for you to add it! If you end up needing so many migration features that a library like Flyway makes more sense, your story for switching to Flyway will be very easy. indeed.&lt;/p&gt;
&lt;p&gt;Happy migrating!&lt;/p&gt;
</description>
      <a10:updated>2023-11-25T00:00:00Z</a10:updated>
    </item>
  </channel>
</rss>