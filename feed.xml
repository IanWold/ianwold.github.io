<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Ian Wold</title>
    <link>https://ian.wold.guru/feed.xml</link>
    <description>Ian Wold's Blog</description>
    <item>
      <guid isPermaLink="false">90_of_my_homepage_was_useless</guid>
      <link>https://ian.wold.guru/Posts/90_of_my_homepage_was_useless.html</link>
      <title>90% of my Homepage was Useless</title>
      <description>&lt;p&gt;One week ago, my homepage was around 550k uncompressed and took about as many ms to load. I thought this was light, though I'd have liked it to be faster - I just attributed this to a side-effect of hosting with GitHub pages.&lt;/p&gt;
&lt;p&gt;This weekend I discovered the &lt;a href="https://512kb.club"&gt;512kb Club&lt;/a&gt; which ranks websites by how big they are, the catch being that you need to be below 512k uncompressed. I looked at some of the sites on the high end of that list, and I felt pretty disappointed. There were sites that had much more content, some with many large images, while staying below 512k. I have an SVG and a bunch of black-and-white text.&lt;/p&gt;
&lt;p&gt;Well, I made some small optimizations and got it below the threshold, but then I caught the bug and &lt;em&gt;presto changeo&lt;/em&gt; before I knew it I had eliminated 90% of my website &lt;em&gt;and it is pixel-perfect to how it was before&lt;/em&gt;. I'm now at 62.8k, a member of the &amp;quot;green team&amp;quot; on the 512kb Club site, and equally important I reduced the load time of the site (by any time metric you like) by around 50% just with the size optimizations.&lt;/p&gt;
&lt;h1&gt;Check Your Fonts&lt;/h1&gt;
&lt;p&gt;The single most impactful thing I did was I checked my fonts. I use Google WebFonts, and their API gives you a few opportunities for improvement. First, make sure you're not loading any fonts you're not using.&lt;/p&gt;
&lt;p&gt;Then eliminate any weights you're not using. I use &lt;code&gt;Rubik&lt;/code&gt; for my text, and the homepage only uses weights 300 and 500, but I had been loading everything from 100 to 900:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Rubik:wght@100;200;300;400;500;600;700;800;900&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Rubik:wght@300;500&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;code&gt;Montserrat&lt;/code&gt; for my name at the top and nothing else, and Google provides an API for you to specify the exact text you need to load in a font. This took &lt;code&gt;Montserrat&lt;/code&gt; from 30k to 2k or so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Montserrat:wght@700&amp;amp;display=swap&amp;amp;text=IAN%20WOLD&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Optimize Your SVGs&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://svgomg.net/"&gt;SVGOMG&lt;/a&gt; is a great tool for this. The SVG at the top of my page was 64k, now it's about 8k. &lt;em&gt;That's huge!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had also previously been using &lt;a href="https://feathericons.com/"&gt;Feather Icon&lt;/a&gt;'s JS client to swap out &lt;code&gt;i&lt;/code&gt; tags for their icon SVGs. However, by directly embedding the SVGs (which is easy and maintainable because they've got a great site) I was able to eliminate 30k and several ms from my page load time.&lt;/p&gt;
&lt;h1&gt;Torchlight is Pretty Cool&lt;/h1&gt;
&lt;p&gt;I had been using &lt;a href="https://highlightjs.org/"&gt;Highlight.js&lt;/a&gt; for syntax highlighting, and it was easy enough to set up (I &lt;em&gt;highly&lt;/em&gt; recommend it if you need to get up and going fast) but I wasn't too much a fan of the highlighting for my cases, &lt;em&gt;and&lt;/em&gt; it was putting a 30k dependency on my site. Yes, I was able to take it off my homepage - no code there - but I figured I could also help my post pages out.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://torchlight.dev"&gt;Torchlight&lt;/a&gt; is absolutely awesome. They run a server with the same language servers that VSCode uses with an API that will perform syntax highlighting for your snippets. Best part is they've got a Node package that you can run on a local directory to detect any &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt; blocks in your HTML, post the code to their server, and swap out your code blocks with their highlighted blocks. It's free for non-revenue-generating sites, works like charm in the build step, and generates the best syntax highlighting with the most features.&lt;/p&gt;
&lt;h1&gt;Maybe Minify Your Pages&lt;/h1&gt;
&lt;p&gt;I only saved a few kb doing this. What's most important I think is to consider bundling assets that can be bundled to save on the chore of loading them from a server. If your files are sufficiently small (as they tend to be on a statically-generated site) you're not going to save too much by minifying. However, if it's easy to add, then go for it.&lt;/p&gt;
&lt;h1&gt;Next Optimizations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;The SVG at the top of the page still doesn't turn white in dark mode&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 06 Dec 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-12-06T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">adding_a_database_to_our_railway_app</guid>
      <link>https://ian.wold.guru/Posts/adding_a_database_to_our_railway_app.html</link>
      <title>Adding a Database to our Railway App</title>
      <description>&lt;p&gt;&lt;a href="https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html"&gt;Last time I looked at Railway&lt;/a&gt;, I got it up and running with a Blazor WASM app. Now, I'll look at adding a PostgreSQL database to it. As with the app I got working, Railway's interface will make it incredibly simple to provision the database, and we'll need to do minimal work to get the connection info to our app.&lt;/p&gt;
&lt;h1&gt;Provisioning the Database&lt;/h1&gt;
&lt;p&gt;From the Railway dashboard, you can click into your project, and there should be a New button at the top (as in a buttno that says &amp;quot;New&amp;quot;, not a button whose appearance would not heretofore be expected):&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This brings up the familiar dialog to provision resources, from which we'll select Database:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new-project.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And then I'm going to choose PostgreSQL here. Note that if Railway doesn't have an option here for the database you want, you can always create a plain Docker image from an image of your preferred database.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-new-database.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And look at that, it deploys a new PostgreSQL database! This is one of the things I love about Railway - their interface to set up resources has eliminated &lt;em&gt;all&lt;/em&gt; of the steps to setup that aren't 100% necessary, and the default settings they choose are logical and easily overwritten later if we need.&lt;/p&gt;
&lt;p&gt;Notice also the attached &lt;code&gt;pgdata&lt;/code&gt; volume. As discussed before, Railway just stores all of your resources in Docker images. This doesn't require that you create a &lt;code&gt;dockerfile&lt;/code&gt; for each of your projects and resources, they can do that for you if you don't want to. It is to say that they give you all the tools you might want to use to be able to manage your resources as docker containers and volumes, so you can more or less choose the level of control you need over your resources.&lt;/p&gt;
&lt;p&gt;The way I use Railway, I let it manage all my resources for me, and I don't bog myself down in the weeds of Docker as much. I've got plenty of time in my day job to get frustrated with Docker!&lt;/p&gt;
&lt;h1&gt;Connecting to our Database&lt;/h1&gt;
&lt;p&gt;If you click on your new database resource and then the &lt;code&gt;Variables&lt;/code&gt; tab, you should see a bunch of variables:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-variables.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This contains all the information that our app will need to connect to it. Railway allows the resources within a project to reference each others' variables, so we just need to know which ones to reference to build a connection string.&lt;/p&gt;
&lt;p&gt;Now, they've all got incredibly obvious names so you can certainly accomplish this by guessing in as much time as it takes you to read this article, but for thoroughness' sake I've got a connection string here:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;User Id=${{Postgres.PGUSER}};Password=${{Postgres.PGPASSWORD}};Host=${{Postgres.PGHOST}};Port=${{Postgres.PGPORT}};Database=${{Postgres.PGDATABASE}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you copy that as the value of a new variable in your application, it will fill in each of the references with the values from your database's variables, and that should be a sufficient connectino string to test that it works:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/railway-database-connection-string.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Note that I'm using the variable name &lt;code&gt;ConnectionStrings__Database&lt;/code&gt;, with two underscores, which behaves as though I'm inserting the following into my &lt;code&gt;appsettings&lt;/code&gt; (in a .NET context):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;Database&amp;quot;: &amp;quot;...&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's all the configuration needed for your app to be able to consume your new database!&lt;/p&gt;
</description>
      <pubDate>Wed, 08 Nov 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-11-08T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">a_scrum_odyssey</guid>
      <link>https://ian.wold.guru/Posts/a_scrum_odyssey.html</link>
      <title>A Scrum Odyssey</title>
      <description>&lt;p&gt;I had an unexpected and not entirely unpleasant experience in a recent retrospective meeting: all of the engineers on the team moved to stop having daily standup meetings altogether. Although I'm no stranger to working without standup meetings, and in many ways I prefer that way of working, I don't think it's unreasonable to suggest that the majority of engineers are fine with well-structured daily standups.&lt;/p&gt;
&lt;p&gt;Even with a team that enjoys standup meetings however, there's value in breaking the norm, becoming more flexible, and trying things out. Maybe such a team would settle back into daily standups, maybe they'd find something else that works for them. Teams which don't enjoy their standups though will almost certaily settle on a new scheme.&lt;/p&gt;
&lt;p&gt;I sat down to type out a guide on how and why a team might experiment with alternative approaches to the daily standup. But that came out so incredibly dry I weaved those points into a story demonstrating a hypothetical team undergoing that process. That resulted in something which I'm not entirely sure got the point across. But then I remembered that ChatGPT (insert eye roll here) is actually pretty good at generating Shakespearean sonnets (insert double eye roll here). So, I ran my story through the ringer and I present to you &lt;strong&gt;A Scrum Odyssey: A journey away from daily scrum meetings, as a cycle of eight Shakespearean sonnets&lt;/strong&gt;:&lt;/p&gt;
&lt;h1&gt;The Rite of Dawn's Assembly&lt;/h1&gt;
&lt;p&gt;In days of yore, where standups held their sway,&lt;br /&gt;
Religious teams to this rite did cling tight.&lt;br /&gt;
Believing in its might, they'd all display&lt;br /&gt;
Their tasks and toils, at morning's first light.&lt;/p&gt;
&lt;p&gt;“'Tis the only path!” they’d loudly decree,&lt;br /&gt;
To boost our voice and our work's potency.&lt;br /&gt;
Yet, in this sea of daily scrutiny,&lt;br /&gt;
Did they e'er question its necessity?&lt;/p&gt;
&lt;p&gt;For in their hearts, joy and productivity,&lt;br /&gt;
Seemed hand in hand with scrum's consistency.&lt;br /&gt;
But having not trod another pathway,&lt;br /&gt;
How sure were they, in their daily ballet?&lt;/p&gt;
&lt;p&gt;To question not is to be but a drone,&lt;br /&gt;
Yet change may show more ways than they've known.&lt;/p&gt;
&lt;h1&gt;Whispers 'Midst the Court of Teams&lt;/h1&gt;
&lt;p&gt;As time doth pass, objections loud do cry,&lt;br /&gt;
Standups draw long, and patience wears so thin.&lt;br /&gt;
Some feel the gaze of oversight too nigh,&lt;br /&gt;
Whilst others sigh at tales they're lost within.&lt;/p&gt;
&lt;p&gt;The daily rite, once held in high esteem,&lt;br /&gt;
Now burdens hearts, and feels not quite so lean.&lt;br /&gt;
&amp;quot;Maintain the stand!&amp;quot; the managers exclaim,&lt;br /&gt;
&amp;quot;For knowledge's spread, 'tis the only regime.&amp;quot;&lt;/p&gt;
&lt;p&gt;Another quips, &amp;quot;'Tis how we stay aligned!&amp;quot;&lt;br /&gt;
Yet in their hearts, a restlessness they find.&lt;br /&gt;
The status quo, now feels a heavy chain,&lt;br /&gt;
With every voice, there grows a silent pain.&lt;/p&gt;
&lt;p&gt;Unease doth spread, as waters dark and deep,&lt;br /&gt;
The team in hope, for change they might yet reap.&lt;/p&gt;
&lt;h1&gt;Into Uncharted Councils Steered&lt;/h1&gt;
&lt;p&gt;In growing dissent, the teams make their stand,&lt;br /&gt;
To question the rites of daily discourse.&lt;br /&gt;
With keen eyes they search, across the vast land,&lt;br /&gt;
For new methods, their spirit to endorse.&lt;/p&gt;
&lt;p&gt;The captains do doubt, and their concerns voice,&lt;br /&gt;
Yet vibrant ideas do from teams arise.&lt;br /&gt;
&amp;quot;Demos!&amp;quot; cries one, &amp;quot;Let our works make their noise!&amp;quot;,&lt;br /&gt;
Another suggests, one-on-one 'neath the skies.&lt;/p&gt;
&lt;p&gt;Pair programming, reviews, new tactics bloom,&lt;br /&gt;
As weary traditions begin to wane.&lt;br /&gt;
The tides of change, they sweep away the gloom,&lt;br /&gt;
Old ways dissolve, as new paths become plain.&lt;/p&gt;
&lt;p&gt;Thus in the dance of time and adaptability,&lt;br /&gt;
Teams find their stride, and new possibility.&lt;/p&gt;
&lt;h1&gt;Quests in the Halls of Converse&lt;/h1&gt;
&lt;p&gt;In search of ways, the teams diverge their path,&lt;br /&gt;
Asynchronous rites, emails that they pen,&lt;br /&gt;
Fewer meets they seek, to avoid the wrath,&lt;br /&gt;
Of daily drudgery, again and again.&lt;/p&gt;
&lt;p&gt;More intimate chats, one-on-one they hold,&lt;br /&gt;
In pair programming, they sharpen their skill.&lt;br /&gt;
Exploring each method, both new and old,&lt;br /&gt;
They weigh every boon, every bitter pill.&lt;/p&gt;
&lt;p&gt;Managers, once stern, now their gaze doth shift,&lt;br /&gt;
Witnessing changes, benefits unfold.&lt;br /&gt;
Yielding their ground, as sands of time do sift,&lt;br /&gt;
Embracing the new, releasing the old.&lt;/p&gt;
&lt;p&gt;In the grand ballet of work's ebb and flow,&lt;br /&gt;
Teams evolve, and brighter futures they sow.&lt;/p&gt;
&lt;h1&gt;Where Two Worlds in Concert Meet&lt;/h1&gt;
&lt;p&gt;From all the trials, some choices do emerge,&lt;br /&gt;
Asynchronous standups, the globe's teams cheer.&lt;br /&gt;
For visual minds, digital boards surge,&lt;br /&gt;
As preferred tools, their thoughts to make clear.&lt;/p&gt;
&lt;p&gt;Meetings grow few, much to all's delight,&lt;br /&gt;
Those that remain, are purposeful and keen.&lt;br /&gt;
Gone are the days of endless oversight,&lt;br /&gt;
In place, moments of value are seen.&lt;/p&gt;
&lt;p&gt;&amp;quot;Support!&amp;quot; cry the captains, in newfound glee,&lt;br /&gt;
Feeling the strength of their teams' tethered core.&lt;br /&gt;
From the throes of old, they now are set free,&lt;br /&gt;
Bonded and strong, as never before.&lt;/p&gt;
&lt;p&gt;From trials and tests, the best paths are clear,&lt;br /&gt;
Teams and their leaders, in harmony steer.&lt;/p&gt;
&lt;h1&gt;Musing on Fortune's Fickle Hand&lt;/h1&gt;
&lt;p&gt;With shifts in tide, come trials unforeseen,&lt;br /&gt;
Some souls do long for morning meetings past.&lt;br /&gt;
An anchor lost, in routines once serene,&lt;br /&gt;
Others claim that commitment's not so vast.&lt;/p&gt;
&lt;p&gt;Managers note, their gaze oft on boards dwell,&lt;br /&gt;
More than before, in this changed paradigm.&lt;br /&gt;
For in each change, some benefits dispel,&lt;br /&gt;
Replaced by costs, in this evolving time.&lt;/p&gt;
&lt;p&gt;&amp;quot;No method’s perfect,&amp;quot; the team concedes true,&lt;br /&gt;
Every path has its toll, its weight to bear.&lt;br /&gt;
But in pursuit of what’s best, they pursue,&lt;br /&gt;
Balancing gains, with costs they must wear.&lt;/p&gt;
&lt;p&gt;In life’s grand dance of loss and of gain,&lt;br /&gt;
Teams learn to thrive, through pleasure and pain.&lt;/p&gt;
&lt;h1&gt;Melding Yesteryears with the Morrow&lt;/h1&gt;
&lt;p&gt;From experiments vast, wisdom teams glean,&lt;br /&gt;
Blending the best from methods they've tried.&lt;br /&gt;
A hybrid emerges, both fresh and seen,&lt;br /&gt;
Balancing old and new, side by side.&lt;/p&gt;
&lt;p&gt;Asynchronous notes, for days in-between,&lt;br /&gt;
With face-to-face meets, weekly they decide.&lt;br /&gt;
Though returning to paths once before seen,&lt;br /&gt;
They come renewed, with broader stride.&lt;/p&gt;
&lt;p&gt;Most vital of all, in this new phase,&lt;br /&gt;
Teams claim their process, its reins they hold.&lt;br /&gt;
Each member engaged, in collective praise,&lt;br /&gt;
For a system by them, shaped and molded.&lt;/p&gt;
&lt;p&gt;From trials diverse, a way they have found,&lt;br /&gt;
Where every voice in harmony does sound.&lt;/p&gt;
&lt;h1&gt;Ascendance Beyond Time's Norms&lt;/h1&gt;
&lt;p&gt;In newfound grace, the teams now flex and bend,&lt;br /&gt;
Having learnt the worth of norms held askew.&lt;br /&gt;
Witnessed have they, to what change can tend,&lt;br /&gt;
The boon of steps, both retraced and anew.&lt;/p&gt;
&lt;p&gt;The culture's hue, to feedback does incline,&lt;br /&gt;
Embracing shifts, with open arms and heart.&lt;br /&gt;
Where once was rigidity, now they entwine&lt;br /&gt;
Flexibility, as their foremost art.&lt;/p&gt;
&lt;p&gt;Managers see, that control's grip too tight,&lt;br /&gt;
Does not always lead to the best of ways.&lt;br /&gt;
Productivity, in this newfound light,&lt;br /&gt;
Reaches peaks unseen, to everyone's praise.&lt;/p&gt;
&lt;p&gt;From challenging norms, to heights unforeseen,&lt;br /&gt;
They've journeyed forth, with purpose evergreen.&lt;/p&gt;
</description>
      <pubDate>Fri, 20 Oct 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-10-20T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club-2-2024</guid>
      <link>https://ian.wold.guru/Posts/book_club-2-2024.html</link>
      <title>Book Club 2/2024: Recovering from TDD and Unit Tests</title>
      <description>&lt;p&gt;I'm on the record as having labeled myself a &lt;a href="https://ian.wold.guru/Posts/four_deeply_ingrained_csharp_cliches.html#unit-tests"&gt;unit test hater&lt;/a&gt;. This is perhaps a bit extreme taken at face value; I like to advocate for approaches which consider the pros and cons of all solutions, and matching the right solutions to the problems they best solve. More often than not, unit tests are not the right solution; largely I find they corrupt our codebases, encouraging us to twist our architectures and use poor engineering practices. To be sure though, there's instances that unit testing is appropriate.&lt;/p&gt;
&lt;p&gt;But what kind of &amp;quot;unit testing&amp;quot; is good anyway? Forgive my diversion into definitions here, but this is important: are we talking about the same thing? One engineer might take &amp;quot;unit testing&amp;quot; to mean any form of testing where I'm only testing a single function or method, while another might take the same term to mean the specific practice of abusing mocks to white box test the various code paths of each method containing business logic. Can you see my bias? The former is quite agreeable, the latter is the source of much consternation. Insofar as the latter definition is a subset of the first, then I might say that I prefer the difference of the two.&lt;/p&gt;
&lt;p&gt;Given the general kind of unit testing which is good then, we can perhaps more specifically define the proper sort. A coupling of the test itself to the implementation of the code it tests should, in all but extreme cases, be off the table. Further, &lt;a href="https://en.wikipedia.org/wiki/Data-driven_testing"&gt;example testing&lt;/a&gt; whereby we match outputs to known inputs leads to fragile tests, missed cases, and generally avoids addressing the purpose of the method in question; the proper sort of unit tests test the relationship between the input and output, not the specific cases. Given these two properties of proper unit tests, I could specifically cite forms of parameter-based testing such as &lt;a href="https://en.wikipedia.org/wiki/Property_testing"&gt;property testing&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Fuzzing"&gt;fuzz testing&lt;/a&gt; as being ideals. Some others on the edge can be interesting too: &lt;a href="https://en.wikipedia.org/wiki/Mutation_testing"&gt;mutation testing&lt;/a&gt; and contract tests both have their uses but should be strictly used within the confines of our testing rules.&lt;/p&gt;
&lt;p&gt;Now, let me be quite clear here: drawing a line in the sand saying a unit test can't be coupled to the implementation it tests means we can't use mocks or fakes to instantiate a class to test its methods. Indeed, these testing methods are probably only proper for &amp;quot;pure&amp;quot; functions. I think this derivation is a sign I'm on the right path here; I take that indication from two more fundamental principles I hold. First, our testing is in place to test the behavior of our system, not to double or triple our implementation. Second, maximizing the amount of logic in &amp;quot;pure&amp;quot; functions is good. Perhaps you disagree with me on these; that may well lead you to a very different conclusion.&lt;/p&gt;
&lt;p&gt;Understanding why we are testing - what specifically we want to gain with the tests - is perhaps the most important thing we need to sort out. As I stated, I'm interested in automated tests which verify that the system I've built satisfies the requirements it was given. Realistically, this should mean a full decoupling between the suite of tests and the code it tests. Here's the catch then: if I'm testing individual methods, I don't have total decoupling. I couldn't (or it would be quite difficult to) write my tests in one language and the system itself in another language, for a more extreme example. This is where I come in with functional testing strategies like integration tests - not that I'd necessarily want to use separate languages, but I want to achieve that sort of decoupling.&lt;/p&gt;
&lt;p&gt;This doesn't work in all cases. Can I test a mathematics class library with integration tests? Almost certainly not; testing for an example like that belongs to the domain of parameterized testing and the like. A microservice API though? I'm not sure that there's a lot here for which integration tests aren't the best and obvious choice. At least insofar as I want to test the business requirements of my system, integration tests are ideal for most of our CRUD systems. These are the tests that best let me define the constraints of the system, and that guarantee that it conforms.&lt;/p&gt;
&lt;p&gt;This brings me to the topic of BDD and TDD. You might guess that I dislike TDD, and you'd be right. Well, a bit. I dislike the idea that TDD should be prescribed. If you want to write unit tests coupled to the implementation before you write that implementation, you do you. Throw those away before you commit your changes, but bring whatever tools to the table make you the most effective engineer you can be. BDD - Behavior-Driven Development - on the other hand is something I can get behind. By my reading, BDD is just giving a name to the way I'd want to develop software anyway: that everyone developing the system should be aligned on how it's supposed to behave &lt;em&gt;before&lt;/em&gt; we implement it.&lt;/p&gt;
&lt;p&gt;It's on this subject - TDD and BDD - that I focused most of my research this month. As I outlined, it seems to me that most issues we have with our automated testing strategies is that we seem to have a tendency to stray from the fundamentals here. Before even considering automated tests, are we aware of all of the testing strategies and patterns, and the scenarios in which each works the best? Have we fully thought through &lt;em&gt;why&lt;/em&gt; we need tests and &lt;em&gt;what they provide&lt;/em&gt;, not just in general but for the specific codebase we want to test? As with any other coding tasks, we first need to approach testing from the right orientation before we can start engineering. BDD and TDD are overarching process ideas which seek to orient our approaches to testing, so I think that these and other processes are the interesting thing to consider when studying testing strategies.&lt;/p&gt;
&lt;p&gt;Finally, I feel I should touch on &lt;em&gt;code coverage&lt;/em&gt;. If my goals for my automated tests are to ensure that it meets all of its requirements, then it seems to me that I'd want some kind of metric of &amp;quot;requirements coverage&amp;quot; or the like. If my code is meeting all of its requirements - that this is genuinely a big if - then I don't really care about code coverage, do I? Take an API for example - if I have integration tests set up which cover 100% of my business cases - both happy and sad path - then code coverage is just a metric of how much code I have in my codebase that isn't getting hit. It seems to me that the utility of code coverage is not as a primary indicator of the quality of my software, but rather an incidental heuristic which I could choose to use from time to time to help refactor bits of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EZ05e7EMOLM"&gt;TDD, Where Did It All Go Wrong - Ian Cooper (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=IN9lftH0cJc"&gt;TDD Revisited - Ian Cooper (2023)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-022ONzvQlk"&gt;TDD, BDD &amp;amp; ATDD - Allen Holub (2014)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=IYzDFHx6QPY"&gt;The lazy programmer's guide to writing thousands of tests - Scott Wlaschin (2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yuEbZYKgZas"&gt;Test Driven Development: That’s Not What We Meant • Steve Freeman (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gXh0iUt4TXA"&gt;An Ultimate Guide to BDD - Dave Farley (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=o-HTsJ1-wdI"&gt;STREAM VOD: ThePrimeagen vs Theo - Dev Debates on the FIRST DevHour Podcast (2022)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Writing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tyrrrz.me/blog/unit-testing-is-overrated"&gt;Unit Testing is Overrated - Oleksii Holub (2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://debugagent.com/why-i-dont-do-tdd"&gt;Why I Don't Do TDD - Shai Almog (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dhh.dk/2014/test-induced-design-damage.html"&gt;Test-Induced Design Damage - David Heinemeier Hansson (2014)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/TestCoverage.html"&gt;Test Coverage - Martin Fowler (2012)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two posts are referenced (and elaborated on) by a series of conversations by Kent Beck, David Heinemeier Hansson, and Martin Fowler: &lt;a href="https://martinfowler.com/articles/is-tdd-dead/"&gt;Is TDD Dead?&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 24 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-24T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_1-2024</guid>
      <link>https://ian.wold.guru/Posts/book_club_1-2024.html</link>
      <title>Book Club 1/2024: What is a Software Architect?</title>
      <description>&lt;p&gt;This question - what is a software architect? - is a bit of an expansive one; I wouldn't think that I could ever answer it thoroughly, much less succinctly in a few article links. I do however think it's worth some time considering some of the different perspectives we encounter. I'd venture that a poll of 10 software architects would yield 11 answers to this question.&lt;/p&gt;
&lt;p&gt;Is software architecture decidedly different from software engineering? The analogy with which these titles are made - that of architects, engineers, and builders collaborating over the construction of a building - would seem to suggest so. However, a software project is decidedly different (in almost every single aspect) from a construction project. This is my opinion, but I would put it to you that while &amp;quot;software architecture&amp;quot; is probably a definable thing, a software architect is not really so different from an engineer. Indeed, I would also assert that a proper software engineer must be engaging with and actively doing software architecture as a part of their job.&lt;/p&gt;
&lt;p&gt;Should a software architect be doing anything different from an engineer? Well, perhaps not on the surface. I'd expect that an architect would be writing code about as much as someone with an engineer title, and I'd expect that an engineer would be as engaged with diagrams and ephemeral conversations about the nature of software as someone with an architect title. The separate titles then are probably most useful as a way to distinguish the primary focus that one has within a software team, and an architect would be working differently from an engineer insofar as the architecture would be their primary focus, or area of responsibility.&lt;/p&gt;
&lt;p&gt;So is it useful then to separate ourselves out with titles of &amp;quot;engineer&amp;quot; and &amp;quot;architect&amp;quot;? There are advantages to having the separate architecture title though: to motivate the team to keep architecture as a primary consideration, to be a figure of wisdom or authority with respect to the architecture, or to be the &amp;quot;point person&amp;quot; to communicate architectural concerns to other teams or other departments within a company. Perhaps it's not a useful title to have, but a separate role or &amp;quot;hat&amp;quot; which a member of a software team wears; in fact this was the way I was introduced to the concept of architecture.&lt;/p&gt;
&lt;p&gt;Having both had the title of &amp;quot;architect&amp;quot; and having been an engineer at firms which had this title, I can see its utility. To caution though: just as every piece of software, every product, and every team is different - sometimes radically different - so too are the roles of those we call architects. This is perhaps why there are so many different ideas of what architecture is, and what a proper software architect ought be. Perhaps there can't be a single, specific definition to encapsulate the idea, as the types of architecture and architectural concerns are necessarily so varied between software efforts, domains, and technologies?&lt;/p&gt;
&lt;p&gt;To try to pin some universals down, I think I could say a few definitive things about architects. Architects should be coding, and actively involved in the engineering process. Architects should primarily focus on assisting all of the members of a development team - helping to ensure alignment and stimulating everyone to think architecturally. Architects shouldn't be dictators or cudgels which make demands - a somewhat common perception which is unfortunately sometimes earned. Architects should strive to be the most approachable and collaborative members of a team.&lt;/p&gt;
&lt;p&gt;While architects should be very technically knowledgeable, I don't know that they should have all the answers when it comes to architecture itself - curiously, I think the best architects are ones which are very creative and can help brainstorm architectural ideas, the idea being that they act as an enabler of a team to define a good architecture, rather than dictating an architecture from the start. In a difficult twist, this does mean that sometimes the architect will need to furnish a specific recommendation upon request, for example for a team in a tight bind which requires a quick resolution to a difficult problem.&lt;/p&gt;
&lt;p&gt;I can hear a colleague of mine saying now: &amp;quot;This answer is so nonspecific as to be only slightly more helpful than a software architect theirself!&amp;quot;; unkind but not unfounded. I put it to you though that the composition of any software team is a jigsaw puzzle balancing who can do what with which areas of expertise are required of the technology and domain, and from team to team the jigsaw piece labeled &amp;quot;architect&amp;quot; will be a very different shape and in a very different place in the overall puzzle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=v_nhv6aY1Kg"&gt;How to Become a Great Software Architect - Eberhard Wolff (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=asoVNjGoFOM"&gt;How we do Architecture at Okta - Monica Bajaj and Mark Voelker (2023)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nchRmYvUf2Y&amp;amp;list=PLEx5khR4g7PJELLTYwXZHcimWAwTUaWGA"&gt;Democratizing Software Architecture - Eoin Woods (2023)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=mCM6QVHD08c"&gt;How to &amp;quot;think&amp;quot; (and design) like a Software Architect - Ron Kleinman (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6j-PyJ1tFn8"&gt;How I became a software architect... (or not) - CodeOpinion (2023)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was recently recommended Mark Richard's series &amp;quot;Software Architecture Monday&amp;quot;, which is a part of &lt;a href="https://developertoarchitect.com/"&gt;his site dedicated to &lt;em&gt;developing&lt;/em&gt; more architects&lt;/a&gt;. This series is well-thought-out, and contain a few excellent articles/videos which contain insights directly related to this topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developertoarchitect.com/lessons/lesson108.html"&gt;The Role of a Software Architect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developertoarchitect.com/lessons/lesson100.html"&gt;My Architecture Journey: Lessons Learned &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developertoarchitect.com/lessons/lesson54.html"&gt;The Software Architect's Bookshelf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developertoarchitect.com/lessons/lesson30.html"&gt;Agile and Software Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 24 Jan 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-01-24T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_10-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_10-2023.html</link>
      <title>Book Club 10/2023: Functional Patterns in C#</title>
      <description>&lt;p&gt;Happy spooky season!&lt;/p&gt;
&lt;p&gt;This month I've focused on functional domain modeling and related patterns. We're just a few weeks away from the release of the next version of C#, and like each previous version it'll introduce even more functional features. We still aren't getting discriminated unions, but as C# becomes more functional, these patterns are becoming increasingly more attractive. Traditionally, C# is written in OO or procedural styles, and from my perspective there doesn't seem to be a great deal of discussion among C# engineers about incorporating functional patterns. Maybe you run in different circles, but I think there's room for improvement across the board here. Even the result monad, which can be used within an entirely OO context, is infrequently implemented.&lt;/p&gt;
&lt;p&gt;I think it's important to be discussing functional patterns in C#, for a few practical reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eventually we're getting DU, and that's going to change a lot of things&lt;/li&gt;
&lt;li&gt;Our F# colleagues are doing great work in this area, we should engage them more&lt;/li&gt;
&lt;li&gt;Using functional patterns is cool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But above all, if C# supports these patterns and they can help us write better code, &lt;em&gt;why would we neglect them&lt;/em&gt;? To explore this topic, I've curated a set of talks by Scott Wlaschin and Mark Seemann who both do a great job explaining functional programming from a conceptual perspective, demonstrating its power in F#, and ultimately demonstrating C# equivalents.&lt;/p&gt;
&lt;p&gt;I hope these talks make you all as excited for discriminated unions in C# as I am!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2JB1_e5wZmU"&gt;Domain Modeling Made Functional - Scott Wlaschin (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=srQt1NAHYC0"&gt;Functional Design Patterns - Scott Wlaschin (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WhEkBCWpDas"&gt;The Power of Composition - Scott Wlaschin (2018)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=IYzDFHx6QPY"&gt;The Lazy Programmer's Guide to Writing Thousands of Tests - Scott Wlaschin (2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=US8QG9I1XW0"&gt;Functional Architecture - The Pits of Success - Mark Seemann (2016)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=F9bznonKc64"&gt;Get Value out of Your Monad - Mark Seemann (2018)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cxs7oLGrxQ4"&gt;From Dependency Injection to Dependency Rejection - Mark Seemann (2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qBYVW4ghMi8"&gt;Dependency Injection Revisited - Mark Seemann (2018)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Fri, 27 Oct 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-10-27T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_11-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_11-2023.html</link>
      <title>Book Club 11/2023: New .NET, New C#</title>
      <description>&lt;p&gt;I'm looking forward to turkey day tomorrow gobble gobble! This year I'm thankful that I work in ecommerce so I get to have a peaceful extended weekend because nobody visits ecommerce sites on Thanksgiving weekend. At least that's what they told me in the interview before they hired me. &lt;em&gt;Insert joke about how it's better to be working in ecommerce than at OpenAI this weekend regardless...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anyway, last week we got the new release of .NET, which brings langauge and tooling updates across the board, so I want to focus on some of those fun things.&lt;/p&gt;
&lt;p&gt;First, Blazor has taken the third (or is it fourth now) of the 1,000 steps it needs to take to become a viable platform for SAAS, with hybrid client/server rendering. I don't have a lot to say there, but I use Blazor for a number of personal projects when I need to quickly draw up a UI to look into some .NET backend scenario or another.&lt;/p&gt;
&lt;p&gt;Since Microsoft started down the path of .NET Core, the whole ecosystem has been embracing OSS and free software in a way that's completely rewritten the whole modus operandi of Microsoft under Nadella. Indeed, it seems like at this point in time, you can use .NET without a single worry about vendor lock-in. Well, Microsoft is here to save you from that horrible wasteland of unrestricted freedom with &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire-simplifying-cloud-native-development-with-dotnet-8/"&gt;.NET Aspire&lt;/a&gt;. Nevermind that &lt;a href="https://www.fearofoblivion.com/build-a-modular-monolith-first"&gt;you probably don't need a distributed system&lt;/a&gt;, and even if you did &lt;a href="https://renegadeotter.com/2023/09/10/death-by-a-thousand-microservices.html"&gt;you almost certainly don't need microservices&lt;/a&gt;, they have cloud computes to sell you! Aspire makes it easy to avoid footgunning yourself as you begin your next project distributed from the start by skipping you right to the step where you blow your foot off with a bazooka - all hail the mighty Azure! Or, you know, if like 99.99% of all apps out there you'd be fine with it deployed in a Docker container with a couple of related services, &lt;a href="https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html"&gt;you could just use Railway&lt;/a&gt;. &lt;em&gt;Note that I'm definitely queuing up an article on using Aspire with Railway despite my skepticism that Aspire is a good idea.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12"&gt;C# hasn't gotten too many updates&lt;/a&gt;, but we have two syntactical updates that are essential and should have been included much earlier: collection expressions and primary constructors for classes.&lt;/p&gt;
&lt;p&gt;Collection expressions, or perhaps &amp;quot;enumerable literals&amp;quot;, should have been a part of the language from the start, and you should convert all of your code over to using these.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var list = [1, 2, 3, 4, 5];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Records have had primary constructors since they were introduced, and I think that was largely related to the desire to have tuple interop (is interop the right word here?), but now classes have them too &lt;em&gt;except quite different&lt;/em&gt;. The parameters in a primary constructor for a class are, more logically than records, private members of that class, significantly reducing the amount of boilerplate &lt;a href="https://ian.wold.guru/Posts/book_club_10-2023.html"&gt;if you're still using dependency injection&lt;/a&gt;. It's been how many years since Scala came out, but now we can be one of the cool kids on the block too! Right?&lt;/p&gt;
&lt;p&gt;Anyway, I'll just leave you with a few talks from the .NET conference with some of the other tidbits that should be used in .NET going forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BnjHArsYGLM?si=NsnqXLMKwcmirGZM"&gt;Improving your application telemetry using .NET 8 and Open Telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/FpQXyFoZ9aY?si=qhDqySjMAOrxa_9x"&gt;Tiny, fast ASP.NET Core APIs with native AOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qXsRz0YWvu4?si=p9oaPMq8h4an1Fq5"&gt;From IL Weaving to Source Generators, the Realm story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Yf8t7GqA6zA?si=WoidTSJRaUe4be-0"&gt;All About C# Source Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then a couple of talks from the lead designers of C# and F# regarding the history and direction of each language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=v8bqAm4aUFM"&gt;Where's C# Headed? - Mads Torgersen (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLKZ7ZgVido"&gt;The Functional Journey of C# - Mads Torgersen (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sC0HUq2KkFc"&gt;The F# Path to Relaxation - Don Syme (2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MXKM5dSk_8o"&gt;What's new in F# 5 &amp;amp; 6 - Don Syme (2021)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 22 Nov 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-11-22T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_12-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_12-2023.html</link>
      <title>Book Club 12/2023: Workflow, Process, and Agile</title>
      <description>&lt;p&gt;Ho ho ho merry book club day - I'm sending this one out a bit early; tomorrow I'm headed on vacation and won't be back until the new year. Preemptively thinking about the new year and resolutions, I'm thinking about changes in workflow and process. How can we develop software on our own, on our teams, and in our organizations?&lt;/p&gt;
&lt;p&gt;Several years ago a group of smart engineers drafted the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; to take a stab at figuring out the best way to develop software. I've yet to see a better summation of best practices than the &lt;a href="https://agilemanifesto.org/principles.html"&gt;12 Agile Principles&lt;/a&gt;, however they end up being kind of vague and non-clear, almost like a fortune cookie or today's horoscope.&lt;/p&gt;
&lt;p&gt;A lot of folks since have tried to come up with more concrete principles built on top of Agile. The most famous (or perhaps infamous) one is Scrum. That one is so common that today &amp;quot;Agile&amp;quot; is used interchangeably with &amp;quot;Scrum&amp;quot;. However, I challenge you to read the Agile manifesto and principles and the &lt;a href="https://scrumguides.org/scrum-guide.html"&gt;Scrum guide&lt;/a&gt; and tell me that these look like they're actually trying to do the same thing. They're not. Scrum, at it's best, is a horrible corruption of Agile to try to shoehorn a better quality of life for software engineers into big corporate environments. At it's worst Scrum is a malicious attempt to keep a whole cadre of &amp;quot;scrum masters&amp;quot;, &amp;quot;agile coaches&amp;quot;, and other similar folks employed in cushy corporate jobs.&lt;/p&gt;
&lt;p&gt;Agile, in spite of its generality, is the best starting point I know of to try to solve how to develop software, and Scrum ain't it. At the core, what I've always tried to stick to from the Agile thinking is to deliver value early and often, change the actual process itself as the team and product evolve, and eliminate any blockers to being able to do those two. While I think highest of Agile, I have several other bits and pieces in my toolbelt here. I like a lot of things about the &lt;a href="https://en.wikipedia.org/wiki/Kanban_(development)"&gt;Kanban process&lt;/a&gt;, and I &lt;a href="https://ian.wold.guru/Posts/daily_grug.html"&gt;start my day with a Grug quote&lt;/a&gt;, among other smaller bullet points I've picked up in my days.&lt;/p&gt;
&lt;p&gt;What I've taken away from my readings this month are two new tools I'm going to add to my belt: #NoEstimates and &amp;quot;hypothesis over requirements&amp;quot;, two concepts explained in the Allen Holub videos I share. Individually, either might be fine, but I think the real value of these are when used together. I doubt that these practices could just be adopted willy nilly by a regular scrum team tomorrow - these describe a way for business to work, as much as they describe a way for engineering teams to work. If all the stakeholders can be aligned on this though, and if the constraints on the project allow it, there's a potential for a huge benefit here.&lt;/p&gt;
&lt;p&gt;But what is there for those of us stuck in regular Scrum teams that might not be able to adopt these right away, or ever? I've become very interested in this question, and I think I've found a few practices that could meaningfully help any engineering team. I'm certainly going to be bringing these practices up at my day job, and in future I may write on their success.&lt;/p&gt;
&lt;p&gt;Videos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WFbvJ0dVlHk"&gt;War is Peace, Freedom is Slavery, Ignorance is Strength, Scrum is Agile - Allen Holub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QVBlnCTu9Ms"&gt;#NoEstimates - Allen Holub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sz_LgBAGYyo"&gt;How to Build Products Users Love - Kevin Hale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3YCIw3gewFE"&gt;Agile Software Architecture - Ian Cooper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EZ05e7EMOLM"&gt;TDD, Where did it all go Wrong - Ian Cooper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Articles to Ponder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@antweiss/the-true-capacity-of-your-engineering-team-38da00bd83e8"&gt;The True Capacity of Your Engineering Team - Ant Weiss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucasfcosta.com/2021/09/20/monte-carlo-forecasts.html"&gt;How to replace estimations and guesses with a Monte Carlo simulation - Lucas F Costa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Actually, read just about anything from Lucas F Costa: &lt;a href="https://lucasfcosta.com/"&gt;lucasfcosta.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.davefarley.net/?p=278"&gt;Science and Software Development - Dave Farley&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things you can do Today&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackerearth.com/community-hackathons/resources/e-books/guide-to-organize-hackathon/"&gt;The Complete Guide to Organizing a Successful Hackathon - Hackerearth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dylanpaulus.com/posts/start-with-no"&gt;Start With No - Dylan Paulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://taylor.town/friday-demos"&gt;Share Demos Every Friday - taylor.town&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bobbiechen.com/blog/2022/7/20/being-on-call-sucks"&gt;Being On-Call Sucks - Bobbie Chen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And to close out, I wrote a few articles recently that are on-topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/reclaim_your_agile.html"&gt;Reclaim Your Agile: The One Clever Trick Agile Coaches Don't Want You to Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/clean_meetings_a_software_engineers_guide.html"&gt;Clean Meetings: A Software Engineer's Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/my_continuing_descent_into_madness.html"&gt;My (Continuing) Descent Into Madness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/a_scrum_odyssey.html"&gt;A Scrum Odyssey&lt;/a&gt; (Okay that one's a lot of GPT but it was translating my writing)&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Sat, 16 Dec 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-12-16T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_3-2024</guid>
      <link>https://ian.wold.guru/Posts/book_club_3-2024.html</link>
      <title>Book Club 3/2024: Simplicity</title>
      <description>&lt;p&gt;Everything is too complicated. Not just in software, everything! This isn't a novel concept, Teddy Roosevelt would have us believe that anything worth doing involves difficulty. I think this is a widely-adopted notion; simplicity in software seems to be a whole genre of software blogs. That makes my job here of sharing links quite easy though!&lt;/p&gt;
&lt;p&gt;To spare all of the usual writing, simplicity is software is valuable because it &lt;em&gt;makes all the things better&lt;/em&gt;. Simple code is easier to read! It's easier to maintain! Your code will perform 10x faster if it's &lt;em&gt;simple&lt;/em&gt;! Simple code is more extensible, testable, and debuggable! Then we might consider the software itself - the UI, UX, and all the user-considerations. Simple software is easier to use! Users are less likely to reach an unintended state with simple software! You'll have fewer support calls and lower burden of feature growth with simple software!&lt;/p&gt;
&lt;p&gt;These are all true, but a trap a lot of us fall into is neglecting complexity. Sure, our software &lt;em&gt;could&lt;/em&gt; be extremely simple, but it has to solve real user requirements. This is the main source of complexity. Sometimes a very simple piece of software can solve most requirements of most users mostly well. Sometimes a more complicated piece of software can solve those requirements &lt;em&gt;very&lt;/em&gt; well. We can't let ourselves want software more simple than the use case requires. I could just as easily rattle off plenty of pro-complexity platitudes: Complexity is necessary for real-world scenarios! Complexity is required to adequately address security and performance concerns! Architectures that maximize extension and innovation are necessarily complex!&lt;/p&gt;
&lt;p&gt;Both simplicity and complexity are necessary. The difference here is that the necessity of complexity always comes with that asterisk - the &lt;em&gt;kind&lt;/em&gt; and &lt;em&gt;level&lt;/em&gt; of complexity that is required is the minimal amount required to satisfy the requirements you have for your system. Any complexity too far beyond that is detrimental; all of the listed benefits of simplicity are, in fact, true.&lt;/p&gt;
&lt;p&gt;Understanding requirements is essential then. User requirements only capture so much. What are the environmental requirements? What quality attributes does the code need to support? These can introduce necessary complexity but often go overlooked. A complete understanding of the requirements of the code will allow you to develop a holistic view of the complexity that you need to introduce. This is a sort of &lt;em&gt;focused&lt;/em&gt; complexity - this is not just complexity that is &lt;em&gt;necessary&lt;/em&gt; but that is also &lt;em&gt;understood&lt;/em&gt;; you know why it's there. Unfocused complexity is surely just as bad as excessive complexity. No doubt we all have codebases that have the wrong &lt;em&gt;level&lt;/em&gt; of complexity, but ask also whether they have the wrong &lt;em&gt;kind&lt;/em&gt; of complexity. Maybe indeed the level of complexity is right but it's unfocused.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oejXFgvAwTA"&gt;Large-Scale Architecture: The Unreasonable Effectiveness of Simplicity - Randy Shoup (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=P7CfWtR-ECk"&gt;Managing Complexity in Software - Hadi Hariri and Kevlin Henney (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=uAwJEFLJunk"&gt;Software Architecture, Team Topologies and Complexity Science - James Lewis (2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r0-GC3Y_OME"&gt;Highly Cohesive Software Design to tame Complexity - CodeOpinion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And surely &lt;a href="https://www.youtube.com/watch?v=4oky64qN5WI"&gt;Jonathan Blow&lt;/a&gt; has something to say on the topic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdynamics.ai/blog/learn-code-complexity-understanding-code-complexity-with-ease/"&gt;Learn Code Complexity: Understanding Code Complexity with Ease - Mohit Trivedi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thoughtworks.com/insights/blog/technology-strategy/why-embracing-complexity-real-challenge-software-today"&gt;Why embracing complexity is the real challenge in software today - Ken Mugrage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/why-simple-is-so-complex-362bc835b763"&gt;Why Simple is So Complex - Joe Crick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexbunardzic/software-complexity-essential-accidental-and-incidental-3i4d"&gt;Software Complexity: Essential, Accidental and Incidental - Alex Bunardzic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexkondov.com/what-is-complexity/"&gt;What Is Complexity? - Alex Kondov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.developer.com/guides/simplifying-software-development/"&gt;Simplifying Software Development - Dick Wall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two are kind of related:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://taylor.town/compress-code"&gt;Clean your codebase with basic information theory - Taylor Troesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jserd.springeropen.com/articles/10.1186/s40411-018-0060-6"&gt;Metric-centered and technology-independent architectural views for software comprehension - Luis F. Mendivelso, Kelly Garcés, and Rubby Casallas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;From Me&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've had a couple articles recently that more or less relate to &amp;quot;simplicity&amp;quot;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/just_use_postgresql.html"&gt;Just Use PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/its_better_to_be_consistently_incorrect_than_consistently_correct.html"&gt;It's Better to be Consistently Incorrect than Inconsistently Correct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ian.wold.guru/Posts/eight_maxims.html"&gt;Eight Maxims&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 25 Mar 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-03-25T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">book_club_9-2023</guid>
      <link>https://ian.wold.guru/Posts/book_club_9-2023.html</link>
      <title>Book Club 9/2023: Papers I Love</title>
      <description>&lt;p&gt;&lt;em&gt;Author's Note: this first &amp;quot;Book Club&amp;quot; post is not included in the newsletter; I hadn't yet set up the newsletter.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last week I attended the final &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. This conference has been very influential on my career and my academic interests. In fact, this conference began a short time before I started making money in software. Having been able to watch the talks on the YouTubes over the years, I credit it with having a significant impact on how I've approached my career as well as my studies in college, where I got bachelors' in both philosophy and computer science.&lt;/p&gt;
&lt;p&gt;However, I had never been to a Strange Loop before! It's bitersweet then that I was able to attend the final one. Perhaps unurprisingly, I attended several presentations sponsored by (or should I say &amp;quot;presented by&amp;quot;? unsure) &lt;a href="https://paperswelove.org/"&gt;Papers We Love&lt;/a&gt;. In that spirit, I'm going to share five papers here that cut across my philosophical and computer science inclinations that I have very much enjoyed over the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dinhe.net/%7Earedridel/.notmine/PDFs/Parsing/SPIEWAK%2C%20Daniel%20%282010%29%20-%20Generalized%20Parser%20Combinators.pdf"&gt;Generalized Parser Combinators - Daniel Spiewak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philpapers.org/archive/FLOSIA-5.pdf"&gt;Semantic Information and the Correctness Theory of Truth - Luciano Floridi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.type-driven.org.uk/edwinb/papers/impldtp.pdf"&gt;Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation - Edwin Brady&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.umass.edu/klement/lambda.pdf"&gt;Russell's 1903-1905 Anticiaption of the Lambda Calculus - Kevin C. Klement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ics.uci.edu/%7Efielding/pubs/dissertation/top.htm"&gt;Architectural Styles and the Design of Network-based Software Architectures - Roy Thomas Fielding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 28 Sep 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-09-28T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">clean_meetings_a_software_engineers_guide</guid>
      <link>https://ian.wold.guru/Posts/clean_meetings_a_software_engineers_guide.html</link>
      <title>Clean Meetings: A Software Engineer's Guide</title>
      <description>&lt;p&gt;If being in meetings all day isn't bad enough, spending more time thinking about them seems horrible. However, meetings are going to continue to be inflicted upon us, and there will come a time (perhaps more than a few) that we'll need to inflict meetings upon our colleagues in turn. Meetings should be short, concise, and mutually beneficial to everyone involved, and in order to ensure their utility it's necessary to be mindful and considerate when facilitating or participating in a meeting.&lt;/p&gt;
&lt;p&gt;I've had to hold a lot of meetings in my time. I've spent many years in the roles of engineer, team leader, and architect, and I have to conduct meetings outside of work besides. If you want to go full-on meeting nerd I recommend that you pick up a copy of Robert's Rules, but I wanted to distill my experience and thinking on the matter into an easy-to-follow checklist for the 99.99% of us that don't want to have to spend more time than necessary on one of the admittedly more onerous parts of our profession. So, here's a simple guide on making sure you're getting the most out of your meetings.&lt;/p&gt;
&lt;p&gt;Before we get started though, I want to give the single most important advice regarding meetings. If you read no further, take this away: &lt;strong&gt;Meetings are an unfortunate tool of last resort.&lt;/strong&gt; Do you actually need to have this meeting? Would an email chain suffice? How about a Slack message, thread, or channel? Uncle Bob says (paraphrasing) that we should strive to write as few comments in our code as we can, and when we do we should acknowledge it as a failure. Take a similar approach to meetings: While maybe not a failure, we should rarely be having meetings and should, let's say, acknowledge that there might be a potential for a better way of working here. (Is that appropriately diplomatic?)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that meetings can take any level of formality between ad-hoc meetings between junior engineers and a senior-level presentation to the CEO. Some meetings require you to write some or all of these down, such as formulating and distributing an agenda, but some do not. Irrespective the level of formality and preparation, it's good to keep these points at least in mind as you conduct meetings at different levels.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Meeting Structure&lt;/h1&gt;
&lt;p&gt;The most often overlooked aspect to keeping meetings clean is the meeting structure. Meetings have a &lt;strong&gt;purpose&lt;/strong&gt; and an &lt;strong&gt;outcome&lt;/strong&gt; that should be specified in an &lt;strong&gt;agenda&lt;/strong&gt; (whether it is explicitly written or not) that is understood and agreed to by all participants. Some participants play different &lt;strong&gt;roles&lt;/strong&gt; in the meeting, and they will take different &lt;strong&gt;actions&lt;/strong&gt; (what Robert would call &amp;quot;motions&amp;quot; but I'm not going to use that language lest I might confuse those of you who use Vim BTW) during the meeting. This might seem low-level, but it's often the details that can keep a meeting productive.&lt;/p&gt;
&lt;h2&gt;Purpose and Outcome&lt;/h2&gt;
&lt;p&gt;A meeting is scheduled with a specific set of participants agreed on a &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt;: Why is it necessary to gather this group of people and what do they need to achieve? You might need a brainstorming session, you might need to reach a decision or consensus, or you might need to share information. Whatever the case, &lt;em&gt;be clear about each of these&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;✔️ Do define a &lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do specify an &lt;strong&gt;outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do ensure all participants understand the &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;❌ Do not neglect this step! Don't neglect the other steps but especially not this one!&lt;/p&gt;
&lt;p&gt;❌ Do not assume all participants understand or agree with the &lt;strong&gt;purpose&lt;/strong&gt; and &lt;strong&gt;outcome&lt;/strong&gt; - reach out and be sure&lt;/p&gt;
&lt;h2&gt;Agenda&lt;/h2&gt;
&lt;p&gt;Simply put, an agenda is a set of topics to discuss at the meeting. This can be as simple as a single bullet point (i.e. &lt;code&gt;* Brainstorm a name for the new microservice&lt;/code&gt;) or a detailed breakdown of gaps in technical knowledge.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: if your agenda is &amp;quot;Brainstorm a name for the new microservice&amp;quot; that's just a Slack thread. I've been in that exact meeting too many times and I'm here to tell you - your microservice will be replaced by 5 others and deleted in 2 years anyway, just call it &amp;quot;Craig&amp;quot; or something.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some agendas are written, some aren't, but each meeting &lt;em&gt;has an agenda&lt;/em&gt;. There are few absolute truths in the world, but I can tell you that meetings which follow the agenda are good, and meetings that don't aren't.&lt;/p&gt;
&lt;p&gt;Another often-overlooked point is that the agenda needs to be agreed on by all participants. It is not the job of the individual calling the meeting to carve the agenda in stone, it's their responsibility to make sure the agenda fulfils the purposes intended by the participants and the outcomes desired by them. Are the intents and desires of one participant contradictory with another? Sounds like multiple meetings. Maybe multiple Slack threads, but what do I know?&lt;/p&gt;
&lt;p&gt;✔️ Do be specific about the purpose and outcome in the agenda&lt;/p&gt;
&lt;p&gt;✔️ Do communicate the agenda to participants ahead of time&lt;/p&gt;
&lt;p&gt;✔️ Do ask participants to contribute to the agenda, both before and at the beginning of each meeting&lt;/p&gt;
&lt;p&gt;❌ Do not require all potential participants to attend, especially if they feel they aren't interested in the agenda&lt;/p&gt;
&lt;p&gt;❌ Do not write the agenda in one pass. Instead, write a first pass and give ownership to the team&lt;/p&gt;
&lt;h2&gt;Roles&lt;/h2&gt;
&lt;p&gt;Each meeting has roles. At the least, you need to acknowledge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;facilitator&lt;/strong&gt; leads the meeting, ensures the agenda is followed, and facilitates discussion,&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;secretary&lt;/strong&gt; records the minutes and important decisions, and&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;participants&lt;/strong&gt; engage in the discussion, provide input, and carry out assigned action items post-meeting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✔️ Do be clear about which role is fulfilled by which participant&lt;/p&gt;
&lt;p&gt;❌ Do not assign multiple roles to a single person in larger meetings&lt;/p&gt;
&lt;h1&gt;Before the Meeting&lt;/h1&gt;
&lt;p&gt;There are a few steps to take before holding a meeting, and they can greatly help to set the meeting up for success. The most important thing before the meeting is to remember the most important advice: Is this meeting actually necessary? Abort if not.&lt;/p&gt;
&lt;h2&gt;Prepare the Agenda&lt;/h2&gt;
&lt;p&gt;I covered all the dos and don'ts in the previous section, but this is the most important step before the meeting. Write the agenda down and distribute it as early as you can. Some meetings are regular rituals, and it still helps to write the agenda for these down and distribute them. Sometimes there is requisite technical or business information for the meeting - provide these as resources for participants. If they suggest changes, make them!&lt;/p&gt;
&lt;p&gt;✔️ Do include knowledge perrequisite for the meeting in the agenda (links and short descriptions, please)&lt;/p&gt;
&lt;p&gt;✔️ Do take feedback - if necessary, send a revised agenda to participants&lt;/p&gt;
&lt;p&gt;✔️ Do include any necessary discription or goals for points needing clarification&lt;/p&gt;
&lt;p&gt;❌ Do not write a novel for the agenda - stick to bullet points&lt;/p&gt;
&lt;p&gt;Sometimes the objective of the meeting is reached while distributing the agenda. If it is: abort the meeting. Your objective is reached. As Sun Tzu says in The Art of War, &amp;quot;The wisest general is the general who never fights.&amp;quot;&lt;/p&gt;
&lt;h2&gt;Pre-Meeting Preparation&lt;/h2&gt;
&lt;p&gt;While the facilitator has the most work to understand the agenda and work towards the objective, participants need to prepare as well. Read the agenda, suggest feedback if needed, and study the prerequisite information.&lt;/p&gt;
&lt;p&gt;✔️ Do review the agenda beforehand&lt;/p&gt;
&lt;p&gt;✔️ Do suggest agenda changes. If you think you might have solved the problem or resolved the outcome of the meeting, even if only minutes before, say so and &lt;em&gt;abort the meeting&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;❌ Do not attend the meeting if you feel you don't have to. Best to ask the facilitator to drop, explaining why&lt;/p&gt;
&lt;h1&gt;During the Meeting&lt;/h1&gt;
&lt;p&gt;In a meeting, everyone should be engaged and it should be kept as short as possible. If you're not engaged, drop. I've worked at places where I was told explicitly to not do this, but I would drop anyway and never heard any complaints. Your mileage might vary. If you're facilitating a meeting, let your participants drop.&lt;/p&gt;
&lt;h2&gt;Adhrere to the Agenda&lt;/h2&gt;
&lt;p&gt;The agenda specifies the purpose and outcome of the meeting, and the topics worthy of consideration in furtherance of the objective. At the start of the meeting, the first order of business is to approve the agenda and make any last-minute changes needed by the participants. Once everyone agrees on the agenda, &lt;em&gt;stick to it&lt;/em&gt;. Topics not on the agenda are to be tabled, either for another meeting or preferrably for a Slack thread.&lt;/p&gt;
&lt;p&gt;✔️ Do ensure everyone agrees to and understands the agenda&lt;/p&gt;
&lt;p&gt;✔️ Do be clear when moving from one agenda item to the next&lt;/p&gt;
&lt;p&gt;✔️ Do cut participants or yourself off if non-agenda topics start being discussed: &amp;quot;Let's table that thought&amp;quot;&lt;/p&gt;
&lt;p&gt;✔️ Do allow for a brief period at the end of the meeting for any additional topics if it's a wide-ranging meeting, but be eager to move individual conversations to later meetings&lt;/p&gt;
&lt;p&gt;❌ Do not amend the agenda mid-meeting. It was agreed to, and if we find we're not focused that signifies that we can &lt;em&gt;abort the meeting&lt;/em&gt; - it's not too late&lt;/p&gt;
&lt;p&gt;❌ Do not &amp;quot;afterparty&amp;quot; - these are either separate conversations or separate meetings (or better yet, Slack threads)&lt;/p&gt;
&lt;h2&gt;Time Management&lt;/h2&gt;
&lt;p&gt;The meeting should have a specific amount of time. My favorite, and I am very serious when I say favorite - historical fact is that Winston Churchill would limit all meetings &lt;em&gt;during the war&lt;/em&gt; to 20 minutes. &lt;strong&gt;YOUR MICROSERVICE'S RAM CONSUMPTION IS NOT MORE IMPORTANT THAN THE ALLIES WINNING THE SECOND WORLD WAR&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I don't know how accurate that fact is but I quote it more than once a week on average and in my experience nobody ever checks me on it, so either it's true &lt;em&gt;or&lt;/em&gt; you can also use it to keep your meetings below 20 minutes. Whatever the historical accuracy, my experience has taught me that 20 minutes is enough for almost all meetings I've had to attend or conduct. Meetings that go over 20 minutes deliver exponentially less value to participants per minute of runtime. The ideal length of a meeting is the amount time it takes to compose a Slack message. Oh look at that, your meeting can be a Slack message!&lt;/p&gt;
&lt;p&gt;✔️ Do adhere to a strict time limit. Some objectives need to be reached and the meeting extended if not, but the vast majority don't. Set the expectation with everyone that you'll hold them to a timeframe and, as if by magic, the meeting will resolve in the right amount of time&lt;/p&gt;
&lt;p&gt;✔️ Do keep conversation flexible but insert yourself when it needs to move along&lt;/p&gt;
&lt;p&gt;✔️ Do set approximate time limits for top-level items&lt;/p&gt;
&lt;p&gt;❌ Do not tell participants about those time limits - just convey how long the meeting will be&lt;/p&gt;
&lt;p&gt;❌ Don't harp on participants about time, they're doing their best to navigate the meeting; it's always OK to politely interrupt with a brief reminder about time when necessary&lt;/p&gt;
&lt;h2&gt;Take Notes&lt;/h2&gt;
&lt;p&gt;Liek the heading says, take notes. This is why I enumerated &amp;quot;secretary&amp;quot; as one of the roles in the meeting. Someone other than the facilitator should be writing down notes. &amp;quot;Even for daily standup meetings?&amp;quot; you might ask. Well, you should consider whether those are necessary, but yeah you probably should be taking notes if you're having that meeting. If you counter that nobody cares about those daily standup meetings enough to take notes, &lt;em&gt;then you might consider a second time whether those meetings really are necessary!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Notes will serve as important documentation after the fact for participants about what's been discussed and agreed to. What's more is that not everyone in your company can be in every meeting, but you need to make sure that information is available to everyone in your organization. Keep minutes to allow everyone to revisit them when necessary.&lt;/p&gt;
&lt;p&gt;✔️ Do appoint a &amp;quot;secretary&amp;quot; to take notes&lt;/p&gt;
&lt;p&gt;✔️ Do share the notes with everyone during the meeting&lt;/p&gt;
&lt;p&gt;✔️ Do take note of important questions, information, and decisions&lt;/p&gt;
&lt;p&gt;❌ Do not record every word of every participant&lt;/p&gt;
&lt;p&gt;❌ In fact, do not record the actions of specific participants unless it's absolutely necessary&lt;/p&gt;
&lt;p&gt;❌ Do not let everyone amend the minutes during the meeting - have one person dedicated to this task (brainstorming sessions maybe aside)&lt;/p&gt;
&lt;h2&gt;Everyone Must Participate&lt;/h2&gt;
&lt;p&gt;If you have a participant who isn't participating, then you don't have a &amp;quot;participant&amp;quot; - you have a voyeur. I'm creeped out by voyeurs, and you probably are too. Excuse them.&lt;/p&gt;
&lt;p&gt;Everyone in a meeting should be participating, either actively listening or contributing to the present conversation. If you're facilitating and notice someone isn't participating, ask their opinion. Create an atmosphere where they're welcome to share their opinion, no matter their seniority (either rank-wise or domain-wise). Participants asking clarifying questions, no matter how basic they may be, must be encouraged.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note on the topic of conversations: if a participant gives a hostile answer to a question, call them out on it. This is difficult but it's a win-win - the participant at the receiving end of the hostility knows you have their back, and the hostile participant (and everyone else) knows this behavior isn't acceptable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;✔️ Do encourage a diversity in opinions and voices&lt;/p&gt;
&lt;p&gt;✔️ Do ask everyone their thoughts regularly&lt;/p&gt;
&lt;p&gt;✔️ Do actively engage in the conduct of the meeting and encourage a positive atmosphere&lt;/p&gt;
&lt;p&gt;❌ Do not let participants be passive in a meeting&lt;/p&gt;
&lt;p&gt;❌ Do not overlook non-verbal cues in virtual meetings; they can be indicators of agreement, confusion, or the desire to speak&lt;/p&gt;
&lt;p&gt;❌ Do not avoid tough conversations. About that...&lt;/p&gt;
&lt;h2&gt;Engage Difficult Conversations&lt;/h2&gt;
&lt;p&gt;Meetings are called for specific purposes - sometimes to reach decisions, sometimes to explore new ideas, or any multitude of reasons that might touch on the passions of several participants. Meetings can bring up difficult, complicated, or heated conversations or even arguments. Make no mistake - this is good, and it's a good sign that a meeting was needed if this happens. A team that is passionately engaged is infinitely more preferrable than a team that always agrees with itself. There will always be a difference in opinion, and the best thing for the team(s) involved is to engage these points head-on.&lt;/p&gt;
&lt;p&gt;✔️ Do allow heated conversations and respectful arguments&lt;/p&gt;
&lt;p&gt;✔️ Do ensure the topic is stuck to during these moments, and ensure everyone maintains the overall focus of the meeting&lt;/p&gt;
&lt;p&gt;✔️ Do act to keep participants in-line when necessary&lt;/p&gt;
&lt;p&gt;✔️ Do suggest a breather if necessary. Do reprimand participants if they cross a line&lt;/p&gt;
&lt;p&gt;✔️ Do create a safe space for dissent and disagreement. Do emphasize the focus on ideas and not individuals&lt;/p&gt;
&lt;p&gt;❌ Do not shut down difficult conversations or honest arguments&lt;/p&gt;
&lt;p&gt;❌ Do not disengage if an argument comes up&lt;/p&gt;
&lt;h1&gt;After the Meeting&lt;/h1&gt;
&lt;p&gt;There's still a bit more work to do after the meeting - you're not done yet! All the more reason to respect the time of the meeting, or to try to avoid it altogether. Remember that what was discussed needs to be appropriately documented and easy to reference for participants. Remember also that not everyone in your organization was able to attend this meeting, but goodness knows when the topics discussed will impact them.&lt;/p&gt;
&lt;p&gt;I recommend keeping your meeting minutes in a single place that's easy to reference for everyone in your organization. Products like Notion, Monday, or Confluence allow you to add tags and @ members as necessary, making them searchable too.&lt;/p&gt;
&lt;h2&gt;Finalize the Minutes&lt;/h2&gt;
&lt;p&gt;After the meeting, ask all participants to spend a minute or two to add anything to the minutes that might have been missed. You asked them to refrain from adding anything to the minutes during the meeting so they could stay focused on the conversation, now that the conversation is over they can add any extra context they need.&lt;/p&gt;
&lt;p&gt;✔️ Do leave the minutes editable, at least for a period of time. Preferrably store them in a system with history tracking.&lt;/p&gt;
&lt;p&gt;✔️ Do follow up and ensure everyone agrees on the final minutes&lt;/p&gt;
&lt;p&gt;✔️ Do broadcast to your organization that your meeting is done and the minutes are available&lt;/p&gt;
&lt;p&gt;✔️ Do set a deadline for when minutes must be finalized and shared post-meeting&lt;/p&gt;
&lt;p&gt;❌ Do not fail to publish the minutes&lt;/p&gt;
&lt;p&gt;❌ Do not allow a &amp;quot;he said, she said&amp;quot; fight in the minutes after the meeting&lt;/p&gt;
&lt;h2&gt;Follow-Up Actions&lt;/h2&gt;
&lt;p&gt;A lot of meetings will result in participants being assigned specific tasks. You should either follow up with them in the appropriate timeframe, or ensure their managers do, that they've completed these tasks. It's good to update the minutes at this time to reflect that this was done, and if possible link to the result.&lt;/p&gt;
&lt;p&gt;✔️ Do ensure all participants are clear on follow-up items&lt;/p&gt;
&lt;p&gt;✔️ Do record follow-up work in the minutes&lt;/p&gt;
&lt;p&gt;❌ Do not assign follow up work after the meeting&lt;/p&gt;
&lt;h1&gt;Keep in Mind Always&lt;/h1&gt;
&lt;h2&gt;Meeting Etiquette&lt;/h2&gt;
&lt;p&gt;✔️ Do be mindful of your role, participation, and conduct during meetings&lt;/p&gt;
&lt;p&gt;✔️ Do respect everyone's time&lt;/p&gt;
&lt;p&gt;✔️ Do respect everyone's individual contributions&lt;/p&gt;
&lt;p&gt;✔️ Do adhere to virtual meeting norms, such as muting when not speaking&lt;/p&gt;
&lt;p&gt;✔️ Do leave, not attend, or &lt;em&gt;abort&lt;/em&gt; the meeting if you can&lt;/p&gt;
&lt;p&gt;❌ Do not dominate a meeting, either as a participant or a facilitator&lt;/p&gt;
&lt;p&gt;❌ Do not underestimate the impact of your physical environment in virtual meetings (e.g., background, lighting)&lt;/p&gt;
&lt;h2&gt;Regular Review&lt;/h2&gt;
&lt;p&gt;✔️ Do regularly assess the necessity and effectiveness of meetings, especially regular rituals&lt;/p&gt;
&lt;p&gt;✔️ Do be open to feedback and make adjustments as needed&lt;/p&gt;
&lt;p&gt;✔️ Do make adjustments or &lt;em&gt;abort the meeting&lt;/em&gt; if and when necessary&lt;/p&gt;
&lt;p&gt;✔️ Do periodically ask if the frequency of regular meetings is still appropriate or if adjustments are needed&lt;/p&gt;
&lt;p&gt;❌ Do not ignore patterns of unproductive meetings. If certain meetings consistently fail to achieve their objectives, it's a sign that they need to be reevaluated&lt;/p&gt;
&lt;p&gt;❌ Do not continue meetings just because they are a routine&lt;/p&gt;
&lt;h2&gt;Diverse Perspectives&lt;/h2&gt;
&lt;p&gt;✔️ Do value and seek a range of opinions and ideas, and encourage participation from everyone&lt;/p&gt;
&lt;p&gt;✔️ Be mindful of inclusive participation, especially in diverse teams&lt;/p&gt;
&lt;p&gt;❌ Do not allow the same individuals to dominate the conversation in every meeting&lt;/p&gt;
&lt;p&gt;❌ Do not dismiss ideas without proper consideration, and do not create an environment where only certain opinions are valued over others&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Yeah that's a lot of bullet points, but I have a lot of ideas on this topic. I feel strongly that meetings are very productive tools, but there's a lot of awkwardness in our industry around how any why we have meetings. Be considerate and hold your meetings with intention and purpose, drive towards your outcome, and your meetings will work for you and all of your colleagues.&lt;/p&gt;
&lt;p&gt;Above all, remember: &lt;em&gt;you probably don't need a meeting for it.&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 03 Dec 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-12-03T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">consider_a_tiling_window_manager</guid>
      <link>https://ian.wold.guru/Posts/consider_a_tiling_window_manager.html</link>
      <title>Windows Users: Consider a Tiling Window Manager</title>
      <description>&lt;p&gt;&lt;em&gt;Note of warning to the reader: the words &amp;quot;productivity&amp;quot; and &amp;quot;efficiency&amp;quot; occur in abundance in the following text.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tiling_window_manager"&gt;Tiling window managers&lt;/a&gt;, or TWMs, are an often-hyped feature of true Linux nerddom and a permanent staple in the toolbelt of any honest around-the-clock workflow optimizer. In short, it's what the cool kids are doing (and have been doing for about 40 years). The concept isn't new - using keyboard shortcuts and clever defaults to keep windows arranged optimally on the desktop - but they're almost entirely overlooked on Windows.&lt;/p&gt;
&lt;p&gt;This is unfortunate though, because those of us working on Windows stand to benefit just as much from the TWM as our Linux-using colleagues. Though ultimately coming down to a matter of personal preference, I would suggest that it is worthwhile for Windows users to consider a TWM. The benefits of using a TWM are essentially productivity and customizability. I've been using one on Windows for about half a year now, and the control it's given me over my workflow has had a noticeable impact on my productivity. To the point of customizability, how else could I be taken seriously when I pull out my laptop at a conference &lt;em&gt;but&lt;/em&gt; by opening it to a thoroughly riced-out RGB setup that reports my CPU temperature in Kelvin?&lt;/p&gt;
&lt;h1&gt;Keyboard Shortcuts&lt;/h1&gt;
&lt;p&gt;There's no question (in my mind at least, but hopefully in yours too) that ALT+(number) is a much more efficient way to navigate than ALT+TAB+TAB+TAB+TAB+TAB+(SHIFT+TAB)+(stare for a bit)+(release ALT). I find myself switching between windows and contexts a lot, and being able to have a single keystroke take me to the same window context &lt;em&gt;every time&lt;/em&gt; has done so much to help keep me focused, and that directly feeds into productivity. My IDE is &lt;em&gt;always&lt;/em&gt; at ALT+2 no matter where I am. I can do all my communication (Slack, Discord, email, Zoom) at ALT+3. I don't really need to set anything up each time I start my machine; everything is in its place for me.&lt;/p&gt;
&lt;p&gt;Using and learning the keyboard shortcuts isn't difficult, either. I haven't really been a keyboard shortcut person until recently, and I was able to become really proficient with the shortcuts after a couple days' use. This is a case where the investment in learning the tool is so small that it offers excellently outsized returns with the productivity gain.&lt;/p&gt;
&lt;h1&gt;Workspace Navigation&lt;/h1&gt;
&lt;p&gt;A lot of the time when we're working with windows we need to context switch twice to fully be able to reorient ourselves: once to change up our window arrangement and another to switch into the next context. I find that the workspace customization offered by TWMs eliminates the middle context switch, saving me a lot of time not just in the process of switching the windows around, but reducing the mental load I need to bear. This workspace customization extends to my multiple-monitor setup. I've already set up which tools I want on which monitors, and I have a couple of simple keystrokes to switch them between monitors when I need to switch that. This extends the predictability and efficiency of my setup, and almost entirely removed any need for me to drag windows back and forth or spend extra time trying to get my windows lining up correctly.&lt;/p&gt;
&lt;p&gt;Windows 11 has the ability to sort windows into panels, but that is lightyears behind the capabilities offered here by TWMs: with the latter I can set up any windowing arrangement without needing to take the time to manually move the windows around each time. The real estate of each screen is always perfectly optimized with a TWM. Not just that the windows are all maximized by default, but that they're arranged in the specific manager that you expect them. The same way each time, and when you need to change the window arrangement you'll be changing it in consistent and predictable ways. I've already set up how I want my windows tiled in each workspace, and that gives me a framework to work in when I need to rearrange windows as my work progresses. The less I need to focus on the minutae of where my windows are and why, the more I can focus on the work I have at hand (like typing a mediocre article on tiling window managers).&lt;/p&gt;
&lt;h1&gt;Customization is Fun&lt;/h1&gt;
&lt;p&gt;Yes, having a well-customized system is also a feedback in efficiency and productivity and all the good things. However, if I'm being honest with myself, customization is a bit of flair for flair's sake. To me, that's fun. I enjoy being able to show off a super-nerdy desktop and make things flash around with a couple keystrokes. I have a &lt;a href="https://marketplace.visualstudio.com/items?itemName=Katsute.code-background"&gt;VS Code extension&lt;/a&gt; that puts space images in the background of my code, and while I might be able to make a case that having different colored code panes better helps me find my way around my code, really it's just fun to have.&lt;/p&gt;
&lt;p&gt;TWMs offer customization in all of the workspace and productivity ways, but they also offer aesthetic customization, and you can tinker pretty fine-grained with it. Yes efficiency is important but the personalized tweaks can be a huge benefit just for their own sake. I think this is an important point about TWMs, and it's something that we sometimes lack on Windows.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;If you use Windows, consider using a TWM. Try it out for a week! It's not everyone's cup of tea, but if you're open to the idea you might find that you like it. I tried it out half a year ago just to see what the hype was and I ended up loving it. The same could be true for you.&lt;/p&gt;
&lt;p&gt;Two great ones to consider are &lt;a href="https://github.com/glzr-io/glazewm"&gt;GlazeWM&lt;/a&gt; and &lt;a href="https://github.com/LGUG2Z/komorebi"&gt;Komorebi&lt;/a&gt;. A couple others which I have not tried, but look interesting, are &lt;a href="https://github.com/ZaneA/HashTWM"&gt;HashTWM&lt;/a&gt; and &lt;a href="https://github.com/FancyWM/fancywm"&gt;FancyWM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy tiling!&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-12T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">console2048</guid>
      <link>https://ian.wold.guru/Posts/console2048.html</link>
      <title>Console2048</title>
      <description>&lt;p&gt;Jumping on the bandwagon, here's a C# implementation of Console 2048. Of course, 2048 has had a few console implementations, and most better done than this, but here it is anyway, because sometimes life is a mixed bag of apples and grapes.&lt;/p&gt;
&lt;p&gt;I've got it on the GitHub &lt;a href="https://github.com/IanWold/Console2048"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Sat, 26 Apr 2014 00:00:00 Z</pubDate>
      <a10:updated>2014-04-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">daily_grug</guid>
      <link>https://ian.wold.guru/Posts/daily_grug.html</link>
      <title>Daily Grug</title>
      <description>&lt;p&gt;One of favorite article is &lt;a href="https://grugbrain.dev/"&gt;The Grug Brained Developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Much wisdom, big article, hard read. Need daily small grug.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bit.ly/daily-grug"&gt;So made API for daily grug&lt;/a&gt; and made home page.&lt;/p&gt;
</description>
      <pubDate>Thu, 26 Oct 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-10-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">deploying_aspdotnet_7_projects_with_railway</guid>
      <link>https://ian.wold.guru/Posts/deploying_aspdotnet_7_projects_with_railway.html</link>
      <title>Deploying ASP.NET 7 Projects with Railway</title>
      <description>&lt;p&gt;Nevermind that I haven't posted in more than 6 years, &lt;a href="https://www.railway.app"&gt;Railway&lt;/a&gt; is a startup cloud infrastructure provider that has gained a fair amount of traction for being easy to use and very cost effective to get started with. It's pretty barebones right now, but that makes it especially great for hobbyist projects. They have a free introductory tier, but then the next tier is $5/month plus a small resource usage fee. Really, their pricing is fantastic.&lt;/p&gt;
&lt;p&gt;When you deploy with Railway, they'll shove your app into a Docker container and handle the management/scaling/etc. behind the scenes. In addition, they have the ability to stand up a database for you - as of the time of this writing, you can choose PostgreSQL, MySQL, Mongo, and Redis. That said, they of course allow you to deploy any docker image or volume, so if you're willing to put in a little more work I imagine you can make any stack work for you. That all means of course that Railway probably isn't the best solution if you need control over container orchestration, but for CRUD projects and startups it seems quite promising to me.&lt;/p&gt;
&lt;p&gt;What's especially great is their integration with GitHub - it takes just a couple minutes to sign up for Railway, authenticate with GitHub, point it at a repo, and Railway takes care of the deployment from there. It has some magic to sense what kind of project your repo is and attempt to construct a build pipeline for your project right away. This doesn't work too well in .NET, but their interface is very sparse and easy to use to get up and going with it.&lt;/p&gt;
&lt;p&gt;In the remainder of this article, I'm going to be demonstrating how to get a .NET 7 app deployed with Railway. I'll start with a simple ASP.NET API, and then I'll demonstrate getting Blazor working. I'd encourage you to follow along with me - it's no cost to you (you don't even need to type in a credit card) and I think you'll be impressed with how easy it is to get a little hobby app deployed with Railway.&lt;/p&gt;
&lt;h1&gt;Setting Up&lt;/h1&gt;
&lt;p&gt;We'll just need three things to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An ASP.NET API&lt;/li&gt;
&lt;li&gt;A GitHub repo for that API&lt;/li&gt;
&lt;li&gt;A Railway account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's go top to bottom there&lt;/p&gt;
&lt;h2&gt;Setting up a new .NET API&lt;/h2&gt;
&lt;p&gt;To begin with, I'll assume you have .NET installed, and you have a GitHub account. We can create a barebones API from the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;dotnet new web -n RailwayAspApiDemo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This starts us off with the following, which will output &amp;quot;Hello, World!&amp;quot; at &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;);

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;MyApi&lt;/code&gt; directory, we can create a new repo. I'd recommend adding the &lt;a href="https://raw.githubusercontent.com/github/gitignore/main/VisualStudio.gitignore"&gt;VS .gitignore&lt;/a&gt; first, too.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;git add .
git commit -m &amp;quot;Getting Started&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you've created a repo in GitHub, we can push it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;git remote add origin https://github.com/{username}/RailwayAspApiDemo.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For reference, you can &lt;a href="https://github.com/IanWold/RailwayAspApiDemo"&gt;see this repo here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting up Railway&lt;/h2&gt;
&lt;p&gt;This is real simple - just go to &lt;a href="http://railway.app"&gt;railway.app&lt;/a&gt;, click login at the top, and then you can login with GitHub.&lt;/p&gt;
&lt;p&gt;That's all you need in order to set up Railway. Seriously! Of course we're going to push ahead and click that shiny New Project button though...&lt;/p&gt;
&lt;h1&gt;Deploying our first API&lt;/h1&gt;
&lt;p&gt;If we had containerized our API with Docker, Railway would have been perfectly happy for us to give it a dockerfile, and it would deploy that no problem. However, Railway also supports building and deploying .NET apps without needing to containerize them. Let's do that first, since we're trying to keep things barebones to get started.&lt;/p&gt;
&lt;h2&gt;Deploying From a GitHub Repo&lt;/h2&gt;
&lt;p&gt;One of Railway's coolest features is that you can start a project off by pointing it at a GitHub repo, and it'll automatically (ish) deploy the repo, and set up hooks to listen to any changes on &lt;code&gt;master&lt;/code&gt; and deploy then.&lt;/p&gt;
&lt;h3&gt;Configuring the Repository for Deployment&lt;/h3&gt;
&lt;p&gt;After logging in, we should be faced with a big New Project button&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project.png" alt="New Project button in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Here we'll select Deploy from GitHub repo&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-select-github.png" alt="Select GitHub in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And then we can select the repo we just pushed&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-select-repo.png" alt="Select Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;And why not try deploying right off the bat, so long as it's giving us the option?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-new-project-deploy-repo.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;We should see the deployment fail in just a few seconds.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-deploy-first-fail.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h3&gt;Debugging the First Errors&lt;/h3&gt;
&lt;p&gt;Let's click on the deployment and inspect the deploy logs. The first thing to notice is that Railway actually did a really good job guessing what our build config should be. At the top of the logs, we can see:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt; setup      │ dotnet-sdk                                    
────────────────────────────────────────────────────────────
 install    │ dotnet restore                                
────────────────────────────────────────────────────────────
 build      │ dotnet publish --no-restore -c Release -o out 
────────────────────────────────────────────────────────────
 start      │ ./out/RailwayAspApiDemo                       
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's really spectacular! Just because we had a &lt;code&gt;.csproj&lt;/code&gt; file, it was able to fill this all out. But it's not all peaches and pringles, we've got a build error. And indeed we're able to see a failure just a few lines down:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;#10 1.426 /nix/store/832ihvqk3vxgqqs5hvcyvg6bxqybky14-dotnet-sdk-6.0.403/sdk/6.0.403/Sdks
          /Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(144,5):
          error NETSDK1045: The current .NET SDK does not support targeting .NET 7.0.
          Either target .NET 6.0 or lower, or use a version of the .NET SDK
          that supports .NET 7.0. [/app/RailwayAspApiDemo.csproj]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Classic cloud moment - we need to know how to configure the .NET SDK version. Thankfully, &lt;a href="https://nixpacks.com/docs/providers/csharp"&gt;Railway's docs&lt;/a&gt;, though sparse, do give us exactly what we need, an environment variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;NIXPACKS_CSHARP_SDK_VERSION=&amp;quot;7.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be set on the &lt;code&gt;Variables&lt;/code&gt; tab on the UI for the service:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-variables-sdk-version.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Adding that variable should reschedule the deployment. Indeed, it works!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-deploy-second-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Just one thing - how do we see it? We'll need to generate a domain ourselves in the &lt;code&gt;Settings&lt;/code&gt; tab in the UI for the service:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-settings-networking.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;That will generate a slightly random &lt;code&gt;.up.railway.app&lt;/code&gt; domain for you to get started with. Of course, you can add a custom domain here if you've purchased one, but I'm going to roll with this because somehow I managed to snag &lt;a href="http://railwayaspapidemo-production.up.railway.app"&gt;railwayaspapidemo-production.up.railway.app&lt;/a&gt;. Luky me!&lt;/p&gt;
&lt;p&gt;Now we can navigate to that link and see &amp;quot;Hello, World!&amp;quot; right?&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-failed-respond.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Well, the build deployed, so let's look at our deploy logs. I imagine yours will look similar to mine:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;info: Microsoft.Hosting.Lifetime[14]
Now listening on: http://0.0.0.0:3000
info: Microsoft.Hosting.Lifetime[0]
Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
Content root path: /app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It says it's listening on port 3000, so it seems like the app is running, but why can't we see it? That's because when Railway deploys our app, it deploys it in a Docker container and generates a port for us. That means we either need to wire our app up to listen on the port that Railway dictates, or we need to tell Railway to use our nice, pretty port 3000. Luckily, Railway allows us to do both; the port number lives in the environment variable &lt;code&gt;PORT&lt;/code&gt;, so we can either override that in Railway or consume the environment variable from our API.&lt;/p&gt;
&lt;h3&gt;Overriding Railway's Port Assignment&lt;/h3&gt;
&lt;p&gt;To override Railway's port assignment, we can just set the environment variable in the variables tab, just like how we set the &lt;code&gt;NIXPACKS_CSHARP_SDK_VERSION&lt;/code&gt; variable earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;PORT=&amp;quot;3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will trigger a redeploy, and then we'll cross our fingers, refresh the app, and...&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-hello-world-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;h3&gt;Using Railway's Port in our API&lt;/h3&gt;
&lt;p&gt;Alternatively, if you want to use the Railway-generated port, we can add just a bit of code to do that. Go ahead and delete the &lt;code&gt;PORT&lt;/code&gt; environment variable if you added that.&lt;/p&gt;
&lt;p&gt;We can update our &lt;code&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(args);

if (Environment.GetEnvironmentVariable(&amp;quot;PORT&amp;quot;) is not null and string environmentPort
    &amp;amp;&amp;amp; int.TryParse(environmentPort, out int port))
{
    builder.WebHost.ConfigureKestrel(o =&amp;gt; o.ListenAnyIP(port));
}

var app = builder.Build();

app.MapGet(&amp;quot;/&amp;quot;, () =&amp;gt; &amp;quot;Hello World!&amp;quot;);

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Aside: I &lt;strong&gt;hate&lt;/strong&gt; the syntax &lt;code&gt;is not null and string&lt;/code&gt; but I'm not going to complain. Too much.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Push that code to master and you should see Railway start deploying your API right away. Once that's up, you should see &amp;quot;Hello, World!&amp;quot; in the browser at your app.&lt;/p&gt;
&lt;h2&gt;Deploy From Docker or CLI&lt;/h2&gt;
&lt;p&gt;I could type out a whole section here, but honestly I would just be copying &lt;a href="https://rendle.dev/posts/deploying-to-railway-with-dotnet/"&gt;Mark Rendle's excelent explanation&lt;/a&gt;. His tutorial was quite helpful for me getting started, and I'd like to give some credit where it's due. So, if you want to containerize your app and use the dockerfile instead of Railway's build steps, or if you want to deploy using Railway's CLI, please give his article a visit!&lt;/p&gt;
&lt;h1&gt;Deploying a Blazor App&lt;/h1&gt;
&lt;p&gt;We've got our barebones API up and running, but it's missing a number of things yet. Frankly, that's a trivial example that's hiding a number of problems that still exist. I think Blazor's a good way to demonstrate these, especially since an ASP.NET-hosted Blazor WASM project requires sharing static files.&lt;/p&gt;
&lt;h2&gt;Setting up a Blazor Project&lt;/h2&gt;
&lt;p&gt;Similar to the API we created above, we can get the default Blazor project initialized with&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;dotnet new blazorwasm --hosted -n RailwayBlazorDemo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create an &amp;quot;ASP.NET-hosted&amp;quot; Blazor app, which means we'll get a separate client and server project. Go ahead and run this locally - it will spin up the server, and the server will serve you the Blazor WASM client at root:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-blazor-default.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;Go ahead and push this to a new repository (for reference you can &lt;a href="https://github.com/IanWold/RailwayBlazorDemo"&gt;see mine here&lt;/a&gt;) and create a new project in Railway, linking to this new repository.&lt;/p&gt;
&lt;p&gt;That should start a deploy like before, and just like before you'll get a failed build. Remember to set the &lt;code&gt;NIXPACKS_CSHARP_SDK_VERSION&lt;/code&gt; environment variable, and resolve the port issue however you choose. I'll choose to resolve it in my code. In order to do that, I'll edit the &lt;code&gt;/Server/Program.cs&lt;/code&gt; file with the same lines we added to the barebones API. While that deploys, we also need to generate a domain for this app like we did before. And, don't you know it, I got lucky again: &lt;a href="http://railwayblazordemo-production.up.railway.app"&gt;railwayblazordemo-production.up.railway.app&lt;/a&gt;! Neat.&lt;/p&gt;
&lt;h3&gt;Configuring Railway to Deploy the Server&lt;/h3&gt;
&lt;p&gt;At this point, we might expect it to work. However, you'll notice after building Railway attempts to start the service several times, but fails with the same message:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/bin/bash: line 1: ./out/RailwayBlazorDemo.Client: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uh oh - we don't want to deploy the &lt;em&gt;client&lt;/em&gt;, we want to deploy the &lt;em&gt;server&lt;/em&gt;, because the server is configured to serve the client. The cause of this can be seen in the build logs like we'd expect - the automagic build figurer-outer guessed that we wanted to deploy the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;setup      │ dotnet-sdk_7                                  
───────────────────────────────────────────────────────────
install    │ dotnet restore                                
───────────────────────────────────────────────────────────
build      │ dotnet publish --no-restore -c Release -o out 
───────────────────────────────────────────────────────────
start      │ ./out/RailwayBlazorDemo.Client                
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This, like the other environment configuration issues in Railway, is simple to resolve. If you navigate back to the &lt;code&gt;Settings&lt;/code&gt; tab on the UI for the service, scroll down and you'll see Deploy settings, with a helpful place to override the start command. In fact you can override any of the build steps in these settings, although you'll notice that they're pretty sparse. For our needs here though, those settings are all fine, so we'll just update the start command to &lt;code&gt;./out/RailwayBlazorDemo.Server&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-settings-start-command.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;p&gt;This will trigger a rebuild, and that should succeed! Our app should now be at the address we generated earlier, right?&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-failed-404.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h3&gt;Configuring the ContentRootPath&lt;/h3&gt;
&lt;p&gt;Well, that's interesting, because it's a different error than we got when first deploying the barebones API earlier. In that case, we got a nice error displayed with Railway's UI. This tells us that the server is up and running - of course though we verified that when the server started logging after it deployed a minute ago. Thus, we know that the problem is with the server being able to serve up the client app.&lt;/p&gt;
&lt;p&gt;What's going on here isn't entirely obvious and it relies on a bit of knowledge about Docker to be able to intuit what's going on. There are two key lines in the logs. The key line is in the deploy logs:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;Content root path: /app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's going on is that the client is stored as a static file on the server, and the server needs access to that file to be able to serve it, of course. ASP calls the root directory for static files the &amp;quot;content root path&amp;quot;, and this one is a bit bunked.&lt;/p&gt;
&lt;p&gt;This has a code solution. Replace the first line of &lt;code&gt;Server/Program.cs&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = WebApplication.CreateBuilder(new WebApplicationOptions() {
    Args = args,
    ContentRootPath = &amp;quot;./&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, &lt;code&gt;ContentRootPath&lt;/code&gt; is &lt;em&gt;supposed&lt;/em&gt; to default to its root directory, but there's some weirdness that got introduced ... &lt;em&gt;*checks notes*&lt;/em&gt; ... somewhere? Honestly, I'm not sure how this solves it - I've just debugged enough weird directory issues with Docker in my professional career that it triggered my spidey senses.&lt;/p&gt;
&lt;p&gt;Making that change and pushing to &lt;code&gt;master&lt;/code&gt; will trigger a rebuild. Then, as if by magic, our app is working at the link:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/deploy-railway-blazor-success.png" alt="Deploy Repo in Railway" /&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Despite a few bumps in the road (which, apart from the content root path issue, make sense in context) we were able to get two .NET apps deployed in no time and with no money! In future, I think we'll explore adding a database with Railway and hooking our Blazor app up to it.&lt;/p&gt;
&lt;p&gt;I think this is the sort of case where Railway really excells. If you don't have an overly complicated backend system, deploying with Railway is extremely fast, simple, and cheap. Their focus on this area significantly reduces the barrier to entry to get a hobby app out the door. And, it seems that Railway does have enough capability to scale if you do attract users - at least through the first phase or two. Because of these factors, I'll be using Railway to deploy all my hobby apps in the future here! I'm very excited to discover a cloud provider this capable at this price.&lt;/p&gt;
&lt;p&gt;Railway's limitations are very apparent though - such is the tradeoff with the simplicity they've achieved. While you certainly can deploy any container with Railway, an overly complicated backend system could potentially become more burdensome to maintain than not. Really though, I don't know where that boundary is, but I suspect it's decently high enough that even if I do take some pet projects into production properly, I can rely on Railway to be able to serve them adequately.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;You can see my GitHub repos used in this article here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IanWold/RailwayAspApiDemo"&gt;RailwayAspApiDemo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IanWold/RailwayBlazorDemo"&gt;RailwayBlazorDemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.railway.app/"&gt;Railway's documentation&lt;/a&gt; is pretty good, but their &lt;a href="https://discord.com/invite/railway"&gt;Discord server&lt;/a&gt; is an excellent and lively place to get help when you need it.&lt;/p&gt;
</description>
      <pubDate>Tue, 05 Sep 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-09-05T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">develop_effective_coding_standards</guid>
      <link>https://ian.wold.guru/Posts/develop_effective_coding_standards.html</link>
      <title>Develop Effective Coding Standards</title>
      <description>&lt;p&gt;Coding standards can be a blessing or a curse: a practical resource that helps the team consistently maintain their codebases or an overbearing cudgel of impractical formatting prescriptions. Indeed, ineffective coding standards are worse than no coding standards: they are frustrating and can exacerbate any maladies on the team. I'd go so far as to suggest that even &lt;em&gt;effective&lt;/em&gt; coding standards are not a necessity in the industry; many teams might naturally have no need for standards.&lt;/p&gt;
&lt;p&gt;There are several situations where it's beneficial to have a solid set of standards - if the team has a large number of codebases (say, microservices) in various states of disrepair, if the team needs to onboard engineers frequently (say, for intern/junior rotations), or if your team is embarking on a 1+ year refactor of a large, legacy system with too many different styles. These are all situations where good coding standards can help ensure that a whole group of people is aligned over a period of time.&lt;/p&gt;
&lt;p&gt;I'll admit failure on my part here. I have created some godawful coding standards in the past - ones which have an exclusive focus on style that explain nits for twenty pages. I hope I've learned from my younger self, that proper standards are a very different beast. I like to think that since then I've been able to establish some standards which have been quite good. If you take nothing else away from this article, remember that the practice of creating and maintaining standards is an active, full team activity. The whole team should be engaged in developing the standards, and they should be reviewed by the whole team regularly.&lt;/p&gt;
&lt;h1&gt;Less is More&lt;/h1&gt;
&lt;p&gt;Bad coding standards are meandering swamps of useless bloviation. It's not useful to anyone to have fifty pages listing out &amp;quot;Do this, not that&amp;quot; steps. I should be able to skim the standards quite quickly and come away with a solid understanding, if just a feeling, of the way this team wants its code developed.&lt;/p&gt;
&lt;p&gt;Focus on what's truly important. You'll have plenty of &amp;quot;Do this, not that&amp;quot; examples, but use those only to disambiguate where necessary. Explain key, high-level concepts. Avoid getting too far into the weeds of specifics. Your goal should be to lay a solid foundation on top of which any number of beautiful houses can be built.&lt;/p&gt;
&lt;h1&gt;Focus on &amp;quot;Why&amp;quot;&lt;/h1&gt;
&lt;p&gt;Prescribing rules for coding is generally useless. They are annoying and can get out of date quickly, so they end up ignored in the long run. They get overlooked on review because they fade into the background when the document is in active use.&lt;/p&gt;
&lt;p&gt;What's more important - 1000 times more important - is to document why your team feels a certain way. Suppose your team prefers having a strong emphasis on being able to read your code more vertically than horizontally. You might want one rule to limit the width of the document, one rule to format ternaries on multiple lines, one rule to break conjunctions in conditionals on multiple lines, etc. Rather than stating each of these individually, they can be examples in the broader context of verticality.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;## Prefer Verticality

This team prefers writing code in a way that makes it more _vertical_ than _horizontal_. Run-on lines tend to be more difficult to read given our domain and architecture. As a consequence, the team is able to read code faster when it's consistently formatted vertically. We like to limit the horizonal width to 80 characters, and break code into multiple lines in logical places. For example:

**Use multi-line ternaries**

Do not prefer:

var myThing = first &amp;gt;= 50 ? first : second;

Do prefer:

var myThing = 
    first &amp;gt;= 50
    ? first
    : second;

**Break long conditions into multiple lines**

Do not prefer:

if (thingToCheck is SomeThing someThingToCheck &amp;amp;&amp;amp; service.CheckSomeThing(someThingToCheck) &amp;amp;&amp;amp; businessConditionForNextLogic &amp;amp;&amp;amp; featureFlagConditionForNextLogic)

Do prefer:

if (
    thingToCheck is SomeThing someThingToCheck
    &amp;amp;&amp;amp; service.CheckSomeThing(someThingToCheck)
    &amp;amp;&amp;amp; businessConditionForNextLogic
    &amp;amp;&amp;amp; featureFlagConditionForNextLogic
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By explaining why, you're giving everyone an insight as to what the team feels, not just the result of their feelings. You don't need to enumerate every single rule that follows from that feeling since you've (hopefully) articulated the &lt;em&gt;why&lt;/em&gt;. It's easier to refactor these statements as your team's feelings shift since you've written &lt;em&gt;those feelings&lt;/em&gt; down - the consequences might be harder to grasp.&lt;/p&gt;
&lt;h1&gt;Continuous Learning, Continuous Improvement&lt;/h1&gt;
&lt;p&gt;I hope that you and your teammates are learning constantly, and always becoming better engineers. As your team changes, its opinions on how code should be developed will change too. This should be reflected by continuous reviews of the coding standards. First though, you need some way to capture &lt;em&gt;that&lt;/em&gt; you're learning and &lt;em&gt;what&lt;/em&gt; you've learned.&lt;/p&gt;
&lt;p&gt;Retros are the obvious candidate - a &amp;quot;What did you learn in the last two weeks?&amp;quot; question is great. It's less useful for capturing changes in your coding disposition over time though. Monthly or quarterly learning check-ins can be good for these, but whether that works for your team to adequately capture those and translate them into changes in this document are an individual question.&lt;/p&gt;
&lt;p&gt;Your team should establish some periodicity by which it reviews all of its documentation, and your coding standards should be part of that. This can be monthly, quarterly, or yearly - just what works for you. Importantly though, consider starting these off by asking everyone on the team what they learned in that time. Did they experience anything cool or interesting, out of their usual development practice? Are they excited by something new they saw they wanted to try?&lt;/p&gt;
&lt;p&gt;However you collect it, document learnings and use them to drive the review of the coding standards. This feeds back on explaining the &lt;em&gt;why&lt;/em&gt; and not the &lt;em&gt;what&lt;/em&gt; in the document itself.&lt;/p&gt;
&lt;h1&gt;Coding Standards Affect Culture&lt;/h1&gt;
&lt;p&gt;If the standards are too nitpicky, you'll start seeing too many nits in code reviews. If the standards are too prescriptive, you'll see fewer creative ideas in the codebase. If the standards don't embrace new features, libraries, or architectures, your codebase will be stuck in the past. Maybe these are actually effects that you want - perhaps you're maintaining a large COBOL platform, and modernization will halve your paycheck. Fair enough.&lt;/p&gt;
&lt;p&gt;For the rest of us, I'd venture that we want to work on exciting, collaborative teams that encourage using new ideas to continuously refine the code. If you've got effective standards that the team is actively using, these standards need to be an example of the kind of culture you want to work in.&lt;/p&gt;
&lt;p&gt;By developing the standards themselves collaboratively, this will cause the team to develop more collaboratively. By keeping standards focused on the &lt;em&gt;why&lt;/em&gt;, PR reviews and pair programming sessions will have a focus on &lt;em&gt;why&lt;/em&gt;. If your standards allow for variance within the parameters your team must work (business requirements, etc) then your team's solution space will be as wide as possible. If you review and improve your standards at intervals where you can incorporate the latest new features of your language or libraries - for example if you're a .NET team and you review standards every November after each .NET/C# release - your team too will incorporate more of the latest features.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Are coding standards necessary? No, at least not for everyone. If your team isn't going to use the standards, don't create any. If the team isn't engaged in developing the standards, then you'll probably get subpar standards. Remember, unless you've got effective standards it's better to not have any. If your team is in a pinch where they decide they need to align on coding practice, then having concise standards to document its feelings can be beneficial. Develop the standards and review them constantly from a collaborative perspective, and focus on documenting your feelings with a small number of key examples.&lt;/p&gt;
&lt;p&gt;But how do we use these standards once we've written them? Well, curiously, you might not. If you're onboarding a new member of the team or explaining yourselves to another engineer in your organization, you should break out these standards to show off how the team feels. But if your team is really aligned on development practice - as it should be after developing a set of standards - then you and your teammates won't need them, not day-to-day. Standards can't be used as a cudgel to enforce conformity, that creates resentment and disfunction on the team.&lt;/p&gt;
&lt;p&gt;Don't take this to mean they're not useful at this point - indeed it's the very process of continuously reviewing this document that keeps your team aligned and allows everyone to update and refresh their ideas on the same page. It's curious - the primary utility of the document is not the document itself or the regular use of the document, but the regular and ongoing development of the document as a team.&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-14T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">eight_maxims</guid>
      <link>https://ian.wold.guru/Posts/eight_maxims.html</link>
      <title>Eight Maxims</title>
      <description>&lt;p&gt;&lt;strong&gt;Less is More&lt;/strong&gt; Write less code, use fewer abstractions, be simple and concise. Complexity is easy, simplicity is hard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diff Your Commits&lt;/strong&gt; Read your own code before you commit it, before you PR it, and after you merge it. Keep your code tidy and clear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Document Why, not How&lt;/strong&gt; I can (usually) figure out how to use your code. I can (usually) never figure out why you wrote it that way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collaborating over Coding&lt;/strong&gt; Software Engineering is 9 parts collaboration and 1 part coding. Be approachable and helpful, reach out to others often.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Respect Legacy Code&lt;/strong&gt; There is much wisdom in legacy code. Understand before judging, embrace before extinguishing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Learning/Continuous Improvement&lt;/strong&gt; Always learn, always try new things, always be open-minded.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Embrace Change&lt;/strong&gt; Change is the only constant. Expect it, embrace it, and code for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lift Everyone Up&lt;/strong&gt; Share knowledge openly, celebrate accomplishments, support and mentor freely. You grow the most when you help others grow.&lt;/p&gt;
</description>
      <pubDate>Wed, 17 Jan 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-01-17T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">four_deeply_ingrained_csharp_cliches</guid>
      <link>https://ian.wold.guru/Posts/four_deeply_ingrained_csharp_cliches.html</link>
      <title>Four Deeply-Ingrained C# Cliches</title>
      <description>&lt;p&gt;There's a lot to love about C# and .NET, and there are some things that I don't love as much. Then there are four bad habbits that are so deeply ingrained they've become cliches within our codebases. Despite being obviously bad practices, their ubiquity seems to force them into our codebases in spite of our knowing better. When fighting the battle against &lt;a href="https://grugbrain.dev/"&gt;complexity spirit demon&lt;/a&gt; it's easy to tire and allow these to slip through, perhaps justified by their disarming commonality.&lt;/p&gt;
&lt;p&gt;It's not as though these subjects haven't been written about before, but that they are still practiced in spite of our best efforts to craft well-written code. I think it's useful to call these four out, and I want to propose alternative solutions with which I have found success in the past. Take my solutions with a grain of salt if you will, but do have a think about a better alternative yourself. These cliches have plagued too many codebases, creating spaghettiable (is that a word?) code and exposing too many bug vectors.&lt;/p&gt;
&lt;h1&gt;Interfaces&lt;/h1&gt;
&lt;p&gt;Interfaces are critically overused &lt;em&gt;and&lt;/em&gt; misused. When I open a C# codebase I can guarantee I'll be treated to a whole host of interfaces that have exactly one implementation. Maybe they'll also be mocked in 200 different unit tests. I know I'll be treated to files that have classes so simple they haven't changed in five years, yet there's an interface right at the top for this class exposing the single public method. I know I'll find at least one (usually many) empty interfaces, and I'm always on the edge of my seat to find how much runtime reflection there is referencing the empty &lt;code&gt;IModel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What's going wrong here? I think we've forgotten the utility that interfaces have for us, yet interfaces are almost entirely necessary when developing even relatively simple production applications. Interfaces should be used to represent meaningful, coherent abstractions or capabilities relevant to your domain, and only used when there is a clear need for abstraction and/or polymorphism. One benefit gained by interfaces is to allow for multiple class implementations, facilitating class swapping, refactor testing, decorator pattern, or testing fakes. A (maybe better) benefit comes from the ability to assign multiple abstract concepts to a single concrete class, a la the Liskov principle.&lt;/p&gt;
&lt;p&gt;Often though we find a one-interface-per-class rule in C# codebases, which eliminates or outright ignores a fair set of benefits. How can any of us claim our C# code is SOLID if we restrict ourselves away from even being able to use the Liskov principle? Sure, we don't need to adhere to Liskov religiously, but it's a good heuristic to help judge when to use an interface. If they're only mirroring the class structure, they're unnecessary. In these cases the code is better without these interfaces. If you do need to swap the class in a future refactor, you can create an interface then; it's dead weight to live in the code in the meantime. If you need to rely on the interface for mocks or fakes for unit tests, there's a good chance you're testing wrong and you should think about that too.&lt;/p&gt;
&lt;p&gt;As an example, consider the following example which we have each encountered several thousand times:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IMailChimpFacadeEmailService { ... }

public class MailChimpFacadeEmailService : IMailChimpFacadeEmailService { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there is almost never an &lt;code&gt;IEmailService&lt;/code&gt; to be found! In this case we're usually better just deleting &lt;code&gt;IMailChimpFacadeEmailService&lt;/code&gt;, but in the cases where the interface abstraction is necessary then replacing &lt;code&gt;IMailChimpFacadeEmailService&lt;/code&gt; with &lt;code&gt;IEmailService&lt;/code&gt; is entirely appropriate.&lt;/p&gt;
&lt;p&gt;Empty interfaces should be deleted outright. But how will we reflect on our models without an empty &lt;code&gt;IModel&lt;/code&gt; interface? Well, we probably shouldn't reflect on them, especially not after startup time. A lot of legitimate uses can be replaced by source generators here. These empty interfaces really grind my gears; they pollute my code and make me sad.&lt;/p&gt;
&lt;h1&gt;Abstractions&lt;/h1&gt;
&lt;p&gt;Overusing abstractions isn't a sin that's endemic to C# codebases specifically; it's across the entire industry. There's an interesting observation to be made that the incidence rate of overused abstractions tends to directly correspond with the number of software engineers involved in the team or company which owns that code - when we have time to kill at work, we tend to &lt;em&gt;work&lt;/em&gt;. Abstractions are inherently complex, and we should strive to create simple code. The trouble is that abstractions can increase the flexibility of code, so they're also essential tools. The prevailing wisdom is that abstractions should be used sparingly and when necessary, and nobody (not even me) can define when it's necessary to abstract.&lt;/p&gt;
&lt;p&gt;One common find in C# codebases is the passthrough layer - often the repository layer. Indeed, gone are the days of the Data Access Layer, we now have the Repository Layer, named after the pattern. This layer is often a passthrough to Entity Framework (EF, like most ORMs, already implements the repository pattern), to service layers which contact external services, or both. Whether it's a repository layer or not, passthrough layers are, I think universally agreed, incredibly annoying.&lt;/p&gt;
&lt;p&gt;These layers add no value, they don't provide modularity, and often hinder scalability. Demonstrably, they add to development time. Kill these layers, even if they cause you to have to rethink your architectural approach.&lt;/p&gt;
&lt;p&gt;Overall, I would say that an abstraction should clearly and demonstrably add distinct value or functionality. If you can't explain the value-add in one simple sentence, you've probably missed the mark. Architectural abstractions should specifically enhance modularity, scalability, or separation of concerns in a beneficial and articulable way. When refactoring (which ought be a constant practice), pay particular attention to abstractions. Celebrate when you can remove an abstraction, and always prefer clear, readable, imperative or procedural code over abstractions where the benefit of the latter is tenuous.&lt;/p&gt;
&lt;h1&gt;Exceptions&lt;/h1&gt;
&lt;p&gt;There's a lot that's been written about the ills of exceptions, and I think the negativity associated with them is maybe a bit exaggerated. One concept which I think is overlooked is the &lt;a href="https://joeduffyblog.com/2016/02/07/the-error-model/"&gt;two-pronged error model&lt;/a&gt;; that there are some errors which need to be handled immediately, and then others which require an interruption to the control flow. The fact of the matter is that exceptions satisfy the use cases for the latter - the truly &lt;em&gt;exceptional&lt;/em&gt; scenarios. We get into trouble however when we start relying on exceptions for all of our error handling.&lt;/p&gt;
&lt;p&gt;The blame for this one definitely falls first on the C# language - it really only natively supports exceptions and there's still not a great way to create and consume a robust result or option monad (discriminated unions when). That said, one of the variants of the result pattern are better for the former sort of error. If you can encapsulate the result of your operations - particularly your data access and business operations - in such a way that the resulting value can't be accessed without a success check, then you'll be guarding the consuming code against abusing your method - you'll be making your contract more explicit.&lt;/p&gt;
&lt;p&gt;Here's a simple result object for C# that uses the try pattern to do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Result&amp;lt;T&amp;gt;
{
    private bool isSuccess;
    private T? value;

    private Result(bool isSuccess, T? value)
    {
        _isSuccess = isSuccess
        _value = value;
    }

    public bool IsSuccess([NotNullWhen(true)]out T? result)
    {
        result = value;
        return isSuccess;
    }

    public static Result&amp;lt;T&amp;gt; Success(T value) =&amp;gt; new(true, value);

    public static Result&amp;lt;T&amp;gt; Failure() =&amp;gt; new(false, default);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can't consume the value unless I make a check now:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var itemResult = GetItem();
if (!itemResult.IsSuccess(out var item))
{
    // handle error case
    return;
}

item.DoSomething();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other bad aspect of exceptions comes when we start using them for situations that aren't even errors. It takes very little ingenuity - disappointingly little, even - to adapt exceptions as Malbolge's new &lt;code&gt;goto&lt;/code&gt;. It isn't uncommon to see this in codebases, especially in library or utility logic, where some non-happy-path, yet non-error, scenario will throw, expecting to be caught &lt;em&gt;somewhere&lt;/em&gt;. Sometimes this is code that merely lacks the most basic consideration (say, an email validator that throws if the string is empty instead of returning the validation error).&lt;/p&gt;
&lt;p&gt;Other times this is entirely intentional, given very careful consideration in the entirely wrong direction. A great example is the &lt;code&gt;IDataReader&lt;/code&gt; from &lt;code&gt;Microsoft.SqlClient&lt;/code&gt; - if I want to access a column that doesn't exist (i.e. &lt;code&gt;dataReader[&amp;quot;some_column&amp;quot;]&lt;/code&gt;) it throws! Maybe that would made sense if they implemented a &lt;code&gt;TryGetValue&lt;/code&gt; or &lt;code&gt;ContainsColumn&lt;/code&gt;, but they did neither. The problem is so onerous because the contract for this object is that I am &lt;em&gt;supposed&lt;/em&gt; to use try/catch here to poll for maybe-extant columns.&lt;/p&gt;
&lt;h1&gt;Unit Tests&lt;/h1&gt;
&lt;p&gt;I'll admit up front here that I'm a unit test hater. Always have been, and aggressively moreso every single time that I have to rewrite 20 unit tests because I just did a minor, non-behavior-altering refactor. Unit tests, as they're currently practiced, are in their ideal form a way to isolate a single method (or &amp;quot;unit&amp;quot;) of code to ensure its contract is respected. There's a lot wrong with this.&lt;/p&gt;
&lt;p&gt;First of all, our unit tests (almost) never live up to this. And it's not a question here of letting perfect be the enemy of good enough, they're so completely far away from this supposed ideal that I don't think it's fair to say they're even &lt;em&gt;trying&lt;/em&gt; to aspire to it. We find unit tests heavily reliant on mocks (or fakes if we're lucky) where methods that don't even make sense to test in isolation are stood up in an almost Frankensteinian manner to prod it with ill-figured test scenarios.&lt;/p&gt;
&lt;p&gt;On top of that, it's rare to find a test that even tests the properties of these methods appropriately. Often times, these tests don't even seem to know what the properties of the methods are they need to test for (a stark contrast to the much more focused discipline of &lt;a href="https://matthewtolman.com/article/what-is-property-testing"&gt;property testing&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;More troubling than either of those is that isolating methods is usually not the best way to test an application. The majority of methods in a business application do not need isolated testing. Rather, the system as a whole needs testing. This ideal of isolating methods to ensure that they adhere to the contracts they establish loses the forest for the trees; contracts can and ought be enforced in the code itself.&lt;/p&gt;
&lt;p&gt;This all culminates in the extremely common deception that our codebases are robust because we have 90% code coverage with thousands of tests that are severely abusing mocks and checking arbitrary input and output values, or call patterns worse yet! This leads to our codebases being so fragile that even small changes require several unnecessary changes across dozens of useless unit tests. And it's entirely missing the point to suggest that this is because unit tests aren't being used correctly. The definition I provided earlier is inherently flawed and leads towards code being developed this way. Mocks or fakes are necessary to set up most classes for testing, and this practice leads to huge swathes of tests which are coupled to the implementations they test.&lt;/p&gt;
&lt;p&gt;You'll be interested to learn then that this definition of a unit test that is so ubiquitous across our industry is entirely wrong. It's a great misunderstanding of the original intent of the &amp;quot;unit test&amp;quot;. I'll link &lt;a href="https://www.youtube.com/watch?v=EZ05e7EMOLM"&gt;this brilliant talk by Ian Cooper&lt;/a&gt; as an in-depth explanation, but it suffices to say that the original intent of the &amp;quot;unit&amp;quot; test was that a &amp;quot;unit&amp;quot; represented some portion of the system which was behaviorally isolated. Perhaps we should be easy on ourselves for having mistaken that to mean &amp;quot;method&amp;quot; but after enduring how many unit test refactors, my charitability is thin.&lt;/p&gt;
&lt;p&gt;Proper behavior tests are sorely underused, often not at all. It's quite typical that codebases will have maybe 95% unit testing and 5% proper behavior testing. This is backwards - when we're developing LOB or product software, the behavior is the most important, not the implementation. The tests &lt;em&gt;need&lt;/em&gt; to be divorced from the implementation in order to properly isolate and test behavior.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;tl;dr:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces are overused and have become almost like header files, mindlessley mirroring the class structures in our codebases. Consider the Liskov principle when creating interfaces, and best yet only use interfaces when they're helping you fulfil a pattern or a meaningful abstraction.&lt;/li&gt;
&lt;li&gt;On the topic of abstractions, they tend to be used too frequently for cases which don't require abstraction. Sometimes it's difficult to see these abstractions enter the codebase over several PRs, so refactor your code frequently and aim to reduce abstractions every time. Prefer writing straightforward imperative or procedural code when possible.&lt;/li&gt;
&lt;li&gt;Exceptions are often used for any kind of error handling and sometimes as extra special &lt;code&gt;goto&lt;/code&gt;s. Only use exceptions for exceptional conditions that require you to break control flow, and consider using some form of the result pattern for error handling.&lt;/li&gt;
&lt;li&gt;Unit tests are the work of the devil; they tend to lead to tests coupled to the implementations they test. Most applications can (and should) be entirely tested with behavioral (integration, e2e) tests instead of unit tests. When you do need to isolate discrete methods or classes for testing, consider whether patterns like property testing would better test the behavior of the method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These cliches lead to code of a lower quality. Sometimes they just make it a bit more tedious to add a feature or change a bit of business logic. Other times, often over time, they create mangled codebases where making progress is like swimming through molasses. Though these are common practices in C# codebases, they don't need to be. I've suggested several alternatives that I've found to be very well worth considering, but you might have your own alternatives instead. What's most important is that we can stop letting these four cliches into our code, and start doing &lt;em&gt;something&lt;/em&gt; more robust.&lt;/p&gt;
</description>
      <pubDate>Sun, 04 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-04T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">giscus_is_awesome</guid>
      <link>https://ian.wold.guru/Posts/giscus_is_awesome.html</link>
      <title>Giscus Is Awesome</title>
      <description>&lt;p&gt;&lt;a href="https://giscus.app/"&gt;giscus.app&lt;/a&gt; is really awesome!&lt;/p&gt;
&lt;p&gt;Last week I posted for the first time in six years and I figured I wanted to see about adding comments to this site. A Google search got me to Giscus really quick, and I was able to wire it up in just ten minutes. The thing that's still blowing my mind is that &lt;em&gt;it works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Behind the scenes, it syncs up with the GitHub Discussions tab on the repo that hosts this website, and it matches a discussion to a page based on the the page's title.&lt;/p&gt;
&lt;p&gt;When somebody adds the first comment to a page, it creates a corresponding discussion thread for the page. When a page loads, it checks to see if there is a corresponding discussion and it loads the conversations from that discussion thread.&lt;/p&gt;
&lt;p&gt;I can do comment moderation and whatnot on GitHub discussions, and if somebody stumbles upon my website on GitHub they can see the conversation right there. If the tool stops working, the conversations still exist in GitHub, living right alongside the source for this site.&lt;/p&gt;
&lt;p&gt;And - I can't emphasis this enough - &lt;em&gt;it just works&lt;/em&gt;. I see so few tools that &lt;em&gt;just work&lt;/em&gt; and this one does.&lt;/p&gt;
&lt;p&gt;Check it out!&lt;/p&gt;
</description>
      <pubDate>Thu, 14 Sep 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-09-14T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">its_better_to_be_consistently_incorrect_than_consistently_correct</guid>
      <link>https://ian.wold.guru/Posts/its_better_to_be_consistently_incorrect_than_consistently_correct.html</link>
      <title>It's Better to be Consistently Incorrect than Inconsistently Correct</title>
      <description>&lt;p&gt;Anyone who has worked with me for any period of time is probably tired of hearing me say this. &amp;quot;It's better to be consistently incorrect than inconsistently correct.&amp;quot; I don't say this to mean that being inconsistent is a good thing; rather, I say this whenever I need to underscore the importance of consistency, almost always with respect to a piece of code. Codebases with established conventions - which consistently adhere to these conventions - are, in my opinion and experience, easier to comprehend and maintain.&lt;/p&gt;
&lt;p&gt;If I'm working in an app that uses the pipeline pattern to chain behaviors everywhere but then throws a random decorator pattern at me for one slice, I'm going to be confused. Maybe scared. Probably both. Either way, I'm paying a lot of attention to that area, and usually for naught. Suppose this hypothetical app has a 2-tier architecture which might genuinely be served better by decorators, as opposed to pipelines, for its use case: the engineer who checked in the decorator for the one slice probably had good reasons for doing so; it very well could be the &amp;quot;correct&amp;quot; solution for this app.&lt;/p&gt;
&lt;p&gt;But this is where I come in with my annoying catchphrase. The app has been established as using pipelines, and pipelines are the consistent answer here. Throwing decorators in instead breaks this consistency, irrespective of the correctness of that solution. Indeed, in a lot of cases these two patterns accomplish the same thing, and the benefits gained by using one over the other are typically minimal. This is where it's more important to adhere to consistency. When I'm in this codebase, I know that I'm going to be treated to a big helping of pipeline. It's better to be consistently incorrect than inconsistently correct.&lt;/p&gt;
&lt;p&gt;What makes code - especially code &lt;em&gt;style&lt;/em&gt; - correct or incorrect? The more fine-grained of &lt;em&gt;thing&lt;/em&gt; we want to call &amp;quot;correct&amp;quot; or &amp;quot;incorrect&amp;quot;, the faster this distinction becomes a matter of personal preference. Pipeline vs decorator pattern is, in simple codebases, almost always a matter of preference. Maybe your debugging tools favor pipelines, maybe you'll write less code with decorators. If we're talking about a simple enough app, the distinction does not become so important as to rise above the level of consistency - pick one and be consistent. If the weight is so far in the favor of one vs the other &lt;em&gt;and&lt;/em&gt; the weight comes down to the opposite one used, then you know that what you need is a refactor, not a fractured codebase.&lt;/p&gt;
&lt;p&gt;Maybe instead I should say &amp;quot;it's better to consistently adhere to established principles in a codebase in spite of your subjective feelings towards them than inconsistently applying your subjective feelings across the codebase,&amp;quot; but that's really a mouthful. Maybe I should say &amp;quot;I don't care about your feelings, consistent patterns are measurable and predictable,&amp;quot; but that comes off as uncaring. I do care about your ideas, I just don't want them making my codebase more difficult to navigate. It's better to be consistently incorrect than inconsistently correct.&lt;/p&gt;
&lt;p&gt;This conversation inevitably brings up the debate over the utility of consistency. I think there's strong examples of universal agreement for situations where consistency is highly valued - we tend to hold naming conventions as being important for a codebase, and using a single build system for projects (in the same language) within the same repo tends to be important. Are there examples of (near) universal agreement among software engineers of consistency being unwelcome? I can think of a few examples that aren't universally held - such as individuals who feel stifled in their creativity in a certain codebase, or when it's annoying that a codebase uses a style or pattern which is perceived as &amp;quot;incorrect&amp;quot;. Ah!&lt;/p&gt;
&lt;p&gt;These are the situations though that I suggest consistency is more valuable; these are the situations where the value judgement is subjective. What is &amp;quot;incorrect&amp;quot; is subjective, but what is &amp;quot;consistent&amp;quot; is usually measurable. If it's not perceivable, measurable, and obvious then it isn't consistency!&lt;/p&gt;
&lt;p&gt;Now here's one situation that's important to consider: when the &lt;em&gt;consistent&lt;/em&gt; thing to do is objectively incapable of satisfying the requirement of the piece of code. There's another saying, not my own, which goes nicely along with the one that I'm explaining here: &amp;quot;Things that behave the same should look the same, and things that behave different should look different.&amp;quot; I think this is hand-in-hand with my idea about consistency. If one piece of code behaves fundamentally different from another piece of code, it shouldn't look similar. The requirement for consistency does not cross this boundary. If we have a layer in our application where each class persists some data on a single database, those should all probably look and act pretty consistently. If we add a layer of classes that contact external services to perform side-effects in the system, those classes should probably look and act a bit different to the persistence layer!&lt;/p&gt;
&lt;p&gt;To take it back to the center though, we all perceive different things as being &amp;quot;correct&amp;quot; or &amp;quot;incorrect&amp;quot; in our code. Objectively incorrect things are bugs and unserved requirements; we fix those. Most of our disagreements are over subjective ideas. We can be tempted to check in code - one class here, one method here - that imposes our subjective ideas of correctness on an unwilling codebase. We should avoid doing this; consistency in style and pattern is an important quality of our codebases.&lt;/p&gt;
&lt;p&gt;It's better to be consistently incorrect than inconsistently correct.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-15T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">just_use_postgresql</guid>
      <link>https://ian.wold.guru/Posts/just_use_postgresql.html</link>
      <title>Just Use PostgreSQL</title>
      <description>&lt;p&gt;There are a lot - and I mean &lt;em&gt;a lot&lt;/em&gt; - of options when you're considering a database to use. Every application has different data, making new, specialized databases interesting to us as potential options; it's often desirable to work with tools that support our specific use cases. More often than not though (heck, the vast majority of the time) storing data is just that - &lt;em&gt;storing data&lt;/em&gt;. Specialization is good but if it's not really needed it's easy to become too constrained or too complex. Not to mention that as requirements change our systems often evolve beyond the constraints we start with, making it a bit tougher to choose a very specialized database.&lt;/p&gt;
&lt;p&gt;I think that for the vast majority of systems, PostgreSQL is the best choice. It is open-source, performant, secure, and supports any data model or pattern you need. It's well-documented for all of its use cases, the tooling ecosystem around it is excellently mature; heck, darn near everything about it is excellently mature. I think it's the easiest database to get started with for just about any use case, and it's able to extend with your requirements more than any other database.&lt;/p&gt;
&lt;p&gt;This is entering opinion territory, but I think that unless you have truly one-of-a-kind requirements, chosing PostgreSQL is the best way to set your new project up for success.&lt;/p&gt;
&lt;h1&gt;PostgreSQL Supports Your Data Model&lt;/h1&gt;
&lt;p&gt;As requirements change, your data model can change for part or all of your application. I don't like being constrained by my database to a single data model or a set of models, and I don't like being shut out from implementing any patterns I need. Sometimes different data needs to be represented differently, or I might need to use different patterns for different domain contexts in my data, while still needing to maintain references between them. Only a system as widely capable and documented as PostgreSQL can allow me to do that.&lt;/p&gt;
&lt;p&gt;Obviously PostgreSQL is a relational database, but it can support any data model you need. Built-in support for JSON data gives you everything you need for a document store. You can code your own solutions or use widely popular extensions for graph or column-family models. You can get quite far with native PostgreSQL, and well-maintained, well-documented, and well-used extensions can get you the rest of the way if you have more complicated requirements.&lt;/p&gt;
&lt;p&gt;Any patterns you can think of are supported as well. Event sourcing, which can particularly complicated, has a lot of documentation. A lot of patterns like versioned schemas or CQRS aren't related to the specific database you choose, but PostgreSQL and its excellent community documentation makes using these patterns effortless.&lt;/p&gt;
&lt;h1&gt;Your PostgreSQL Database can Perform and Scale&lt;/h1&gt;
&lt;p&gt;Especially with reent versions, PostgreSQL offers excellent support for performance tuning, and tools like Citus can make scaling to any size quite easy. That's relatively speaking of course; optimizing any database is necessarily complicated, and distribution is never an easy problem. But PostgreSQL has the tooling, documentation, and maturity to ensure you can get there with your use case.&lt;/p&gt;
&lt;p&gt;Being largely open-source, there's a good chance you can set your PostgreSQL environment up without spending anything on the database system itself - ideally all of your costs can be on your infrastructure providers. Being as popular and long-lived as it is, PostgreSQL can run on just about any infrastructure you might be interested in provisioning for it.&lt;/p&gt;
&lt;h1&gt;Don't Use a Document Database&lt;/h1&gt;
&lt;p&gt;Document databases are excellent for non-relational data. And being fair, there's a huge amount of non-relational data out there, particularly across the maybe millions of microservices we've created. If you ever end up needing to persist relational data though - and this isn't an unlikely change in your future requirements - you'll be in a bit of a pickle. Yes, most document databases can support relational data to a greater or lesser extent, but if you've got relational data you want a &lt;em&gt;relational database&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I think for the vast majority of use cases, PostgreSQL is as capable a document database as any other popular choice. There's even libraries for most languages that allow you to use PostgreSQL with an interface more akin to popular document database drivers. But then when you need to start storing relational data, you can start using PostgreSQL in that capacity without needing to migrate your data to a different system, and without using a database that doesn't naturally support it.&lt;/p&gt;
&lt;h1&gt;When to Not Use PostgreSQL&lt;/h1&gt;
&lt;p&gt;The other databases exist for reasons though, and I don't want to be taken as advocating an exclusively PostgreSQL approach. There are plenty of edge scenarios where you'll want a different database, but I caution that these scenarios are &lt;em&gt;very much the exception&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you need to serve extremely high volumes of high-performant real-time analytics, BigQuery probably makes sense over PostgreSQL. If your application absolutely requires the highest write throughput that humanity's capabilities can muster, then a document database or KV database optimized for writes will outperform PostgreSQL. Similarly, if you're handling truly planet-scale amounts of data (many petabytes) then you should probably be reading other blogs altogether, actually.&lt;/p&gt;
&lt;p&gt;The case you're more likely to encounter (note I did not say you're likely to encounter, just that it's more likely) is when your application - say, a microservice - is uniquely, wholy (not partly), and inextricably reliant upon the specific data structures, patterns, or capabilities offered by an alternate, specialized database. I caution you to re-read the qualifiers I put on that statement: uniquely, wholy, and inextricably. If your data is mixed model or paradigm, it probably makes sense to have it all in a PostgreSQL database. If you need referential integrity between the data in the different models, then it definitely makes sense to keep it in PostgreSQL. But Elasticsearch is spectacular if you've got a microservice exclusively for complex searches, and EventStoreDb is great if you've got a state machine microservice (do those exist?).&lt;/p&gt;
&lt;h1&gt;But Really, Just Use PostgreSQL&lt;/h1&gt;
&lt;p&gt;Those edge cases truly are at the edge of what we need to support. The overwhelming set of persitence needs for our systems is well-handled by PostgreSQL. The majority of scenarios that are supported are extremely well supported, and PostgreSQL will be very competent for everything else.&lt;/p&gt;
</description>
      <pubDate>Sat, 13 Jan 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-01-13T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">monokai_gray</guid>
      <link>https://ian.wold.guru/Posts/monokai_gray.html</link>
      <title>Monokai Gray</title>
      <description>&lt;p&gt;About a week (?) or so ago I hashed out a quick Sublime Text color scheme called Monokai Gray. I did so because I desperately love Monokai and I love the &lt;a href="https://sublime.wbond.net/packages/Wombat%20Theme"&gt;Wombat Theme&lt;/a&gt; as well. Unfortunately, I couldn't use Monokai with Wombat (without throwing up) because the yellowey hue of Monokai clashed with the classy grays of Wombat. Truthfully, I had been using a similar color scheme in Visual Studio for some time (the yellowey background didn't fly there, either). So I copied many of the colors over and prettied it up a tad, and this was the result.&lt;/p&gt;
&lt;p&gt;Here's a preview of what it looks like with some code I got &lt;a href="https://wiki.python.org/moin/SimplePrograms"&gt;here&lt;/a&gt; using the aforementioned Wombat Theme:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://bit.ly/MonokaiGraySample1" alt="Monokai Gray" /&gt;&lt;/p&gt;
&lt;p&gt;If you think it's neat, you can &lt;a href="https://sublime.wbond.net/packages/Monokai%20Gray"&gt;check it out&lt;/a&gt; on Package Control. I love feedback and pull requests alike!&lt;/p&gt;
</description>
      <pubDate>Thu, 05 Dec 2013 00:00:00 Z</pubDate>
      <a10:updated>2013-12-05T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">my_continuing_descent_into_madness</guid>
      <link>https://ian.wold.guru/Posts/my_continuing_descent_into_madness.html</link>
      <title>My (Continuing) Descent Into Madness</title>
      <description>&lt;p&gt;It wasn't that long ago that I tasked myself with updating a few microservice codebases to be able to work on VS Code along with Visual Studio. I really don't like the stock VS Code, so I spent a few hours customizing the colors and moving the explorer to the right. Then I added some custom keybindings so that I could navigate around the IDE efficiently.&lt;/p&gt;
&lt;p&gt;Being clear, VS Code is not the perfect IDE. In fact, there's many things for which VS is better. VS Code is an Electron app, and you can tell even just while typing in it - VS is faster at typing. However, a combination of the customizability and several quality of life features, I became a bit envious of my colleagues who were using VS Code full-time.&lt;/p&gt;
&lt;p&gt;So I decided to try using VS Code full-time.&lt;/p&gt;
&lt;p&gt;Oh, how I should not have started to tweak my environment. Once I opened the first door I've ended up opening them all, tweaking every aspect of my digital life.&lt;/p&gt;
&lt;p&gt;At this point I've completely riced my VS Code. I have custom CSS (via &lt;a href="https://marketplace.visualstudio.com/items?itemName=be5invis.vscode-custom-css%5D"&gt;Custom CSS and JS Loader&lt;/a&gt;) to tweak each little nitpick I have. I've remapped almost all of the keybindings and added plenty of my own. When I use stock VS Code I feel dirty and disgusted, and when my colleagues use my VS Code they feel dirty and disgusted.&lt;/p&gt;
&lt;p&gt;But this wasn't enough for me, I'd found a zeal for getting the most out of my environment, for having every command at my fingertips, for elminating visual clutter from my screen.&lt;/p&gt;
&lt;p&gt;I found myself increasingly, then exclusively, relying on &lt;code&gt;ALT+TAB&lt;/code&gt; to navigate windows. I'd keep my IDE maximized (side note: I should write a script to hit F11 when it starts up), then I started keeping my browser maximized, then everything else. The Windows task bar was just getting in the way now - I took all the pinned applications off it and made Windows hide it from me.&lt;/p&gt;
&lt;p&gt;I don't keep too many windows open at any given time, but &lt;code&gt;ALT+TAB&lt;/code&gt; takes its toll. Wouldn't it be faster if I could map &lt;code&gt;ALT+&amp;lt;Number&amp;gt;&lt;/code&gt; to a window, or an environment?&lt;/p&gt;
&lt;p&gt;The envy I once had for my VS Code colleagues has been replaced by an envy for my Linux colleagues who can use i3 or Qtile. I needed a tiling window manager, but on Windows? In fact, &lt;a href="https://github.com/glazerdesktop/GlazeWM"&gt;yes you can&lt;/a&gt;, yes I did, and yes I riced the hell out of it.&lt;/p&gt;
&lt;p&gt;Not only could I have separate workspaces one &lt;code&gt;ALT+&amp;lt;Number&amp;gt;&lt;/code&gt; away, windows are maximized by default! If you've been using a tiling window manager for some time you know this is routine, but I was new to this world and it only fueled the fire I'd found myself in. My coworkers now joke when I'll switch to Linux. They think it's funny, I fear it might be inevitable.&lt;/p&gt;
&lt;p&gt;I would need icons for my workspaces of course, and Glaze recommends using &lt;a href="https://www.nerdfonts.com/"&gt;Nerd Fonts&lt;/a&gt; for this. I'd resisted installing one of these for so many years. What's wrong with good old Consolas? Am I going to become one of those dweebs with all the glyphs in their code?&lt;/p&gt;
&lt;p&gt;Yes, yes I did. And I have pretty icons for my workspaces. And once you give an engineer a nerd font I suppose it's only a matter of time (hours, in my case) that &lt;a href="https://ohmyposh.dev/"&gt;Oh My Posh&lt;/a&gt; sneaks its way in. My Powershell is now gorgeous.&lt;/p&gt;
&lt;p&gt;Like a frog in boiling water, this has all happened to me gradually and I barely registered this transformation. I would come across an extension like &lt;a href="https://marketplace.visualstudio.com/items?itemName=Katsute.code-background%5D"&gt;Background&lt;/a&gt; for VS Code and install it, not thinking twice that now all of my code has pretty space images behind it. But I need to acknowledge it now, lest you too might fall into this trap.&lt;/p&gt;
&lt;p&gt;I've gone mad and I see no end in sight. Will I start using Arch? Will I switch to Neovim? Will I take a job writing Haskell whitepapers? I do not know.&lt;/p&gt;
</description>
      <pubDate>Sat, 09 Dec 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-12-09T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">on_task_priority</guid>
      <link>https://ian.wold.guru/Posts/on_task_priority.html</link>
      <title>On Task Priority</title>
      <description>&lt;p&gt;I don't know of a lot of successful software projects that don't have some sort of list of tasks defined. Unless you've found some magical, outlying case, we need to define our work before we can do it. This usually takes the form of a kanban board where tasks are &amp;quot;cards&amp;quot;, or at the very least tasks are defined in rows in a spreadsheet.&lt;/p&gt;
&lt;p&gt;Naturally, these tasks have priority. This isn't just useful so that I know which task to pick up next when I'm done with my current one - we usually have milestones or objectives we need to meet in our development and organizing that gives priority to the tasks. Tasks and priorities are absolutely necessary, so we slap a tshirt size on our cards, keep them ordered with higher priority at the top of the list, and consistently reevaluate priorities to keep everyone aligned, right? Right?&lt;/p&gt;
&lt;p&gt;The trouble, as with most things in software engineering, comes from the fact that this field is filled with software engineers. Maybe one day we'll be able to do something about that root cause, but until then we'll have to deal with it. In this case it's that we software engineers can't help but organize, systematize, and insert-your-word-here-ize every problem we find. We do tend to over-engineer, and boy is task priority the sort of thing we tend to over-engineer. I want to take a look here at the best practices.&lt;/p&gt;
&lt;h1&gt;Maintain Alignment&lt;/h1&gt;
&lt;p&gt;The priority of a task is directly tied to the definition of the task and the goals of the project, and none of the variables are static. They change by the day, and sometimes by the hour. Each of these three are essential for an entire team to understand about a project, and everyone needs to be on the same page. This is the most important thing to recognize about task priority.&lt;/p&gt;
&lt;h2&gt;Reevaluate Often&lt;/h2&gt;
&lt;p&gt;Every single time we meet with stakeholders, the project changes. Sometimes dramatically. This is a feature, not a bug; we want to have the tightest loop we can between delivering value and incorporating feedback. This feedback always changes priorities. Features get reconsidered, bugs get discovered, milestones move.&lt;/p&gt;
&lt;p&gt;The ramification is that priorities change to adapt to this, and as long as priorities are being documented they need to be revisited and revised when these parameters change. This is an opportunity to make sure the stakeholders and the team are aligned. Ask questions in terms of priority, and document and clarify &lt;em&gt;why&lt;/em&gt; tasks have the priority they do.&lt;/p&gt;
&lt;h2&gt;Organize Tasks by Priority&lt;/h2&gt;
&lt;p&gt;This is as simple as keeping them at the top of whatever shared list the team has. It seems obvious to read, but it's often overlooked. How many times have we found an errant &amp;quot;high&amp;quot; priority task that's been at the bottom of a backlog for twenty sprints?&lt;/p&gt;
&lt;p&gt;Reorganization should be part of reevaluation. Often times tasks will be assigned one of a small number of priority options; in this case there are several tasks with &amp;quot;high&amp;quot;, &amp;quot;medium&amp;quot;, or whichever priority labels you have. This doesn't tell the whole story though - the team might have different goals this week or sprint. Maybe some milestone is more pressing and its related tasks should be considered first. These fine-grained priority assignments are best encoded and documented by keeping the task list in order of priority.&lt;/p&gt;
&lt;h1&gt;Assign Meaningful Priority&lt;/h1&gt;
&lt;p&gt;Priority has meaning to everyone - the stakeholders, team members, and even users sometimes. All of these people need to be kept in alignment about priority, and so some kind of common language is needed. The priority needs to be meaningful to everyone involved, and the meaning needs to be the same for everyone across the board. This is extremely difficult to achieve since very few of us have developed adequate skills in telepathy.&lt;/p&gt;
&lt;p&gt;The most important thing is to keep priority limited to a very small number of generic words. 3-5 is ideal. If you're able to get away with just 2, that's spectacular. Consider that each additional priority category &lt;em&gt;doubles&lt;/em&gt; the chance for confusion for each individual that needs to be aligned on priority. If you have 15 priority categories ranging from &amp;quot;no priority&amp;quot; to &amp;quot;EVERYONE SWARM NOW&amp;quot; then nobody is going to understand anything, math being what it is (trust me, I ran the numbers).&lt;/p&gt;
&lt;h2&gt;&amp;quot;Highest&amp;quot; and &amp;quot;Lowest&amp;quot; Have no Meaning&lt;/h2&gt;
&lt;p&gt;Taking the common tshirt-size priority list of &amp;quot;high&amp;quot;, &amp;quot;medium&amp;quot;, and &amp;quot;low&amp;quot;, it's quite common to want to tack on &amp;quot;highest&amp;quot; for a catastrophic situation and &amp;quot;lowest&amp;quot; for a backburner want-to-have. I understand the inclination, but there really is no meaning here.&lt;/p&gt;
&lt;p&gt;For &amp;quot;lowest&amp;quot; priority items, why even have it on your set of tasks? if this is something that your team &lt;em&gt;is&lt;/em&gt; going to do, then it should be understood in the context of the whole project and have a proper priority. If it's a wishful thought or a pipedream of one of the engineers (what this category is typically used for) then it's not a part of the project and it's wasting valuable space. Get rid of it.&lt;/p&gt;
&lt;p&gt;Similarly, if I really get an incident that requires immediate intervention, I'm not going to create a &amp;quot;highest&amp;quot; priority card for it. I'm getting everyone on a Zoom call, starting an incident document, and fixing the issue. &amp;quot;Highest&amp;quot; priority cards lag around because some individual needed to be placated that we're definitely considering this one as important. This is a misalignment, and it should be addressed as such. Everyone should have the same idea as to what we're marching towards.&lt;/p&gt;
&lt;h2&gt;Don't use &amp;quot;Medium&amp;quot;&lt;/h2&gt;
&lt;p&gt;No, really! Just like &amp;quot;highest&amp;quot; and &amp;quot;lowest&amp;quot;, this one ends up having no meaning. Using tshirt sizes, &amp;quot;medium&amp;quot; becomes the priority for 90% of all tasks - when someone creates a task they don't want to upset the boat by choosing &amp;quot;high&amp;quot;, but they definitely want it done so they're not going to select &amp;quot;low&amp;quot;. Instead, they use &amp;quot;medium&amp;quot; as the default &amp;quot;pffft, don't know don't care&amp;quot; option, tell the PM, then the PM doesn't reassign priority because they don't understand the full scope of why refactoring the &lt;code&gt;IDoSomething&lt;/code&gt; interface is really needed at this stage.&lt;/p&gt;
&lt;p&gt;A &amp;quot;medium&amp;quot; priority becomes a dumping ground for all tasks and leads to a situation where the &lt;em&gt;true&lt;/em&gt; priority never gets documented because everything is &amp;quot;medium&amp;quot;. This is a major source for misalignment acorss the entire team. Instead, my preferred set of priorities is &amp;quot;high&amp;quot;, &amp;quot;higher&amp;quot;, and &amp;quot;lower&amp;quot;. This forces us to consider whether it's more or less important, and recognizes that most tasks on the board are there because they have some heightened priority. For ideas or far-off things, I would suggest keeping a separate, non-prioritized list for documentation purposes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/priority.png" alt="Assigning Priority" /&gt;&lt;/p&gt;
&lt;h1&gt;Beyond Priority&lt;/h1&gt;
&lt;p&gt;Priority is, for most of our projects, a simplified capture of many different complicated factors about our tasks - the perceived need of different groups of stakeholders, the hopes and wants of the development team, and the unkowns of new technologies or complicated use cases. In some projects however, things are more clear-cut. There might only be a single, contiguous group of users, or the focus might be so constrained as to be relatively obvious to all the parties involved.&lt;/p&gt;
&lt;p&gt;In these cases it could be that priority is actually too ambiguous, and measuring other factors might serve us better in terms of understanding task order and importance.&lt;/p&gt;
&lt;h2&gt;Impact&lt;/h2&gt;
&lt;p&gt;If the project as a whole is addressing a specific use case or need, it might be useful to measure tasks in terms of &lt;em&gt;customer impact&lt;/em&gt; and &lt;em&gt;business impact&lt;/em&gt;. You can use the modified tshirt sizes of &amp;quot;high&amp;quot;, &amp;quot;higher&amp;quot;, and &amp;quot;lower&amp;quot;, or you can just use &amp;quot;high&amp;quot; and &amp;quot;low&amp;quot; for each. By focusing on the different aspects of priority, this can greatly simplify the priority assigning process and make the documentation more meaningful.&lt;/p&gt;
&lt;p&gt;The types of impact can be varied depending on the project type as well - if the project is a heavy refactor then &lt;em&gt;team impact&lt;/em&gt; or &lt;em&gt;codebase impact&lt;/em&gt; might be good inclusions.&lt;/p&gt;
&lt;h2&gt;Necessity&lt;/h2&gt;
&lt;p&gt;When the project is narrowly defined but has several different and/or disparate groups of stakeholders, defining the priority of a task instead by its necessity for different kinds of stakeholders can be the best option. Again, the modified tshirt sizes or just &amp;quot;high&amp;quot; and &amp;quot;low&amp;quot; can be used here.&lt;/p&gt;
&lt;p&gt;The broader idea is to think about what kinds of divisions the definition of &lt;em&gt;your&lt;/em&gt; project has, and to consider breaking priority out along those lines. By making &amp;quot;priority&amp;quot; a more concrete concept, it will be easier to assign and reevaluate priority, and it will be more meaningful for everyone who needs to be aligned on it.&lt;/p&gt;
</description>
      <pubDate>Sun, 03 Mar 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-03-03T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">quick_and_dirty_sequential_ids_in_mongo</guid>
      <link>https://ian.wold.guru/Posts/quick_and_dirty_sequential_ids_in_mongo.html</link>
      <title>Quick &amp; Dirty Sequential IDs in MongoDB</title>
      <description>&lt;p&gt;That Mongo doesn't natively support sequential IDs is one of the many knocks against it. Sure, you &lt;em&gt;should&lt;/em&gt; be using GUID IDs in Mongo, but suppose you're working on a microservices conversion and you have a legacy mainframe that needs to be able to know what your objects are? If you're content just using Atlas, you can create a counter collection and add a trigger for auto-incrementing IDs &lt;a href="https://www.mongodb.com/basics/mongodb-auto-increment"&gt;fairly easily&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suppose however that you can't use a pure Atlas solution - you'll need to implement this logic yourself in your own code. If you happen to be working in a microservices environment you have concurrency concerns - there might be multiple shards of your database and/or multiple replicas of your microservice.&lt;/p&gt;
&lt;p&gt;Is a primary key generator really the sort of thing you want &amp;quot;quick and dirty&amp;quot;? Probably not. Am I doing it in prod? Yes.&lt;/p&gt;
&lt;h1&gt;Updating a counter collection&lt;/h1&gt;
&lt;p&gt;As a prerequisite, ensure you have the Mongo driver:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;go get go.mongodb.org/mongo-driver/mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just as Mongo's tutorial for Atlas recommends, we'll implement a counter collection. This collection will contain one document per &amp;quot;kind&amp;quot; of ID we need to generate. If you have just one object that needs sequential IDs, then you'll only have one document in this collection. We'll represent this collection document with a struct. It only needs one field, &lt;code&gt;sequence&lt;/code&gt;, which will represent the latest ID generated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoCounterDocument struct {
    sequence int `bson:&amp;quot;sequence&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ID of each document in the collection should be a string you hardcode or keep in a settings file (such as &lt;code&gt;&amp;quot;personIdCounter&amp;quot;&lt;/code&gt;), and doesn't need to be in the document struct. Instead, we'll encapsulate that in a generator struct along with a reference to the collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the functionality to generate the next ID, we'll use the &lt;code&gt;FindOneAndUpdate&lt;/code&gt; operation to increment &lt;code&gt;sequence&lt;/code&gt; and return the new ID to us. We can specify a couple options here: we can upsert the document so that it will be created automatically if one isn't there for us (useful for integration tests), and we can specify that we want the operation to read and return us a copy of the document &lt;em&gt;after&lt;/em&gt; the update has taken place.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func (generator *MongoIdGenerator) GetNextId() (int, error) {
    filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
    update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: 1)}
    options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

    var updatedDocument MongoIdCounter

    err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
    if err != nil {
        return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
    }

    return updatedDocument.sequence, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;FindOneAndUpdate&lt;/code&gt; is atomic and shouldn't have any concurrency concerns so long as you &lt;strong&gt;do not shard the counter collection&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;But I don't want to have to hit Mongo every time I want a new id&lt;/h1&gt;
&lt;p&gt;Huh, you and I think alike, I didn't either! To get around this, we can have our app generate multiple IDs each time it hits Mongo and use these IDs until it runs out locally.&lt;/p&gt;
&lt;p&gt;With this approach you have the concern that if your app is spinning up and tearing down too frequently, you'll start losing IDs in the mix. There are various strategies to mitigate this, such as retrieving a small number of IDs from Mongo each time or persisting the cache of IDs, but I'm not going to get into those here.&lt;/p&gt;
&lt;p&gt;We'll add &lt;code&gt;nextId&lt;/code&gt; and &lt;code&gt;maxId&lt;/code&gt; properties to the generator object, as well as an increment field to specify how many IDs we should generate each time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int // [tl! ++]
    nextId            int // [tl! ++]
    maxId             int // [tl! ++]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll add a func to instantiate this at startup. It'll be important that your app only has one of these objects per &amp;quot;kind&amp;quot; of ID you need to generate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func SetupMongoIdGenerator(collection *mongo.Collection, documentId string) *MongoIdGenerator {
    return $MongoIdGenerator{
        counterCollection   : collection,
        counterDocumentId   : documentId,
        // Adjust this up or down depending on how many IDs you want to generate at once:
        incrementBy         : 25,
        nextId              : 0,
        maxId               : 0
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can update our &lt;code&gt;GetNextId&lt;/code&gt; function to consult Mongo or not if &lt;code&gt;nextId&lt;/code&gt; equals &lt;code&gt;maxId&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func (generator *MongoIdGenerator) GetNextId() (int, error) {
    if generator.nextId == generator.maxId { // [tl! ++]
        filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
        update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: generator.incrementBy)}
        options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

        var updatedDocument MongoIdCounter

        err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
        if err != nil {
            return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
        }

        generator.nextId = updatedDocument.sequence - incrementBy // [tl! ++]
        generator.maxId = updatedDocument.sequence // [tl! ++]
    } // [tl! ++]

    return updatedDocument.sequence, nil // [tl! --]
    generator.nextId += 1 // [tl! ++]
    return generator.nextId, nil // [tl! ++]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do have a concurrency concern here though - we want to ensure &lt;code&gt;nextId&lt;/code&gt; and &lt;code&gt;maxId&lt;/code&gt; are only being accessed one at a time. We can use a mutex in the generator for this. Update the generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int
    nextId            int
    maxId             int
    mutex             sync.Mutex // [tl! ++]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add the following two to the beginning of &lt;code&gt;GetNextId&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;func (generator *MongoIdGenerator) GetNextId() (int, error) {
    generator.mutex.Lock() // [tl! ++ **]
    defer generator.mutex.Unlock() // [tl! ++ **]

    if generator.nextId == generator.maxId {
        filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
        update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: generator.incrementBy)}
        options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

        var updatedDocument MongoIdCounter

        err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
        if err != nil {
            return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
        }

        generator.nextId = updatedDocument.sequence - incrementBy
        generator.maxId = updatedDocument.sequence
    }

    generator.nextId += 1
    return generator.nextId, nil
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be that! Here's the final code all together:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-go"&gt;type MongoCounterDocument struct {
    sequence int `bson:&amp;quot;sequence&amp;quot;`
}

type MongoIdGenerator struct {
    counterCollection *mongo.Collection
    counterDocumentId string
    incrementBy       int
    nextId            int
    maxId             int
    mutex             sync.Mutex
}

func SetupMongoIdGenerator(collection *mongo.Collection, documentId string) *MongoIdGenerator {
    return $MongoIdGenerator{
        counterCollection   : collection,
        counterDocumentId   : documentId,
        incrementBy         : 25,
        nextId              : 0,
        maxId               : 0
    }
}

func (generator *MongoIdGenerator) GetNextId() (int, error) {
    generator.mutex.Lock()
    defer generator.mutex.Unlock()

    if generator.nextId == generator.maxId {
        filter := bson.M{&amp;quot;_id&amp;quot;: m.counterDocumentId}
        update := bson.M{&amp;quot;$inc&amp;quot;: bson.M(&amp;quot;sequence&amp;quot;: generator.incrementBy)}
        options := options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After)

        var updatedDocument MongoIdCounter

        err := m.counterCollection.FindOneAndUpdate(context.TODO(), filter, update, options).Decode(&amp;amp;updatedDocument)
        if err != nil {
            return 0, errors.New(&amp;quot;Unable to update Mongo id counter collection.&amp;quot;)
        }

        generator.nextId = updatedDocument.sequence - incrementBy
        generator.maxId = updatedDocument.sequence
    }

    generator.nextId += 1
    return generator.nextId, nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Wed, 01 Nov 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-11-01T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">reclaim_your_agile</guid>
      <link>https://ian.wold.guru/Posts/reclaim_your_agile.html</link>
      <title>Reclaim Your Agile: The One Clever Trick Agile Coaches Don't Want You to Know</title>
      <description>&lt;p&gt;This is the one clever trick that Agile coaches don't want you to know: you &lt;em&gt;can&lt;/em&gt; actually become an Agile team. There is actually a light at the end of this tunnel. Okay, maybe I'm being a bit fanciful. However, there is one thing that I've done on several teams now that has led them to be able to reclaim their development process and become more Agile. With this &lt;em&gt;one clever trick&lt;/em&gt; your team can create and dictate its own process. Again, perhaps a bit fanciful, but like I said this has worked for me and it might be beneficial to you too in some way.&lt;/p&gt;
&lt;p&gt;I've heard a lot of my colleagues say that they are skeptical of, or even dislike, Agile. In almost every single case, I think they were actually talking about Scrum. It's a forgiveable mistake, these two words are largely used interchangeably these days. However, I encourage you to read the &lt;a href="https://agilemanifesto.org/principles.html"&gt;Agile Principles&lt;/a&gt; and any piece of the &lt;a href="https://www.scrum.org/resources/scrum-guide"&gt;Scrum Guide&lt;/a&gt; and tell me that they're the same thing. They're not. Scrum is almost entirely antithetical to Agile (&amp;quot;almost&amp;quot; in this case being around the 99.99% range), designed to satisfy corporations who aren't quite ready to give up their waterfall yet. Agile is the emphasis on early and continuous delivery of value to the customer, whose experience is the first and foremost concern, and the prescription that each &lt;em&gt;engineering&lt;/em&gt; team must create, own, and direct its own process.&lt;/p&gt;
&lt;p&gt;I do think that the Agile principles are the best set of principles we've come up with so far to try to understand how to best develop software, and I want to tell you about this way I've found that's helped a team or two become more truly Agile.&lt;/p&gt;
&lt;p&gt;It started by accident actually, many years ago. I had just been hired by Dalex Livestock Solutions, a small agricultural firm, to my first properly employed position (I was an independent consultant before that). They were a full 5 people strong, and we had a meeting in Minneapolis the week I was hired to chart the future course - they wanted to invest in developing new products (that's why I was brought on). Being a 4-person company up to that point, they had never thought of their development process. However, it was clear to them that if they wanted to scale, they'd need some process. They said they wanted Scrum, and I obliged them and went along with it. There was one hiccup though - none of the non-engineers there understood a single thing that the engineers were saying about scrum. The vocabulary was a stumbling block - terms like &amp;quot;scrum meeting&amp;quot; and &amp;quot;sprint&amp;quot; were more puzzling than helpful. And funnily enough, having a former rugby captain on the team didn’t make translating these terms any easier!&lt;/p&gt;
&lt;p&gt;In a stroke of creativity (though I can't recall exactly whose), we decided to give a fresh spin to these scrum terms. Being in the agriculture domain, we thought of using old rancher terms to describe the concepts. This caught their attention, and we ended up using these words the entire five years I was there. We didn't have &amp;quot;sprints&amp;quot;, we had &amp;quot;cattle drives&amp;quot;. No &amp;quot;sprint planning&amp;quot;, that was a &amp;quot;saddle up&amp;quot;; &amp;quot;retrospectives&amp;quot; were &amp;quot;circling the herd&amp;quot;; instead of a &amp;quot;backlog&amp;quot; we had a &amp;quot;haystack&amp;quot;; and so on. Not one of the words we used are in the scrum guide. Over the years, when we felt we needed to make a change, we would never be bogged down with questions like &amp;quot;What does the Scrum guide recommend?&amp;quot;, but instead we'd ask &amp;quot;Well, what actually &lt;em&gt;is&lt;/em&gt; a 'Cattle Drive'?&amp;quot;. After just a couple of years we had drifted away from Scrum entirely and into something of our own - something actually &lt;em&gt;Agile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My takeaway was that by redefining and taking control over our &lt;em&gt;language&lt;/em&gt;, we were able to expand on that to take control of our &lt;em&gt;process&lt;/em&gt;, and I think this works - in different ways - for teams of any size. Maybe this approach will work for you, maybe it won't, but it seems to me like it's a chance for many teams to be able to fight against their Scrums and make it something actually Agile, so I want to share some ideas for how you can actually do this.&lt;/p&gt;
&lt;h1&gt;Just Start With Words&lt;/h1&gt;
&lt;p&gt;Some industries are better suited to this than others, but the central, most important, idea is to use your own words for each part of your process. I gave you some agriculture examples, but you can find examples in your own industry. Or suppose you work in insurance or banking where the domain is very dry. Do you all enjoy superheroes or Star Trek? Use Star Trek words! Find something that unites your team.&lt;/p&gt;
&lt;p&gt;At the agricultural firm, I started with &lt;em&gt;all of the words&lt;/em&gt; but you certainly don't have to. Start with one element or ritual and make a simple change. Given the &amp;quot;backlog&amp;quot; was the &amp;quot;haystack&amp;quot; to us, I just renamed a list on the kanban board. &amp;quot;Isn't that funny!&amp;quot; they'd exclaim. Reinforce this change with the way you speak, custom Slack emojis, or anything else to give your team a special color. When someone calls it the &amp;quot;backlog&amp;quot; errantly, call them out: &amp;quot;Don't you mean the 'haystack'?&amp;quot;&lt;/p&gt;
&lt;p&gt;Everyone - even business - will be on board with you if you pick your first target right. They'll be impressed how your team is taking ownership over its work. If you work at a place that's too corporatish, brag about how the name change helps align the synergy of your deliveries or something of the sort.&lt;/p&gt;
&lt;h2&gt;Keep it Fun&lt;/h2&gt;
&lt;p&gt;Don't jump right in trying to redefine everything, and don't show up at retro one day ready to rock with &amp;quot;Hey team, I've redefined all of our words - &lt;em&gt;isn't this great&lt;/em&gt;?&amp;quot;. No, it's not great, not for your teammates. Make a suggestion - maybe start talking to one or two colleagues to start: &amp;quot;Wouldn't it be &lt;em&gt;fun&lt;/em&gt; to rename this-or-that process to &lt;em&gt;(insert word here)&lt;/em&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;You want to create an environment where everyone is looking forward to discussing words. When your team, probably jokingly, chooses a new word for a process - stick to it. Use it everywhere and, when appropriate, correct coworkers when they use the &amp;quot;wrong&amp;quot; word. This isn't something rigid I'm trying to prescribe, and in practice it's a natural way to have a bit of a laugh among colleagues.&lt;/p&gt;
&lt;p&gt;You might have coworkers who wouldn't want a change in name - they might be too uptight, too set in their ways, or too anything else. More likely than anything, they might just not understand you or the idea. Go slow, keep it light, and emphasize the benefit of team cohesion. You'll win over even the most ardent colleagues.&lt;/p&gt;
&lt;h2&gt;Press the Advantage&lt;/h2&gt;
&lt;p&gt;Expand that to other parts of the process, and engage everyone on your team. At the end of a retrospective, suggest a new thing to rename. Can your team take five minutes to brainstorm a new name for this or that meeting? Sure they can!&lt;/p&gt;
&lt;p&gt;Engender a lively and friendly debate - which word is the more &amp;quot;agricultural&amp;quot; or &amp;quot;Star Trek&amp;quot; or whatever word for this concept? Which one does the whole team like? Remember that &lt;em&gt;you&lt;/em&gt; don't need to like the words, the team does. Keep them happy.&lt;/p&gt;
&lt;p&gt;Before too long, you'll have your own words for everything. Your team will own its own language, and language is everything. Anybody who will want to redirect your team and change its processes will need to understand your lingo now.&lt;/p&gt;
&lt;h2&gt;Entrench Your Position&lt;/h2&gt;
&lt;p&gt;Everyone who deals with your team needs to know its lingo now. You want us to make a change to our microservice? You better say its name right! That's correct, the microservice is called &amp;quot;Khan&amp;quot; because engaging with it will entrench your team in a days-long battle deep in a dangerous nebula that will drain everyone's willpower until one of you can assert a week dominance over the other and finally destroy it (such is the world of microservice development).&lt;/p&gt;
&lt;p&gt;Do not relent. Your language is your power. If only your team speaks this language, then you've got a special flavor and nothing else. If your team plus everyone interacting with your team speaks this language, then you've got a real power.&lt;/p&gt;
&lt;p&gt;Inevitably, you'll have colleagues on other teams get confused or maybe frustrated at all your different words. Avoid confrontation and fall back to the old words if you need to in these contexts, but once again you'll bridge this gap if you keep it fun and take it slow. Don't create a glossary on your team's Confluence page, and even if you do don't refer folks from other teams there. Just use the new lingo in casual communication and laugh with yourself and your team when others find it strange. You'll win them all over too, with time and good nature.&lt;/p&gt;
&lt;h1&gt;Start Changing Things&lt;/h1&gt;
&lt;p&gt;Now that you have real power, use it. At retrospectives, stop asking what the right name for something is - you've already named everything. Start asking &amp;quot;What actually &lt;em&gt;is&lt;/em&gt; a 'Cattle Drive'?&amp;quot;.&lt;/p&gt;
&lt;p&gt;At first, your teammates will be confused - there's no longer a Scrum guide to fall back on! Nobody knows what a 'Cattle Drive' is - it's not in the Scrum guide, it's not in any guide! This is when the real thinking comes out. I guarantee, buried deep in your team is a wealth of knowledge, and by removing the onerous cap of the Scrum guide you'll discover it.&lt;/p&gt;
&lt;p&gt;The hope at this point is that by having divorced your team from the language of Scrum, you can change the process by talking about your new words instead of talking about process. This is another area that can't be rushed, and you might be surprised by what the first candidate is. Before too long, you'll surely have a sprint (or, perhaps a &lt;em&gt;cattle drive&lt;/em&gt;) where everyone on the team has been impeded by a particular process. Motivate a conversation here about this process, but use your new word and avoid talking about process.&lt;/p&gt;
&lt;p&gt;Keeping your team entrenched in the new language keeps the team away from considering &amp;quot;what does the Scrum Guide say about this process?&amp;quot; because the Scrum Guide says nothing about &lt;em&gt;haystacks&lt;/em&gt; or &lt;em&gt;saddle ups&lt;/em&gt;. Make the first process change on a process that everyone agrees needs to be changed when they are all agreeing that it needs to be. After the first change, others will be easier.&lt;/p&gt;
&lt;h2&gt;Incorporate Ideas&lt;/h2&gt;
&lt;p&gt;There will be a lot of ideas suggested. &amp;quot;'Circling the herd' should be &lt;em&gt;X&lt;/em&gt;&amp;quot; or &amp;quot;A 'stampede' should be &lt;em&gt;Y&lt;/em&gt;&amp;quot;. Create a framework for trying ideas: agree to try ideas for a time, hold rigidly to them, then after that period of time reevaluate. Did the idea work? Keep it. Did it fail? Discard it. Something in-between? Adapt. Again: &lt;em&gt;you&lt;/em&gt; don't need to like the ideas here. Rather, &lt;em&gt;someone&lt;/em&gt; does, and that's the indicator of success.&lt;/p&gt;
&lt;p&gt;When new ideas are incorporated, your process changes. Don't bill this as a process change. Instead, it's an update to a word that others don't fully understand anyway. After all, other teams are talking about your team in terms of &amp;quot;cattle drives&amp;quot; or whatever. They don't know what that is - you can tell them, and you can tell them different things months apart, just make sure you're approachable - you'll be surprised how far you can stretch your process, and somehow others will be able to work with you &lt;em&gt;because humans tend to be rather adaptable&lt;/em&gt;. Don't worry here, just own your process. Whatever your words are, they're your team's words.&lt;/p&gt;
&lt;p&gt;Some might yet object to new ideas because the almighty Scrum Guide doesn't contain it. You can jokingly assert that the Scrum Guide says nothing about your new word(s), but your team should be sufficiently motivated to make changes when they're considering them. If you lose a battle that's okay, you're in it for the long haul to win the war. Consensus and buying in is crucial to making fundamental changes.&lt;/p&gt;
&lt;h2&gt;Keep the Team in Control&lt;/h2&gt;
&lt;p&gt;Inevitably, outsiders will try to push on you. They'll try to compare a Cattle Drive to a sprint or other lame things like that. Don't let them. Ensure everyone on your team is on the same page so they can answer uniformly: &amp;quot;A 'cattle drive' is a set time in which we can develop a small set of features that directly benefit the farmers.&amp;quot;. They might say that that sounds like a sprint - insist it's not and redirect back to how it satisfies the customers or some corporate metric.&lt;/p&gt;
&lt;p&gt;Always redirect to your team. Start from the position that your team owns its language; anything different is &lt;em&gt;entirely foreign&lt;/em&gt; to you. Don't speak about Scrum, just speak from the position of your team. This is how we do things, &lt;em&gt;this is the way&lt;/em&gt;. A random person can go pretty far in an office if they're wearing a tie and carrying a clipboard, right?&lt;/p&gt;
&lt;h1&gt;Become Agile&lt;/h1&gt;
&lt;p&gt;You now own your own processes, and your team has a regular way of changing its process to respond to the environment it's in. You're now Agile, but remember it, keep it up, and don't relent.&lt;/p&gt;
&lt;p&gt;When your process needs to change, change it but stick to your team's vocabulary. Deliver customer value early and often, and find ways to get your team as close to the customer as you can. If your engineers can regularly interact directly with the customer, that's the best. You can always fall back on the Agile manifesto and principles to give some guidance on how you might approach sharpening your process, but remember that these are only a guide and your team needs to discover, implement, and own its own process and methodologies for its own environment.&lt;/p&gt;
&lt;h2&gt;When in Doubt, Rip it Out&lt;/h2&gt;
&lt;p&gt;Most teams, especially those coming from Scrum, have too much process. A lot of them also don't have enough communication - even teams that are mostly in-office with each other. When it comes time to reevaluate a practice that you and your team have, consider ripping it out - stop the practice. It might seem unintuitive, but a lot of things in our industry are. If a particular element of your process is getting in the way somehow, maybe just remove it and &lt;em&gt;get it out of the way&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Can the problem be solved with more communication? If you're in office do you need to adopt a better culture of collaboration throughout the day? If you're distributed, do you need to encourage more ad hoc video calls? If you can reduce the barrier to communication and encourage as much communication as possible, surely you'll find no more need for meetings to &amp;quot;align stakeholders&amp;quot; or the like.&lt;/p&gt;
&lt;p&gt;Sometimes it can be difficult to rip out a process even when it's clear it needs to go. You might have colleagues who are too familiar with this process, or maybe colleagues who think they don't want to communicate that often. This is a collaborative process, and they need to be comfortable and along for the ride too, but focus on the benefit and keep the conversations focused on what your team and its product need. You can always lead by being the change you wish to see - if more video calls are needed, start hashing your problems out over video call with your colleagues.&lt;/p&gt;
&lt;h2&gt;Drive Change From Product Quality&lt;/h2&gt;
&lt;p&gt;We're in the industry of developing software products, so the working of the software that we deliver to our customers is always, invariably, the primary measure of our success. Our processes need to be honed to delivering valuable, functioning software, and so the primary impetus to change our processes should be from the metrics of our product's quality. You (probably) don't need two hundred different charts and graphs measuring every last metric you can think of, but your team does need to have agreed metrics and definitions of quality.&lt;/p&gt;
&lt;p&gt;The greatest opportunity for change is when one of these metrics is underperforming. It's easy to orient the team around wanting to solve this issue, and often quality issues are largely - or at least in part - a fault of something in the process.&lt;/p&gt;
&lt;h2&gt;Involve the Customer&lt;/h2&gt;
&lt;p&gt;The gold standard for a software engineering process is, in my experience and humble opinion, to have the customer right beside you as you develop your software. I spent the first several years of my career as a consultant developing LOB software, and I had the opportunity to develop software in this way. Not only does it eliminate a whole swath of processes just to get me customer feedback; I have the most reliable feedback and best customer experience as a result.&lt;/p&gt;
&lt;p&gt;This is not realistically achievable for all teams though - I work in ecommerce right now and I can't imagine what it would look like to have actual customers next to me. Would they even care? Instead, we have a team that collects customer feedback and records interviews, and I can go and read or watch those whenever I need - we've developed a process that works for us and gets me as close to the customer as possible.&lt;/p&gt;
&lt;p&gt;Always consider the customer as you develop your processes - where do they fit in and how do you and your colleagues know &lt;em&gt;who&lt;/em&gt; they actually are? If you can realize efficiencies here, you can probably eliminate significant parts of your process.&lt;/p&gt;
&lt;h2&gt;You Won't Ever Finish&lt;/h2&gt;
&lt;p&gt;The only constant, especially in our industry, is &lt;em&gt;there are no constants&lt;/em&gt;. In a way this can be demoralizing; we can never create the one perfect bit of software or the one true process. But that's the environment we operate in, and we need to accommodate it. That's part of what makes Agile necessary to me, or at least that you and your team need to be empowered to develop and own their own processes.&lt;/p&gt;
&lt;p&gt;Your process is never going to be set and it will constantly change. Keep it changing, and keep ownership over your process. To get back to my thesis here, keep the language yours. Don't let others impose their ideas or their own language on you, play uno reverse. When things need to change, this is a process to introduce new fun words or to recontextualize them to fit new problems. This process of using your own language makes it all the more fun and meaningful for teams, and will often lead to better - maybe, more &lt;em&gt;agile&lt;/em&gt; - results.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are no silver bullets, but this process has worked incredibly well for me, and it might for you as well. At the heart of it, the idea is to get your team to own its own language and exploit that as an advantage to have its own process. Confuse your superiors with funny words and slip your own process in below that.&lt;/p&gt;
&lt;p&gt;You might also think that you don't actually want your team to be 'Agile'. If you feel that way, are you actually talking about Scrum? Agile and Scrum are very different. Read the Agile Manifesto then the Scrum Guide. Do these seem like they're saying the same thing? They're not - Scrum is a completely disingenuous bastardization of Agile for the benefit of corporate environments. Agile, on the other hand, is a loose set of guides that don't prescribe a specific system - they want to empower your team to develop its own system.&lt;/p&gt;
&lt;p&gt;That's what I want to get at with this article. I want to give you one way, doubtlessly among many ways, to reclaim your process. Reclaim your 'Agile' and form something that works for you. I do think that the Agile principles must be followed: deliver value early and often, stay close to your customers, and always reevaluate.&lt;/p&gt;
&lt;p&gt;On top of all of this, keep learning and keep your mind open to new ideas in process. There's many different ideas - some good, many iffy - about how to develop software. Ultimately, the best process for your team isn't written anywhere. Only by trying new things out can your team find a process that works the best.&lt;/p&gt;
&lt;p&gt;I hope all of your future cattle drives - or whatever word you settle on - are filled with productive enhancements for the users' benefit.&lt;/p&gt;
</description>
      <pubDate>Wed, 13 Dec 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-12-13T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">should_i_learn_insert_some_tech_here</guid>
      <link>https://ian.wold.guru/Posts/should_i_learn_insert_some_tech_here.html</link>
      <title>"Should I Learn (Insert Some Tech Here)?"</title>
      <description>&lt;p&gt;Yes.&lt;/p&gt;
</description>
      <pubDate>Tue, 14 Nov 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-11-14T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprache</guid>
      <link>https://ian.wold.guru/Posts/sprache.html</link>
      <title>An Introduction to Sprache</title>
      <description>&lt;p&gt;As my activity on this blog and my GitHub account may attest, I'm quite fond of a C# library called Sprache. Sprache is a parser-combinator that uses LINQ (Language INtegrated Query) to allow for the elegant construction of parsers in C#. I've been using Sprache for three years now, before I started college, and I've used it to implement a number of domain-specific languages (DSLs) both in side projects on my GitHub and on applications I've worked on. It's only natural I would want to share my favorite C# library with my fellow undergraduate classmates, but there are several factors which make it rather unapproachable for the average undergraduate computer science student. Thus, I have written this piece to provide a completely introductory tutorial to using Sprache.&lt;/p&gt;
&lt;p&gt;I'll explain LINQ and BNF, and then I'll walk you through the implementation of a few simple grammars in Sprache such that I may touch upon all the most important concepts in the Sprache library to allow the reader to immediately begin to implement the grammars which they desire. At the end of this post, I link to several articles which cover the framework and other related readings. In the future, I may also write a short handbook/reference to certain Sprache concepts.&lt;/p&gt;
&lt;p&gt;One does not necessarily need to have an understanding of C# to begin using Sprache, but a familiarity of a similar language (i.e. Java) would go a long way. I'm going to assume the reader has an understanding of object-oriented programming. I won't be going into an explanation of what a parser-combinator is, nor what a &amp;quot;combinator&amp;quot; is, in general. If you would like to become more involved in the development of Sprache, though, you should definitely familiarize yourself with the concept. I provide some links at the end of this tutorial to that end.&lt;/p&gt;
&lt;h1&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;To begin with, of course, you'll need to download Sprache. You can find it &lt;a href="https://github.com/sprache/Sprache"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;LINQ&lt;/h2&gt;
&lt;p&gt;LINQ, short for Language INtegrated Query, is a wonderful feature of Visual C# which adds data-querying operators to C#. LINQ expressions are sometimes (grammatically incorrectly) referred to as &amp;quot;LINQ queries&amp;quot; as they read rather fluently as a query on a data set. Here is an example of a LINQ expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;var myList = new List&amp;lt;string&amp;gt;()
{
    &amp;quot;hello&amp;quot;,
    &amp;quot;world&amp;quot;,
    &amp;quot;how&amp;quot;,
    &amp;quot;are&amp;quot;,
    &amp;quot;you&amp;quot;
};

var startsWithH =
    from s in myList
    where s.ToCharArray()[0] == 'h'
    select s;

foreach (var a in startsWithH)
	Console.WriteLine(a);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we start with a list of words, and we desire to print to the console each word which begins with the letter 'h'. The variable &lt;em&gt;startsWithH&lt;/em&gt; is defined with the following LINQ expression, which is how we sort out those words which start with 'h':&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;from s in myList
where s.ToLower().ToCharArray()[0] == 'h'
select s;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's look at what's going on here. First, we have a &lt;em&gt;from&lt;/em&gt; statement. This will iterate over each object in &lt;em&gt;myList&lt;/em&gt;, using &lt;em&gt;s&lt;/em&gt; as the iterator variable. Next, we have a &lt;em&gt;where&lt;/em&gt; statement, which filters out the objects in &lt;em&gt;myList&lt;/em&gt; based on the condition provided. Note that several &lt;em&gt;where&lt;/em&gt; statements could be specified here. At the end of this LINQ expression, as with every LINQ expression, we have a &lt;em&gt;select&lt;/em&gt; statement, which returns each &amp;quot;queried&amp;quot; object. In this case, we only desire to return the strings which begin with the letter 'h'.&lt;/p&gt;
&lt;p&gt;LINQ supports several operators apart from &lt;em&gt;from&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, and &lt;em&gt;select&lt;/em&gt;, though these are the main ones. Microsoft, naturally, provides a very in-depth &lt;a href="https://msdn.microsoft.com/en-us/library/bb394939.aspx"&gt;list of LINQ operators&lt;/a&gt;, though Wikipedia has &lt;a href="https://en.wikipedia.org/wiki/Language_Integrated_Query#Standard_Query_Operators"&gt;a much more succinct list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sprache uses LINQ to construct its parsers. This allows for quick implementation and easy and intuitive readability.&lt;/p&gt;
&lt;h2&gt;Backus-Naur Form&lt;/h2&gt;
&lt;p&gt;Backus-Naur Form, or BNF for short, is a metalanguage used to describe the grammars and syntax of context-free grammars (essentially, for our purposes, this means the grammars of computing languages). BNF defines expressions in terms of other expressions and strings using a number of rules which will become more familiar as we begin implementing these grammars in Sprache.&lt;/p&gt;
&lt;p&gt;As an example, suppose I want to define a grammar which specifies an arithmetic expression which might add, subtract, multiply, or divide two digits. I'll provide a BNF definition of this grammar, and then explain it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;add&amp;gt; | &amp;lt;subtract&amp;gt; | &amp;lt;multiply&amp;gt; | &amp;lt;divide&amp;gt;

&amp;lt;add&amp;gt;       ::= &amp;lt;digit&amp;gt; &amp;quot;+&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;subtract&amp;gt;  ::= &amp;lt;digit&amp;gt; &amp;quot;-&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;multiply&amp;gt;  ::= &amp;lt;digit&amp;gt; &amp;quot;*&amp;quot; &amp;lt;digit&amp;gt;
&amp;lt;divide&amp;gt;    ::= &amp;lt;digit&amp;gt; &amp;quot;/&amp;quot; &amp;lt;digit&amp;gt;

&amp;lt;digit&amp;gt;     ::= &amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's look at each of the elements and what they do. First, the most notable and important element is the reference for an expression, which looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expression_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expressions are referenced by this convention, and they are defined with the &lt;em&gt;::=&lt;/em&gt; operator. In defining such expressions, a number of rules can be used. Look at the definition for &lt;em&gt;expr&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;add&amp;gt; | &amp;lt;subtract&amp;gt; | &amp;lt;multiply&amp;gt; | &amp;lt;divide&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bar ('|') denotes an &lt;em&gt;or&lt;/em&gt; relationship. That is, an expression &lt;em&gt;expr&lt;/em&gt; can be either an &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;subtract&lt;/em&gt;, &lt;em&gt;multiply&lt;/em&gt;, or &lt;em&gt;divide&lt;/em&gt; expression.&lt;/p&gt;
&lt;p&gt;Now let's look at the definition of the &lt;em&gt;add&lt;/em&gt; expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;add&amp;gt;       ::= &amp;lt;digit&amp;gt; &amp;quot;+&amp;quot; &amp;lt;digit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that an &lt;em&gt;add&lt;/em&gt; can be a &lt;em&gt;digit&lt;/em&gt;, followed by a plus sign, followed by another &lt;em&gt;digit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You might notice a bit of an inefficiency in the grammar I defined above. Namely, we define &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;subtract&lt;/em&gt;, &lt;em&gt;multiply&lt;/em&gt;, and &lt;em&gt;divide&lt;/em&gt; separately, but due to the similarity in their structures, it feels like we should be able to define them all together. While there are certainly good reasons one might want to define them separately as I did above, for succinctness one might desire to redefine the grammar as such:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;digit&amp;gt; (&amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot;) &amp;lt;digit&amp;gt;

&amp;lt;digit&amp;gt;     ::= &amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I introduce a grouping of terms, defined by the parentheses. Now, &lt;em&gt;expr&lt;/em&gt; is defined to be two &lt;em&gt;digits&lt;/em&gt; separated by either an addition, subtraction, multiplication, or division symbol. This is, however, a rather dumb grammar, in that only two &lt;em&gt;digits&lt;/em&gt; can be used in the arithmetic expression, while we might want to allow any number to be used. We can extend the grammar further to allow for this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;expr&amp;gt;      ::= &amp;lt;number&amp;gt; (&amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot;) &amp;lt;number&amp;gt;

&amp;lt;number&amp;gt;    ::= &amp;lt;integer&amp;gt; [&amp;quot;.&amp;quot; &amp;lt;integer&amp;gt;]
&amp;lt;integer&amp;gt;   ::= +(&amp;quot;0&amp;quot; | &amp;quot;1&amp;quot; | &amp;quot;2&amp;quot; | &amp;quot;3&amp;quot; | &amp;quot;4&amp;quot; | &amp;quot;5&amp;quot; | &amp;quot;6&amp;quot; | &amp;quot;7&amp;quot; | &amp;quot;8&amp;quot; | &amp;quot;9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have broken a number into two parts, a &lt;em&gt;number&lt;/em&gt; and an &lt;em&gt;integer&lt;/em&gt;. Where I define &lt;em&gt;integer&lt;/em&gt;, I introduce a plus sign, which allows the expression which it suffixes to be repeated one or more times. Where I define &lt;em&gt;number&lt;/em&gt;, I introduce the square brackets, which surround optional expressions. Thus, the following terms are captured by the expression &lt;em&gt;number&lt;/em&gt;: 0, 125, 3.14, and 123.456. However, the following terms are not captured by &lt;em&gt;number&lt;/em&gt;, and I will allow the reader to postulate why they are not, and how the grammar might need to be altered to capture them: .31, -12, -12.56, and -.987.&lt;/p&gt;
&lt;p&gt;When we want to parse a language with Sprache (or any other parser, for that matter), we will first define the language in BNF, so that we can easily reference the pieces of the parser we must create, and to keep track of our progress.&lt;/p&gt;
&lt;h1&gt;Sprache&lt;/h1&gt;
&lt;p&gt;Ultimately, once you get used to using LINQ to construct parsers, Sprache is just another library, and becoming proficient in Sprache is the same process one should be used to of learning the methods given by the library and learning how to ask questions on stack overflow.&lt;/p&gt;
&lt;p&gt;Let's begin familiarizing ourselves by constructing a parser which can parse the string &amp;quot;hello&amp;quot; into a string &amp;quot;hello.&amp;quot; This is an entirely non-useful task for Sprache, but it gets our feet wet:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; myParser =
    from str in Parse.String(&amp;quot;hello&amp;quot;).Text()
    select str;

string val = myParser.Parse(&amp;quot;hello&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;val&lt;/em&gt; will, unremarkably, be &amp;quot;hello.&amp;quot;However, the parser should be very easy to understand, especially given our understanding of the working of a LINQ expression. The method &lt;em&gt;String(string)&lt;/em&gt; is a parser which parses any string you desire (in this case, we desired to parse the string &amp;quot;hello&amp;quot;). The &lt;em&gt;String&lt;/em&gt; parser returns an enumerable of chars, so we need to use &lt;em&gt;Text&lt;/em&gt; to turn the enumerable into a string. From there, it should be rather obvious what is going on.&lt;/p&gt;
&lt;p&gt;Now, let's suppose we want to parse the string &amp;quot;hello&amp;quot; multiple times, separated by whitespace, and we want to know how many times &amp;quot;hello&amp;quot; appears. We can extend our parser above like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;int&amp;gt; myParser =
    from str in
        Parse.String(&amp;quot;hello&amp;quot;).Text()
        .DelimitedBy(Parse.WhiteSpace.Many())
    select str.Count();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing this parser with the string &amp;quot;hello   hellohello  hello&amp;quot; should return a result of 4. Because of the way our parser is constructed, it is relatively straightforward to read it as &amp;quot;parse the string &amp;quot;hello&amp;quot; delimited by whitespace.&amp;quot; But let's look at what's going on here. &lt;em&gt;DelimitedBy&lt;/em&gt; will attempt to match the &amp;quot;hello&amp;quot; parser, and then it will look for whitespace (&lt;em&gt;WhiteSpace().Many()&lt;/em&gt; is a parser itself which matches 0 or more different whitespace characters in a row), and will then look to match &amp;quot;hello&amp;quot; again and more whitespace, until the parser is no longer able to match either &amp;quot;hello&amp;quot; or whitespace, at which point it returns an &lt;em&gt;IEnumberable&lt;/em&gt; containing several &amp;quot;hello&amp;quot;s. Our &lt;em&gt;select&lt;/em&gt; statement can then select the &lt;em&gt;Count&lt;/em&gt; of that &lt;em&gt;IEnumerable&lt;/em&gt;, and thus we can obtain the number of times &amp;quot;hello&amp;quot; is parsed.&lt;/p&gt;
&lt;p&gt;This idea of chaining parsers onto each other, as &lt;em&gt;DelimitedBy&lt;/em&gt; is chained onto &lt;em&gt;String&lt;/em&gt;, is the entire concept behind parser-combinators.&lt;/p&gt;
&lt;p&gt;A slightly more complicated task might be to try to parse a variable name surrounded by whitespace (often called an &amp;quot;identifier&amp;quot;). This example is given on the Sprache GitHub page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; identifier =
    from leading in Parse.WhiteSpace.Many()
    from first in Parse.Letter.Once()
    from rest in Parse.LetterOrDigit.Many()
    from trailing in Parse.WhiteSpace.Many()
    select new string(first.Concat(rest).ToArray());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, &amp;quot;   abc123   &amp;quot; should come out as &amp;quot;abc123&amp;quot;. Notice how staggering several &lt;em&gt;from&lt;/em&gt; statements in a row reads as though we are saying &amp;quot;then&amp;quot;. For example, this parser could be read by a human as &amp;quot;Parse many whitespace characters, &lt;em&gt;then&lt;/em&gt; parse one letter, &lt;em&gt;then&lt;/em&gt; parse 0 or more letters or digits, &lt;em&gt;then&lt;/em&gt; parse more whitespace, and return the first letter and the rest of the letters/digits concatenated to it&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Our First Language&lt;/h2&gt;
&lt;p&gt;So, let's now define the grammar for a small DSL, and we'll try to parse it. Let's make a language that defines variables: we can have an identifier, followed by a colon, and then a string, and we can define as many variables as we want on different lines. Ultimately, we want to parse this into a dictionary. So, our resulting language could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;identifier1 : &amp;quot;hello&amp;quot;
identifier2 : &amp;quot;world&amp;quot;
identifier3 : &amp;quot;yay parsing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The BNF for the language looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-BNF"&gt;&amp;lt;block&amp;gt;        ::= &amp;lt;expr&amp;gt; *(&amp;lt;newline&amp;gt; &amp;lt;expr&amp;gt;)
&amp;lt;expr&amp;gt;         ::= &amp;lt;identifier&amp;gt; [&amp;lt;whitespace&amp;gt;] &amp;quot;:&amp;quot; [&amp;lt;whitespace&amp;gt;] &amp;lt;string&amp;gt;
&amp;lt;identifier&amp;gt;   ::= &amp;lt;letter&amp;gt; *(&amp;lt;letter&amp;gt; | &amp;lt;digit&amp;gt;)
&amp;lt;string&amp;gt;       ::= &amp;quot;\&amp;quot;&amp;quot; *(&amp;lt;any_character&amp;gt;) &amp;quot;\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'll imagine you can determine what &lt;em&gt;newline&lt;/em&gt;, &lt;em&gt;letter&lt;/em&gt;, &lt;em&gt;digit&lt;/em&gt;, and &lt;em&gt;any_character&lt;/em&gt; are. Note, though, that we technically want &lt;em&gt;any_character&lt;/em&gt; to parse any character except a quotation mark.&lt;/p&gt;
&lt;p&gt;Sprache already contains parsers for a letter, digit, and any character, so we should be all good to go from here. We already have our identifier parser, so let's add to that by constructing our string parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; identifier =
    from first in Parse.Letter.Once()
    from rest in Parse.LetterOrDigit.Many()
    select new string(first.Concat(rest).ToArray());

Parser&amp;lt;string&amp;gt; stringParser =
    from first in Parse.Char('&amp;quot;')
    from text in Parse.AnyChar.Except(Parse.Char('&amp;quot;')).Many().Text()
    from last in Parse.Char('&amp;quot;')
    select text;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use &lt;em&gt;Except&lt;/em&gt; to add an exception to the &lt;em&gt;AnyChar&lt;/em&gt; parser. In addition, we use &lt;em&gt;Text&lt;/em&gt; at the end to tell sprache to convert the IEnumerable returned by &lt;em&gt;Many&lt;/em&gt; into a string. Now, we can add the parser for the expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;//Adding to the code above:

Parser&amp;lt;Dictionary&amp;lt;string, string&amp;gt;&amp;gt; expr =
    from id in identifier
    from colon in Parse.Char(':').Token()
    from str in stringParser
    select new Dictionary&amp;lt;string, string&amp;gt;() { { id, str } };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; is used here - that does exactly what it says - it makes the parser optional. In addition, I introduced &lt;em&gt;Token&lt;/em&gt;, which will parse whitespace before and after the &lt;em&gt;CHar&lt;/em&gt; parser. Notice how we are able to reference the parsers we created earlier, and we can use the values they return to create a new object. Let's finish it off by creating the &amp;quot;block&amp;quot; parser, which is supposed to parse several expressions separated by newlines:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;//Adding to the code above:

Parser&amp;lt;IEnumerable&amp;lt;Dictionary&amp;lt;string,string&amp;gt;&amp;gt;&amp;gt; block =
    expr.DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice  how we are not using the fancy LINQ expressions here. Because our parser fits on one line, and &lt;em&gt;DelimitedBy&lt;/em&gt; returns the type that we want, then we can condense our parser a bit. Now that we're done with our parser, we should be able to parse our example file just fine into an &lt;em&gt;IEnumberable&lt;/em&gt; of dictionaries containing our identifier-string pairs.&lt;/p&gt;
&lt;h2&gt;Comma-Separated Values&lt;/h2&gt;
&lt;p&gt;CSV files are extremely popular for storing tables in plaintext, and they're very easy to parse, as you might imagine. Frequently, programs which read from CSV files desire to read the files into their own data structures. So, we'll imagine a couple different scenarios involving CSVs, and we'll look at how we can go about parsing each one.&lt;/p&gt;
&lt;p&gt;First, I'll provide a rough CSV parser that sorts the CSV into a list of a list of strings, and from there we can talk about a custom data structure for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt;&amp;gt; csv = 
    Parse.AnyChar.Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token())
        .DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This parser is quite fun, as it can be written in one line, yet it parses a CSV file pretty much alright - you might notice that none of the values can contain a comma (Bonus problem: see if you can get the parser to recognize escape characters so that the user can insert commas. Later, in the JSON parser, we'll implement escape characters).&lt;/p&gt;
&lt;p&gt;Let's digress now, and suppose we have the following simplistic data structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;class Row
{
    public string Title { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Items { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let's further suppose that in a CSV, the first item of every row is the title of that row, and the remaining elements in that row are the items, corresponding to the structure above. So, we want to get a list of these rows, presumably. We can very easily modify our parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;Row&amp;gt; line =
    from first in
        Parse.AnyChar
        .Except(Parse.Char(',')
        .Or(Parse.Char('\n')))
        .Many().Text()
    from comma in Parse.Char(',').Token()
    from rest in
        Parse.AnyChar
        .Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token())
    select new Row() { Title = first, Items = rest };

Parser&amp;lt;IEnumerable&amp;lt;Row&amp;gt;&amp;gt; csv = line.DelimitedBy(Parse.Char('\n'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Naturally, if you're just interested in obtaining the rows, then this parser works perfectly. But let's suppose we didn't want the nested lists to contain the rows, but the columns. In this case, we can do some nifty snafu:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; line =
    Parse.AnyChar.Except(Parse.Char(',')
        .Or(Parse.Char('\n'))).Many().Text()
        .DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt;&amp;gt; csv =
    from l in line.DelimitedBy(Parse.Char('\n'))
    select Transform(l);

//Here's the Transform method:
//Assume the table is n-by-n
static IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; Transform(IEnumerable&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; t)
{
    var toReturn = new List&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;();
    
    for (int i = 0; i &amp;lt; t.ElementAt(0).Count(); i++)
    {
        for (int j = 0; j &amp;lt; t.Count(); j++)
        {
            if (toReturn.Count == i) toReturn.Add(new List&amp;lt;string&amp;gt;);
            if (toReturn[i].Count == j) toReturn[i].Add(&amp;quot;&amp;quot;);
            
            toReturn[i][j] = t.ElementAt(j).ElementAt(i);
        }
    }

    return toReturn;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Transform&lt;/em&gt; just rotates the list of lists as though it's a matrix, so we're not adding anything too special here. What if we wanted to do what we did above with the rows, but with the columns? Try modifying this code to do just that. Bonus points if you can eliminate &lt;em&gt;Transform&lt;/em&gt; and perform the transformation within the parser!&lt;/p&gt;
&lt;h2&gt;XML&lt;/h2&gt;
&lt;p&gt;Obviously, XML is a rather complex language, and a &lt;a href="http://www.w3.org/TR/REC-xml/"&gt;complete BNF specification&lt;/a&gt; is thus very large. Therefore, we'll be using a much simpler variation of XML, which we can see below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;tag&amp;gt; ::= &amp;lt;single_line_tag&amp;gt; | &amp;lt;multi_line_tag&amp;gt;
&amp;lt;short_tag&amp;gt; ::= &amp;quot;&amp;lt;&amp;quot; &amp;lt;identifier&amp;gt; &amp;lt;whitespace&amp;gt; &amp;lt;attribute&amp;gt;* &amp;quot;/&amp;gt;&amp;quot;
&amp;lt;full_tag&amp;gt; ::= &amp;quot;&amp;lt;&amp;quot; &amp;lt;identifier&amp;gt; &amp;lt;whitespace&amp;gt; &amp;lt;attribute&amp;gt;* &amp;quot;&amp;gt;&amp;quot; &amp;lt;tag&amp;gt;*
    &amp;quot;&amp;lt;/&amp;quot; &amp;lt;identifier&amp;gt; &amp;quot;&amp;gt;&amp;quot;
&amp;lt;attribute&amp;gt; ::= &amp;lt;identifier&amp;gt; &amp;quot;=&amp;quot; &amp;quot;\&amp;quot;&amp;quot; &amp;lt;any_characters&amp;gt; &amp;quot;\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might notice I'm leaving out a few unnecessary components: Expressions which are intuitively obvious aren't defined, &lt;em&gt;whitespace&lt;/em&gt; is only used where necessary (we'll use &lt;em&gt;Token&lt;/em&gt; prolifically to allow for flexibility on the user's part), and when defining a &amp;quot;full&amp;quot; tag, the identifier of the opening and closing tags must be the same. The latter component cannot be defined in vanilla BNF, so it's something we'll need to account for in our code.&lt;/p&gt;
&lt;p&gt;Instead of writing this code out, I'll reference the &lt;a href="https://github.com/sprache/Sprache/blob/master/src/XmlExample/Program.cs"&gt;XML example&lt;/a&gt; which is included with Sprache, and I'll explain the new elements and solutions found there.&lt;/p&gt;
&lt;p&gt;Right off the bat, looking at the &lt;em&gt;Document&lt;/em&gt; parser, we're introduced to a new use of LINQ. As I alluded to previously, any LINQ query can be written in one line without the LINQ statements. Here's the critical portion of line 98:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Node.Select(n =&amp;gt; new Document { Root = n })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make this easier to comprehend, we can write it out using the regular LINQ notation we're familiar with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;from n in Node
select new Document() { Root = n };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, the LINQ statements we've been are just a shorthand (or perhaps more of a &amp;quot;paraphrasing,&amp;quot; as they tend to be longer) for the inline notation. &lt;em&gt;Document&lt;/em&gt;
very well could have been written using solely the LINQ statements, and that would have looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;public static readonly Parser&amp;lt;Document&amp;gt; Document =
    from leading in Parse.WhiteSpace.Many()
    from doc in from n in Node.End()
                select new Document() { Root = n }
    select doc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next parser up from &lt;em&gt;Document&lt;/em&gt; is &lt;em&gt;Item&lt;/em&gt;. We'll ignore the code regarding the comments (if you're interested in this, please see my post &lt;a href="https://ianwold.silvrback.com/parsing-comments-with-sprache"&gt;Parsing Comments with Sprache&lt;/a&gt;). This makes it easy to see that an &lt;em&gt;Item&lt;/em&gt; is either a &lt;em&gt;Node&lt;/em&gt; cast as an Item, or a &lt;em&gt;Content&lt;/em&gt;, and a &lt;em&gt;Node&lt;/em&gt; (looking above in the document) is either a short or full node.&lt;/p&gt;
&lt;p&gt;Looking at the &lt;em&gt;ShortNode&lt;/em&gt; parser, we can see it seems completely familiar, except that the LINQ expression is used as an argument to the &lt;em&gt;Tag&lt;/em&gt; method. The &lt;em&gt;Tag&lt;/em&gt; method returns a parser that parses a greater than and less than sign before and after the parser you specify. This abstraction allows us to write cleaner code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FullNode&lt;/em&gt; is fun for a couple reasons. First, look at how they solved the issue of requiring opening and closing tags to be named the same with the &lt;em&gt;EndTag&lt;/em&gt; method. In addition, notice the use of the &lt;em&gt;Ref&lt;/em&gt; parser. In &lt;em&gt;FullNode&lt;/em&gt;, we need to use &lt;em&gt;Item&lt;/em&gt;, but it has obviously not yet been created. &lt;em&gt;Ref&lt;/em&gt; allows us to reference a parser later in the document, thus allowing us to create some recursive or ambiguous grammars with Sprache.&lt;/p&gt;
&lt;h2&gt;JSON&lt;/h2&gt;
&lt;p&gt;JSON, or JavaScript Object Notation, is kind of like XML. It's a way of storing data in plaintext (in a key-value pair manner) which is also easily readable by a human. In addition, it's very easy to construct a parser for it. The BNF form is very clear and concise - here, I have transcribed the &lt;a href="http://json.org/"&gt;informal definition on json.org&lt;/a&gt; into the more formal BNF notation which we have been using in this tutorial:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;object&amp;gt;    ::= &amp;quot;{}&amp;quot; | &amp;quot;{&amp;quot; &amp;lt;members&amp;gt; &amp;quot;}&amp;quot;
&amp;lt;members&amp;gt;   ::= &amp;lt;pair&amp;gt; | &amp;lt;pair&amp;gt; &amp;quot;,&amp;quot; &amp;lt;members&amp;gt;
&amp;lt;pair&amp;gt;      ::= &amp;lt;string&amp;gt; &amp;quot;:&amp;quot; &amp;lt;value&amp;gt;
&amp;lt;array&amp;gt;     ::= &amp;quot;[]&amp;quot; | &amp;quot;[&amp;quot; &amp;lt;elements&amp;gt; &amp;quot;]&amp;quot;
&amp;lt;elements&amp;gt;  ::= &amp;lt;value&amp;gt; | &amp;lt;value&amp;gt; &amp;quot;,&amp;quot; &amp;lt;elements&amp;gt;
&amp;lt;value&amp;gt;     ::= &amp;lt;literal&amp;gt; | &amp;lt;array&amp;gt; | &amp;lt;object&amp;gt;
&amp;lt;literal&amp;gt;   ::= &amp;lt;string&amp;gt; | &amp;lt;number&amp;gt; | &amp;lt;bool&amp;gt; | &amp;quot;null&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example of a valid JSON file might be the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;firstName&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;,
  &amp;quot;age&amp;quot;: 25,
  &amp;quot;address&amp;quot;: {
    &amp;quot;streetAddress&amp;quot;: &amp;quot;21 2nd Street&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;,
    &amp;quot;state&amp;quot;: &amp;quot;NY&amp;quot;,
    &amp;quot;postalCode&amp;quot;: &amp;quot;10021-3100&amp;quot;
  },
  &amp;quot;phoneNumbers&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: &amp;quot;home&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;212 555-1234&amp;quot;
    },
    {
      &amp;quot;type&amp;quot;: &amp;quot;office&amp;quot;,
      &amp;quot;number&amp;quot;: &amp;quot;646 555-4567&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should allow us to construct the data structure we're going to store our data in (called an Abstract Syntax Tree):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;
public class JSONValue {}

public class JSONObject : JSONValue
{
    public Dictionary&amp;lt;string, JSONValue&amp;gt; Pairs { get; set; }

    public JSONObject(IEnumerable&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt; pairs)
    {
        Pairs = new Dictionary&amp;lt;string, JSONValue&amp;gt;();
        if (pairs != null)
            foreach (var p in pairs)
                Pairs.Add(p.Key, p.Value);
    }
}

public class JSONArray : JSONValue
{
    public List&amp;lt;JSONValue&amp;gt; Elements { get; set; }

    public JSONArray(IEnumerable&amp;lt;JSONValue&amp;gt; elements)
    {
        Elements = new List&amp;lt;JSONValue&amp;gt;();
        if (elements != null)
            foreach (var e in elements)
                Elements.Add(e);
    }
}

public class JSONLiteral : JSONValue
{
    public string Value { get; set; }

    public LiteralType ValueType { get; set; }

    public JSONLiteral(string value, LiteralType type)
    {
        Value = value;
        ValueType = type;
    }

    pubilc static enum LiteralType
    {
        String,
        Number,
        Boolean,
        Null
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the parser, we'll start from the bottom and work our way up, as we usually do. Literal values are expressed nicely by our JSONLiteral class, which stores every value as a string, and also keeps track of the type of literal it is. Parsing them all out is a bit of a pain, so I'll post each parser here and explain it briefly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONLiteral&amp;gt; JNull =
    from str in Parse.IgnoreCase(&amp;quot;null&amp;quot;)
    select new JSONLiteral(null, JSONLiteral.LiteralType.Null);

Parser&amp;lt;JSONLiteral&amp;gt; JBoolean =
    from str in Parse.IgnoreCase(&amp;quot;true&amp;quot;).Text()
    			.Or(Parse.IgnoreCase(&amp;quot;false&amp;quot;).Text())
    select new JSONLiteral(str, LiteralType.Boolean);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parsing a literal null or boolean value isn't all too complicated. We just need to parse the strings which represent them, ignoring the case, and return new JSONLiteral objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;string&amp;gt; JExp =
    from e in Parse.IgnoreCase(&amp;quot;e&amp;quot;).Text()
    from sign in Parse.String(&amp;quot;+&amp;quot;).Text()
                 .Or(Parse.String(&amp;quot;-&amp;quot;).Text())
                 .Optional()
    from digits in Parse.Digit.Many().Text()
    select e + ((sign.IsDefined) ? sign.Get() : &amp;quot;&amp;quot;) + digits;

Parser&amp;lt;string&amp;gt; JFrac =
    from dot in Parse.String(&amp;quot;.&amp;quot;).Text()
    from digits in Parse.Digit.Many().Text()
    select dot + digits;

Parser&amp;lt;string&amp;gt; JInt =
    from minus in Parse.String(&amp;quot;-&amp;quot;).Text().Optional()
    from digits in Parse.Digit.Many().Text()
    select (minus.IsDefined ? minus.Get() : &amp;quot;&amp;quot;) + digits;

Parser&amp;lt;JSONLiteral&amp;gt; JNumber =
    from integer in JInt
    from frac in JFrac.Optional()
    from exp in JExp.Optional()
    select new JSONLiteral(integer +
                           (frac.IsDefined ? frac.Get() : &amp;quot;&amp;quot;) +
                           (exp.IsDefined ? exp.Get() : &amp;quot;&amp;quot;),
                           LiteralType.Number);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parsing a number is much more exciting. We need to account for integers, decimals, negation, and 'e'. The code above for &lt;em&gt;JNumber&lt;/em&gt; knows we need at least an integer, and can be optionally followed by the fraction or the exponential term. Notice that &lt;em&gt;Optional&lt;/em&gt; returns a special object which may or may not be defined. Thus, we need to check whether it is defined with &lt;em&gt;IsDefined&lt;/em&gt; before we can &lt;em&gt;Get&lt;/em&gt; its value.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;List&amp;lt;char&amp;gt; EscapeChars = new List&amp;lt;char&amp;gt;
    { '\&amp;quot;', '\\', 'b', 'f', 'n', 'r', 't' };

Parser&amp;lt;char&amp;gt; ControlChar =
    from first in Parse.Char('\\')
    from next in Parse.EnumerateInput(EscapeChars, c =&amp;gt; Parse.Char(c))
    select ((next == 't') ? '\t' :
            (next == 'r') ? '\r' :
            (next == 'n') ? '\n' :
            (next == 'f') ? '\f' :
            (next == 'b') ? '\b' :
            next );

Parser&amp;lt;char&amp;gt; JChar =
    Parse.AnyChar
    .Except(Parse.Char('&amp;quot;')
    .Or(Parse.Char('\\')))
    .Or(ControlChar);

Parser&amp;lt;JSONLiteral&amp;gt; JString =
    from first in Parse.Char('&amp;quot;')
    from chars in JChar.Many().Text()
    from last in Parse.Char('&amp;quot;')
    select new JSONLiteral(chars, LiteralType.String);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To parse a string, we want to make sure that we allow for control characters (the control characters are all given on &lt;a href="http://json.org"&gt;json.org&lt;/a&gt;). As you can see, the string will be zero or more characters, which are in turn any character except a quotation mark or the escape character. Where &lt;em&gt;ControlChar&lt;/em&gt; is defined, &lt;em&gt;EnumerateInput&lt;/em&gt; is used on our list &lt;em&gt;EscapeChars&lt;/em&gt;. This instance of &lt;em&gt;EnumerateInput&lt;/em&gt; will return the following parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parse.Char( '\&amp;quot;').Or(Parse.Char('\\')).Or(Parse.Char('b')) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, it chains each element in &lt;em&gt;EscapeChars&lt;/em&gt; along as the parser &lt;em&gt;Parse.Char()&lt;/em&gt; using the &lt;em&gt;Or&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONLiteral&amp;gt; JLiteral =
    JString
    .XOr(JNumber)
    .XOr(JBoolean)
    .XOr(JNull);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we're able to piece them all together to form our &lt;em&gt;JLiteral&lt;/em&gt; parser. Luckily, this is half of our entire parser!&lt;/p&gt;
&lt;p&gt;As you can see from our JSON BNF, the rest of the grammar is recursive. That is, self-referential. This is where &lt;em&gt;Ref&lt;/em&gt; will come in handy. We need to implement objects and arrays, and those two &lt;strong&gt;plus&lt;/strong&gt; literals will be defined as a value. So, let's define our &lt;em&gt;JValue&lt;/em&gt; parser, and proceed from there.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONValue&amp;gt; JValue =
    Parse.Ref(() =&amp;gt; JObject)
    .Or(Parse.Ref(() =&amp;gt; JArray))
    .Or(JLiteral);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are using &lt;em&gt;Ref&lt;/em&gt; to reference our yet-undefined &lt;em&gt;JObject&lt;/em&gt; and &lt;em&gt;JArray&lt;/em&gt; parsers. Of course, we've already created our &lt;em&gt;JLiteral&lt;/em&gt; parser, so we do not need to use &lt;em&gt;Ref&lt;/em&gt; to access it.&lt;/p&gt;
&lt;p&gt;Now we just need to parse JSON arrays and objects. For convenience, let's recall the portion of the JSON BNF which defined them:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bnf"&gt;&amp;lt;object&amp;gt;    ::= &amp;quot;{}&amp;quot; | &amp;quot;{&amp;quot; &amp;lt;members&amp;gt; &amp;quot;}&amp;quot;
&amp;lt;members&amp;gt;   ::= &amp;lt;pair&amp;gt; | &amp;lt;pair&amp;gt; &amp;quot;,&amp;quot; &amp;lt;members&amp;gt;
&amp;lt;pair&amp;gt;      ::= &amp;lt;string&amp;gt; &amp;quot;:&amp;quot; &amp;lt;value&amp;gt;
&amp;lt;array&amp;gt;     ::= &amp;quot;[]&amp;quot; | &amp;quot;[&amp;quot; &amp;lt;elements&amp;gt; &amp;quot;]&amp;quot;
&amp;lt;elements&amp;gt;  ::= &amp;lt;value&amp;gt; | &amp;lt;value&amp;gt; &amp;quot;,&amp;quot; &amp;lt;elements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that &lt;em&gt;arrray&lt;/em&gt; and &lt;em&gt;object&lt;/em&gt; look very much alike, and the definition of &lt;em&gt;array&lt;/em&gt; appears to be a tad more simple. Therefore, we should write our &lt;em&gt;array&lt;/em&gt; parser first, and we can copy it down to create our slightly more complicated &lt;em&gt;object&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;IEnumerable&amp;lt;JSONValue&amp;gt;&amp;gt; JElements =
    JValue.DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;JSONValue&amp;gt; JArray =
    from first in Parse.Char('[').Token()
    from elements in JElements.Optional()
    from last in Parse.Char(']').Token()
    select new JSONArray(elements.IsDefined ? elements.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how our &lt;em&gt;JElements&lt;/em&gt; parser almost perfectly matches the definition of &lt;em&gt;elements&lt;/em&gt; in the BNF. &lt;em&gt;DelimitedBy&lt;/em&gt; will parse any number of &lt;em&gt;JValue&lt;/em&gt; here, so long as they are separated by commas - this removes our need to call &lt;em&gt;JElements&lt;/em&gt; recursively. Our &lt;em&gt;JArray&lt;/em&gt; parser, then, just encases the &lt;em&gt;JElements&lt;/em&gt; parser in square brackets. If we desired we could combine the parsers into one. The reason I separated them here, however, was to demonstrate the close relationship between BNF and parsers like Sprache. Here is how the combined parsers would look:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;JSONValue&amp;gt; JArray =
    from first in Parse.Char('[').Token()
    from elements in
        JValue.DelimitedBy(Parse.Char(',').Token()).Optional()
    from last in Parse.Char(']').Token()
    select new JSONArray(elements.IsDefined ? elements.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can move on to write our &lt;em&gt;JObject&lt;/em&gt; parser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Parser&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt; JPair =
    from name in JString
    from colon in Parse.Char(':').Token()
    from val in JValue
    select new KeyValuePair&amp;lt;string, JSONValue&amp;gt;(name.Value, val);

Parser&amp;lt;IEnumerable&amp;lt;KeyValuePair&amp;lt;string, JSONValue&amp;gt;&amp;gt;&amp;gt; JMembers =
    JPair.DelimitedBy(Parse.Char(',').Token());

Parser&amp;lt;JSONValue&amp;gt; JObject =
    from first in Parse.Char('{').Token()
    from members in JMembers.Optional()
    from last in Parse.Char('}').Token()
    select new JSONObject(members.IsDefined ? members.Get() : null);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, this should all be trivial to you - especially considering &lt;em&gt;JObject&lt;/em&gt; and &lt;em&gt;JMembers&lt;/em&gt; are copies of &lt;em&gt;JArray&lt;/em&gt; and &lt;em&gt;JElements&lt;/em&gt;, respectively. With that, we should now be able to parse any document which conforms to the JSON standard. Notice that every JSON document is itself a single JSON object. Thus, given a JSON document, we would parse it with our &lt;em&gt;JObject&lt;/em&gt; parser.&lt;/p&gt;
&lt;p&gt;If you would like to see the parser in full, there is a version &lt;a href="https://github.com/IanWold/SpracheJSON/blob/master/SpracheJSON/JSONParser.cs"&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;My Work With Sprache&lt;/h1&gt;
&lt;p&gt;As I mentioned above, I've been working with Sprache for three years now, after seeing a presentation about it at the &lt;a href="http://twincitiescodecamp.com/"&gt;Twin Cities Code Camp&lt;/a&gt;, which is totally awesome and you should all go (it's even free).&lt;/p&gt;
&lt;p&gt;I've contributed to Sprache by adding a &lt;a href="https://ianwold.silvrback.com/parsing-comments-with-sprache"&gt;comment parser&lt;/a&gt;, I've published a &lt;a href="https://github.com/IanWold/SpracheJSON"&gt;JSON serializer/mapper&lt;/a&gt;, and I'm working on a &lt;a href="https://github.com/IanWold/SpracheDown"&gt;Markdown parser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've used Sprache in small amounts in a couple other projects, and I enjoy using it wherever I'm able. An idea suggested to me at an &lt;a href="http://iowacodecamp.com/"&gt;Iowa Code Camp&lt;/a&gt;, which is also awesome and free and you should all go, was to write a tool to convert BNF into Sprache. I haven't done anything with this concept yet, but that is further work that could be done - if you're feeling the Sprache bug and you want to tackle that, go right ahead!&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;I'll keep this list updated as I encounter more on the interwebs. This list should provide a good base to continue exploring the topics introduced in this tutorial.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSDN has &lt;a href="https://msdn.microsoft.com/en-us/library/bb397926.aspx"&gt;extensive documentation&lt;/a&gt; of LINQ.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Parser_combinator"&gt;Wikipedia&lt;/a&gt; provides an excellent starting point for learning more about parser-combinators&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/sprache/Sprache"&gt;Sprache GitHub&lt;/a&gt; links several examples, projects, and other tutorials.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://stackoverflow.com/unanswered/tagged/sprache"&gt;StackOverflow tag&lt;/a&gt; receives regular traffic.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Fri, 22 Jan 2016 00:00:00 Z</pubDate>
      <a10:updated>2016-01-22T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprachedown</guid>
      <link>https://ian.wold.guru/Posts/sprachedown.html</link>
      <title>SpracheDown</title>
      <description>&lt;p&gt;About a year and a half ago I attended one of the &lt;a href="http://www.twincitiescodecamp.com"&gt;Twin Cities Code Camps&lt;/a&gt;, and there I was shown a nifty library called Sprache. Sprache is, by no means, a novel invention. It's a monadic parser combinator based on years of programming done with similar libraries popular in functional languages. I say it's nifty because it seems to be the cleanest monadic parser combinator made in C#. It's also got a large enough following that keeps it up-to-date well enough, and it's what I was taught at the code camp.&lt;/p&gt;
&lt;p&gt;Half a year after that, almost a full year ago now, I attended my first &lt;a href="http://www.iowacodecamp.com"&gt;Iowa Code Camp&lt;/a&gt;. One guy I taught about Sprache and monadic parser combinators asked if it was possible to create a markdown parser with it, and my answer was a brief &amp;quot;Well, yeah, you can totally do that.&amp;quot; I've been mulling that over for about a year now, and I decided to look for a Markdown parser implemented with a monadic parser combinator to see what it would look like.&lt;/p&gt;
&lt;p&gt;I found an excellent &lt;a href="http://www.greghendershott.com/2013/11/markdown-parser-redesign.html"&gt;article&lt;/a&gt; by Greg Hendershott who implemented a MarkDown parser with a variation of Parsec for Racket. I browsed through his &lt;a href="https://github.com/greghendershott/markdown"&gt;parser&lt;/a&gt; on GitHub, and to my alarm it seemed that the parser itself was 1,000 lines long (I could be misreading that, I've no prior experience with Racket, but I'm assuming &amp;quot;parse.rkt&amp;quot; contains the parser). This compelled me to attempt such a parser with Sprache. If nothing else, it would be an interesting comparison.&lt;/p&gt;
&lt;p&gt;So I began writing this parser in steps, gradually adding features to it. I started out with headers, then lists, then paragraphs, and so forth. As I was writing this parser, I deliberately omitted features from MarkDown, notably reference-style links and inline HTML. I think if you can parse the majority of MarkDown the little bits could be implemented with equal ease, so I don't believe this invalidates the parser. I may go on and add inline HTML (Sprache ships with an XML parser example), but so long as this is a neat little pet project, I don't think I'll go too far beyond that.&lt;/p&gt;
&lt;p&gt;At first, I parsed the MarkDown text directly into strings representing the HTML output. This was efficient, but of course it wouldn't do for any parser - the user needs to be able to manipulate the output. To save time, I borrowed the syntax tree that Sprache's XML example comes with. I adapted and modified the objects with a couple methods to bend them to my will, so to speak, and from there it only took a minute to plug them into my parser.&lt;/p&gt;
&lt;p&gt;One problem that Mr. Hendershott faced was parsing MarkDown's nested list feature (this is achieved by inserting spaces before the asterisk in MarkDown). I don't know if this was due to the language he was using or a limitation of the parser,&lt;/p&gt;
&lt;p&gt;Now, I can't say I actually ran into any major problems when I implemented the parser. Granted, I ignored the MarkDown I didn't like so well, but as I said, I don't believe that invalidates the parser. In fact, my success with this parser speaks to the beauty inherent in parser combinators, specifically Sprache in this case. Over the past two days, I've spent a total of six hours working on this, and it's already relatively well-polished. The code is clear and readable, thoroughly commented, and the syntax tree is easily scalable. In addition, my parser is significantly smaller than Mr. Hendershott's parser (perhaps an advantage of Sprache in C# over Parsack in Racket?), and I don't believe I could top 1000 lines in the parser alone if I were to bring the parser up to speed with all of MarkDown's features.&lt;/p&gt;
&lt;p&gt;As I've been saying, I wrote this as a proof of concept, and I don't really intend for it to go anywhere, but if you think this is the coolest thing ever and you want it to be something, you're more than welcome to submit pull requests, or you can fork it and do your own thing with it. I believe I've documented everything thoroughly, so it should be easy to find your way around, but if I've missed something don't wait to contact me. Have fun!&lt;/p&gt;
&lt;p&gt;You can find SpracheDown on GitHub right &lt;a href="https://github.com/IanWold/SpracheDown"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 26 Sep 2014 00:00:00 Z</pubDate>
      <a10:updated>2014-09-26T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprachejson</guid>
      <link>https://ian.wold.guru/Posts/sprachejson.html</link>
      <title>SpracheJSON</title>
      <description>&lt;p&gt;I've been meaning to write about this for a while now, but college got in the way of that. I wrote a deal I called SpracheJSON to parse JSON text into C# objects with Sprache, and it's kinda neat. I also played with the GitHub pages feature on this project, but that's not really interesting.&lt;/p&gt;
&lt;p&gt;I got this thing to the point where is parses the JSON just fine, no problem. But I also figured it made sense to serialize between JSON and C# objects. Like the other parsers I've written have ended up, it's got its own AST to throw the JSON into, but I can't imagine I'd ever want to use generic objects to store my data (isn't that the whole point of JSON?) That said, I've never been a fan of ISerializable, so I've got my own custom serializer thing going on. Obviously that makes it kinda imperfect, but that's how the world goes, I suppose.&lt;/p&gt;
&lt;p&gt;In the future I'm going to use ISerializable to make that part of the project go easier, but until then, I've got a nice half-baked parser here. I'm not going to detail the functionality of the library too much, but it's pretty slick, so you should definitely go check it out &lt;a href="https://github.com/IanWold/SpracheJSON"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 10 Apr 2015 00:00:00 Z</pubDate>
      <a10:updated>2015-04-10T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">sprache_comments</guid>
      <link>https://ian.wold.guru/Posts/sprache_comments.html</link>
      <title>Parsing Comments with Sprache</title>
      <description>&lt;p&gt;I recently made a comment parser for the Sprache framework, and I wanted to give a basic run-down on how it works.&lt;/p&gt;
&lt;p&gt;The CommentParser class gives you the option to define the header styles for comments, and it can parse both single- and multi-line comments. It's rather basic as of right now, but that's (hopefully) subject to change in the future.&lt;/p&gt;
&lt;p&gt;Using CommentParser is pretty simple, but it's a tad different from the rest of the flow of Sprache as a combinator library. You'll need to make an instance of the CommentParser class, using the comment headers and (optional) newline character you require as arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static CommentParser comments = new CommentParser(&amp;quot;//&amp;quot;, &amp;quot;/*&amp;quot;, &amp;quot;*/&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, CommentParser gives you a couple parsers you can use to parse single- and multi-line comments:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static Parser&amp;lt;string&amp;gt; myParser = Parse.String(&amp;quot;foobar&amp;quot;).Text().Or(comments.AnyComment);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CommentParser.AnyComment will parse either single- or multi-line comments for you, while CommentParser.SingleLineComment and CommentParser.MultiLineComment will parse those individually.&lt;/p&gt;
&lt;p&gt;A real, working example using the CommentParser class can be found in Sprache's &lt;a href="https://github.com/sprache/Sprache/tree/master/src/XmlExample"&gt;XMLParser&lt;/a&gt; example.&lt;/p&gt;
&lt;p&gt;In the future, it would be awesome if multiple comment headers could be included, and if whitespace could be defined to include comments. Some work towards this effort has been done on my GitHub &lt;a href="https://github.com/IanWold/Sprache/blob/Comments/src/Sprache/CommentParser.cs"&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 06 Feb 2015 00:00:00 Z</pubDate>
      <a10:updated>2015-02-06T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">the_network_is_reliable</guid>
      <link>https://ian.wold.guru/Posts/the_network_is_reliable.html</link>
      <title>The Network is Unreliable and Reliability is Scary</title>
      <description>&lt;p&gt;When the &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;Fallacies of Distributed Computing&lt;/a&gt; were first written in the 90s, networks were unreliable. The internet was unreliable, intranets were unreliable, even radio was sometimes spotty back then. In the last thirty years, we as an industry have taken this unreliable infrastructure and ... left it there. Packet failures, client timeouts, and the occasional solar flare continue to be a problem not because of any inadequacy on our part but because it's a flaw which is inherent in the system; no network can ever guarantee reliability. Radio is still sometimes spotty because, just like the internet, sending any information over large physical distances is always going to have interruptions and loss. The first Fallacy of Distributed Computing is to assume the opposite of this - &lt;em&gt;the network is reliable&lt;/em&gt; - and it's first for a good reason: it really matters.&lt;/p&gt;
&lt;p&gt;Now, I wonder if in the last thirty years we haven't actually made this problem worse. In the 90s there weren't a lot of microservice systems making exorbitant use of load balancers, firewalls, gateway APIs, and the like. These are useful tools, but each new component in the distributed stack adds a point of failure. These systems can and do fail in their own right, but the incidence rate of network failures specifically will increase as more of these components are included.&lt;/p&gt;
&lt;p&gt;It seems then that we have a good candidate for a first fix: simplify the architecture! Does every microservice need its own firewall? Do we have multiple gateway APIs? A serious and focused audit of the system architecture can reduce a lot of layers in the distributed stack, and overall improve the reliability of the system - the most simple systems tend to be more reliable. However, this only gets us to a certain point - a lot of systems still require load balancing, and you're going to need a firewall &lt;em&gt;somewhere&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Store and Forward (and Retry)&lt;/h1&gt;
&lt;p&gt;The simplest implementation to get some fault tolerance is to implement a retry when we see a network error after sending a request. This is &lt;a href="https://en.wikipedia.org/wiki/Store_and_forward"&gt;store and forward&lt;/a&gt;, but I prefer to call it &amp;quot;store/forward/retry&amp;quot; as these all tend to be related. Intermediate systems like gateway APIs and load balancers and the like might have simple implementations of this pattern themselves. To implement this, you'll need to &amp;quot;store&amp;quot; the message, send it (&amp;quot;forward&amp;quot;), and then you can retry on failures as needed by resending the stored message. This pattern works well because it's very simple and provides a good level of recovery from some network errors. It's best practice to implement some sort of retry system - if the packet is dropped en route from client to server, you'll want to be able to resend that.&lt;/p&gt;
&lt;h2&gt;Idempotency&lt;/h2&gt;
&lt;p&gt;There is a problem here though - it is possible for our client to get a network error even if the operation did succeed on the server: suppose the response packet was dropped or the client timed out before receiving the success response. That means that we will potentially send the same request to the server more than once, leading to potential error on the server from reprocessing the same valid, successful request more than once. This is solved by ensuring the operations on the server are &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt; - that replaying the same request twice won't cause these sorts of errors. Indeed, idempotency should be a default for all operations in a distributed system.&lt;/p&gt;
&lt;p&gt;Here's a problem on top of that though: some operations cannot be idempotent. I'm currently working in ecommerce, which is rife with examples of single-fire operations: ship an item from an order, send an email when an item was bought from your gift registry, charge a credit card, and so on. In some cases we're able to architect the systems around these to make it so that the web requests are idempotent while the operation isn't. In other cases, we need to be a bit more clever.&lt;/p&gt;
&lt;p&gt;Here operation IDs can solve the majority of your problems - generating a UUID for each operation and storing which ones we've processed is a simple solution that works in many cases. That said, non-idempotent operations are sometimes dependent on message ordering in order to work properly. If you're not able to architect away from this, you probably need some more robust patterns. I'll touch on some of these throughout this article.&lt;/p&gt;
&lt;h2&gt;Boilerplate and Complexity&lt;/h2&gt;
&lt;p&gt;There's yet another problem with implementing store-and-forward everywhere - one that affects my day-to-day life much more annoyingly than misordering a customer's packets: now I'll have a bunch of boilerplate around my code! This is a bigger problem for some codebases and less a problem for others. If your application doesn't have a lot of requests and you only need a base level of resilience, then moving the boilerplate into a shared library, or consuming an existing third party library for this, can be sufficient.&lt;/p&gt;
&lt;p&gt;On the other hand, if you're setting up a distributed system of even a moderate size, you've probably got a fair amount of traffic going around, and it might make sense to set up a more comprehensive scheme. Some third party libraries do help out here, and allow a sharing of settings across components or provide more intricate solutions for orchestrating some of the request policies across a whole system. Still there are problems here - suppose the client application goes offline before it's able to resend its request, now I might need to add some persistence somewhere if the system requirements need that level of resiliency.&lt;/p&gt;
&lt;p&gt;A more powerful alternative to solve this problem is a &lt;a href="https://en.wikipedia.org/wiki/Message_queue"&gt;message queue&lt;/a&gt; (MQ). An MQ acts as a standalone message bus for a distributed system, allowing your clients to send their requests into the queue and letting the queue handle all of the considerations to make sure it gets to the client. Most of them offer robust UIs to give you a good level of insight and control over the system, and there are several options that are widely used for this purpose. Now your client needs very little logic in the way of sending a request - it just needs to make sure the request gets to the MQ.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/the_network_is_reliable_mq.png" alt="MQ" /&gt;&lt;/p&gt;
&lt;h1&gt;More Complicated Patterns&lt;/h1&gt;
&lt;p&gt;The very minimal amount of work that we must do when implementing communication across a distributed system - whether &amp;quot;distribution&amp;quot; in your context means a client and a server or a microservices cluster spanning the globe - is to implement redundancy against the fragile network. In my mind, this means that store/forward/retry and idempotency are the default. As our requirements scale and our systems inevitably become more complicated, these become insufficient either in that they can't satisfy the system requirements or that they don't appropriately guard us against the chaos of the network.&lt;/p&gt;
&lt;p&gt;There's another complication on top of this; there's &lt;em&gt;always&lt;/em&gt; another complication. Peter Bailis and Kyle Kingsbury, &lt;a href="https://cacm.acm.org/magazines/2014/9/177925-the-network-is-reliable/fulltext"&gt;writing for the ACM in 2014&lt;/a&gt; cited some of the only research I am aware of regarding the effects of network fragility on our systems and users. Their work produced this quote (a summary of one such citation), which, to paraphrase what the kids say these days, lives within me without payment of room or board:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perhaps more concerning is [Microsoft's and the University of Toronto's] finding that network redundancy improves median traffic by only 43%; that is, network redundancy does not eliminate common causes of network failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can we go beyond redundancy and introduce some patterns that will 100% eliminate the effects of network failures? Well, we can introduce some patterns beyond redundancy but we'll never get to 100%.&lt;/p&gt;
&lt;h2&gt;Asynchronous Communication&lt;/h2&gt;
&lt;p&gt;TCP, UDP, and HTTP primarily support request-response type models: I send a request, I wait, and then I get a response. So far we've been considering how this doesn't work, so I think it's natural here to feel that this way of thinking has adopted, at least a little bit, of the fallacy &lt;em&gt;the network is reliable&lt;/em&gt;. If I can't rely on getting a response, or even that my request will reach its destination, or if I can't even guarantee that redundancy will be as helpful as I need, then it intuitively follows that relying exclusively on request-response isn't sufficient.&lt;/p&gt;
&lt;p&gt;I touched very briefly on the utility of MQs for distributed communication. Indeed, they're a great tool to be able to add a wealth of error handling (and other messaging-related) logic without polluting my codebase(s). I don't think that's the most attractive aspect of these systems though. While most MQs are quite good at supporting a request-response type messaging model, they're exceptional useful if we can move to a fire-and-forget model where I send the request and &lt;em&gt;know&lt;/em&gt; I won't get a response.&lt;/p&gt;
&lt;p&gt;But wait, my &lt;code&gt;OrderMicroservice&lt;/code&gt; needs to be able to get item data from the &lt;code&gt;ItemMicroservice&lt;/code&gt;! How do we do this without request-response? The answer in a microservice context is data duplication. The service which is responsible for manipulating the data publishes notifications on changes to that data, and systems which rely on this data will listen to those notifications and maintain their own copies of that data as they need. This is how asynchronous communication works in distributed systems: &lt;em&gt;notify&lt;/em&gt;, don't &lt;em&gt;request&lt;/em&gt;. This way of thinking changes our system a lot; indeed, it upends our entire architecture. Beyond the change to the communication pattern, it makes data-owning services only singularly responsible for &lt;em&gt;manipulating&lt;/em&gt; data, rather than being responsible for both &lt;em&gt;manipulation&lt;/em&gt; and &lt;em&gt;querying&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As different as it is from the &amp;quot;traditional&amp;quot; modus operandi, this has almost become the default communication scheme in distributed systems. Particularly systems with varied, geographically distributed components such as IoT and banking (yes, not everything is microservices yet!) It eliminates whole categories of errors, and in our case it helps to eliminate not just one area as a source of network errors (the response) but also supports other best-practice patterns that feed back to helping us maintain our rigidity against the network.&lt;/p&gt;
&lt;p&gt;There's tradeoffs though, as there are with all things. Asynchronously communicating systems have trouble reaching consensus, and a lot of times this can be entirely impossible. That's not a dealbreaker for a lot of systems, though it's a major one if your requirements necessitate it.&lt;/p&gt;
&lt;h2&gt;Outbox&lt;/h2&gt;
&lt;p&gt;One common point raised is that as more logic is added around outbound requests, the slower it is to handle those requests. In cases where my hot path is very hot and still needs to produce a fair number of outbound requests (as you might need to if you're notifying on all data change operations), I'll want to optimize my logic as much as I can. Perhaps it will seem attractive to not provide adequate robustness around my requests to make them faster.&lt;/p&gt;
&lt;p&gt;The obvious pattern to use here would be to shuffle your message off to a queue running in a background process that will eventually publish the message, just outside the thread the hotpath is on. This works in a lot of scenarios, but there are robustness concerns yet with this. A helpful pattern here is the &lt;a href="https://microservices.io/patterns/data/transactional-outbox.html"&gt;Outbox Pattern&lt;/a&gt;. The core concept is the same - we maintain a background process in a separate thread which handles sending messgaes with proper resiliency against the faulty network, however the enqueueing mechanism is the clever bit.&lt;/p&gt;
&lt;p&gt;This pattern suggests that your database should have a table, or tables, containing the messages which you want to enqueue - this is the &amp;quot;outbox&amp;quot; table. When your application makes the update to the business objects in the database, in the same transaction it would add the message to be sent to the outbox table. The background message sending process then listens to this table (either by polling or by having the database raise events) to perform the sends. This is clever because, while you do need to write the logic to insert the message into the table, you don't specifically need to call the message publishing service to enqueue the message. On top of this, that you're using your database as the queue gets you a persisted queue for free.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/the_network_is_reliable_outbox.png" alt="Outbox" /&gt;&lt;/p&gt;
&lt;p&gt;This pattern is worthwhile if you've got a &lt;em&gt;hot&lt;/em&gt; hot path, need the extra resiliency in your queue, and the extra cost of running the background process is worth it to you.&lt;/p&gt;
&lt;h2&gt;Event Sourcing&lt;/h2&gt;
&lt;p&gt;Some applications have a high need to preserve message ordering, usually because the state of the system is dependent on the temporal changes over the course of several events. These systems are good candidates for &lt;a href="https://www.eventstore.com/blog/what-is-event-sourcing"&gt;event sourcing&lt;/a&gt;, and this pattern can help us alleviate some of the pain of hardening our system against a faulty network.&lt;/p&gt;
&lt;p&gt;This pattern imposes (very broadly) that you should save all of the events which alter your state, and that the state should subsequently be &lt;em&gt;derived&lt;/em&gt; from these events. This is opposed to our traditional way of persisting data, where we process an event, update the state to reflect the changes specified by that event, and then forget the event. Event sourcing allows a number of benefits like being able to replay state, but what's interesting to us is that it allows inserting an event &lt;em&gt;in the middle&lt;/em&gt; of a set of events which have already been processed.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/the_network_is_reliable_event_source.png" alt="Event Sourcing" /&gt;&lt;/p&gt;
&lt;p&gt;This is beneficial to us if message ordering is high on our considerations list. If we're implementing proper resiliency when messages are dropped on the wire, we're going to be retrying messages, and there's a fair chance we're going to be sending some messages out of order in this scenario. As long as our events are properly dated, they can be ordered appropriately (and change the state appropriately) in our eventually-consistent system. This pattern also has the power to transform some non-idempotent operations into idempotent ones - instead of changing the state directly in a non-idempotent way, we'd be inserting/upserting/updating the single event in an idempotent way.&lt;/p&gt;
&lt;p&gt;One word of warning though - event sourcing is a huge pain to implement and maintain. This pattern can very quickly get very complicated, and if you're careless then you can mangle data over time. Systems like &lt;a href="https://www.eventstore.com/"&gt;EventStoreDB&lt;/a&gt; or the &lt;a href="https://github.com/eugene-khyst/postgresql-event-sourcing"&gt;postgresql-event-sourcing plugin&lt;/a&gt; can help to make this easier, but that of course requires an investment in those systems. This is a pattern to study carefully and only use if it's appropriate for your use case.&lt;/p&gt;
&lt;h1&gt;Chosing the Right Solution&lt;/h1&gt;
&lt;p&gt;The trend which I think is plainly obvious here is that each next step we take in the battle against the unreliability of the network introduces greater and greater rippling effects across our code, infrastructure, and architecture. It's common advice for most any problem in distributed computing - not just this one - that the best solution is for us to upend just about everything we know about software engineering! Okay, I'm being a bit facetious, but as solid and well-proven as patterns like asynchronous communication are, they're quite different to other ways of writing software.&lt;/p&gt;
&lt;p&gt;Difference between domains isn't bad in itself. A CRUD API is never going to look anything like a desktop application, which is going to look entirely different itself from any video game code you might find. It's probably a sign of being on the right path that we find that radically different domains produce radically different styles of engineering and architecture. Distributed systems aren't a single, contiguous domain though: the architecture we consider for a client-server system is itself going to be radically different from a microservices cluster, and yet they're both &amp;quot;distributed&amp;quot;. Some patterns are going to work better or worse depending on the requirements of each different system.&lt;/p&gt;
&lt;h2&gt;Cost-Benefit&lt;/h2&gt;
&lt;p&gt;Extending the observation that the increasing steps exacerbate the complexity of our systems, we can say that the more reliable of a system you engineer, the more costly it is. I have no evidence for this, but it is maybe helpful to assume a sort of exponential or logarithmic growth in cost vs. reliability (I know &amp;quot;exponential&amp;quot; and &amp;quot;logarithmic&amp;quot; are very different but I slept through math class, passed by answering &amp;quot;C&amp;quot; on all the questions, and for my purposes they occupy the same category in my brain, right next to Snoopy and Woodstock). 100% reliability can never be achieved, so there is some point of reliability which becomes cost ineffective for your firm.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/IanWold/ianwold.github.io/master/Static/images/the_network_is_reliable_asymptote.png" alt="Reliability vs Complexity" /&gt;&lt;/p&gt;
&lt;p&gt;I don't have an answer for this. I can bring up patterns with a pros and cons list all day - I've presented a couple here - but this comes down to a study by your team and firm for its use case. Start by engineering a redundant system and extend (or replace) the components and architecture where you need. Since we can't ever achieve 100% reliability, we'll need to throw in the rag at some point and accept that failure has to be an option, but remember that failure is only an option if we've explicitly coded for it.&lt;/p&gt;
&lt;h2&gt;How Do We Know Our Solutions Work?&lt;/h2&gt;
&lt;p&gt;How do we know we've engineered a system which is appropriately reliable given our domain? Here's one more quote from &lt;a href="https://cacm.acm.org/magazines/2014/9/177925-the-network-is-reliable/fulltext"&gt;that ACM paper&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Moreover, in this article, we have presented failure scenarios; we acknowledge it is much more difficult to demonstrate that network failures have not occurred!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed, you can't prove that something &lt;em&gt;didn't&lt;/em&gt; happen. With appropriate monitoring you can get an insight into how frequently network failures tend to occur, and you should track these and line them up with any cascading system failures. Generally, the absence of these indicators suggests strongly enough that there are no failures occurring.&lt;/p&gt;
&lt;p&gt;Using this data to feed back to know if you've over- or under-engineered your system is a different beast, though. This is part of the art of our field. Especially with the patterns we're talking about here, it's almost impossible to do A/B testing. I recommend a gradual approach: start with the lowest amount that you need, and if your monitoring indicates failures in a particular way, then address those in the minimally-invasive way and repeat.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The network is unreliable and it won't ever be reliable. I've presented some of the general patterns to consider here, but there's a wealth of ideas on this topic. The job of creating properly resilient systems is about balancing tradeoffs as your requirements demand. There are dozens of patterns out there for dealing with this problem in different domains, trading off one bit of reliability for performance or one style of communication for redundancy, or any other tradeoff you might make.&lt;/p&gt;
&lt;p&gt;Like the approach to the other fallacies, the right approach to this one (insofar as there is any &amp;quot;right&amp;quot; approach) is one of mindset more than code. The fallacies are so-named not because they're actual logical fallacies but because the point is to remind us it's a mindset problem. If we engineer our systems from the mindset that &lt;em&gt;the network is reliable&lt;/em&gt;, then we'll end up with a deficient system because it's not true. If we adopt the proper mindset that not only is the network unreliable but also that it's a difficult and domain-specific problem to solve, we'll end up engineering thoughtful and considered systems.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Feb 2024 00:00:00 Z</pubDate>
      <a10:updated>2024-02-21T00:00:00Z</a10:updated>
    </item>
    <item>
      <guid isPermaLink="false">write_your_own_rdbms_versioned_migration_boilerplate</guid>
      <link>https://ian.wold.guru/Posts/write_your_own_rdbms_versioned_migration_boilerplate.html</link>
      <title>Write Your Own RDBMS Versioned Migration Boilerplate</title>
      <description>&lt;p&gt;If you're using a relational database, even perhaps for a small personal project, you've almost certainly had to have a serious think about migrations. Some databases require very heavily-engineered migration systems to be able to handle large, complex, and/or frequently-changing data. Other databases are very small and might do just fine with a single migrations file, or maybe even manual migrations computed off a shared schema script, if updates are few and far between.&lt;/p&gt;
&lt;p&gt;There's many different migration strategies, and there's no one-size-fits-all approach - different databases and applications can require vastly different strategies. One of the best and most ubiquitous strategies is the versioned migration, where individual updates are stored in SQL scripts that have an incremental version. I like a setup where, on startup, my application consults a migration history table in my database to see what the latest migration is, and to run any new migration scripts in sequential order.&lt;/p&gt;
&lt;p&gt;In my experience this setup works very well, and it can scale to a large size of project, database, or team. I start almost all of my projects - big or small, personal or professional - with this strategy, and I think you should consider making this strategy (or some variation of it) your default as well.&lt;/p&gt;
&lt;p&gt;One holdup though - isn't that a lot of overhead for a small, personal project? Should I really be investing the time to set up &lt;a href="https://flywaydb.org/"&gt;Flyway&lt;/a&gt; for every little API I want to set up? I contend no and no. I keep a snippet of boilerplate code to handle these migrations that I copy for every new project. It's a small amount of code, and I can modify it as needed per-project if it requires anything special. Best of all, my entire database from the start is migration-versioned, making it easy in future to switch to another system or onto Flyway if needed.&lt;/p&gt;
&lt;h1&gt;Versioned Migrations&lt;/h1&gt;
&lt;p&gt;As I described, this strategy involves breaking your migrations down into individual scripts for each discrete migration, and assigning them a version. What belongs in an individual file is up to you. You can restrict each file to only containing a single update on a table or column, or you could say that each feature card should have a single migration script. I prefer an in-between where each script contains a logically coupled, discrete set of changes, such that the database is valid at any migration version.&lt;/p&gt;
&lt;p&gt;However you split these up, you might have several migration scripts:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-plaintext"&gt;/ Migrations
  |- 01_CreateUsersTable.sql
  |- 02_CreateItemsTable.sql
  |- 03_CreateListsTable.sql
  |- 04_AddListIdToItemsTable.sql
  |- 05_AddUserIdToListsTable.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need some way to assign a version to each script. I prefer adding the version to each file name (as Flyway does, if I recall correctly) so that it's easy to see, and is aligned by version in my file system. If you prefer otherwise, you could maintain a separate map in your code or a config file from a file name to a version number, or no doubt any number of other strategies.&lt;/p&gt;
&lt;p&gt;The other aspect of this migrations strategy is that we will need to maintain a table containing the migration history of the database. I prefer a simple table myself:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;CREATE TABLE migration_history(
    &amp;quot;version&amp;quot; bigint primary key,
    &amp;quot;migrated&amp;quot; timestamp default NOW()
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this way, I can keep track of where each database is at and apply migrations accordingly. When my app starts up, I'll look at this table to see what the latest version is. If the app sees that there are migration files exceeding this version, then I can run those migration scripts in the order they're intended.&lt;/p&gt;
&lt;h1&gt;Run the Migrations&lt;/h1&gt;
&lt;p&gt;Our migration-running code needs to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check the latest migration version, or create the &lt;code&gt;migration_history&lt;/code&gt; table if it's a new database,&lt;/li&gt;
&lt;li&gt;Find all the migration scripts after the latest version&lt;/li&gt;
&lt;li&gt;Execute these scripts in order, updating the &lt;code&gt;migration_history&lt;/code&gt; as it goes&lt;/li&gt;
&lt;li&gt;Commit the changes (important)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll be demonstrating this with C# and PostgreSQL (via Npgsql), but this approach will work in any language with any RDBMS. The code should be straightforward enough for you to translate to whatever your case is.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class DatabaseMigrator
{
    static int GetLatestVersion(NpgsqlConnection connection, NpgsqlTransaction transaction) // TODO
    static IEnumerable&amp;lt;(int, string)&amp;gt; GetNewMigrationFiles(int latestVersion) // TODO
    static void RunMigrationFile((int version, string name) file, NpgsqlConnection connection, NpgsqlTransaction transaction) // TODO

    public static void Migrate(string connectionString)
    {
        using var connection = new NpgsqlConnection(connectionString);
        using var transaction = connection.BeginTransaction();

        var latestVersion = GetLatestVersion(connection, transaction);
        var newMigrationFiles = GetNewMigrationFiles(latestVersion);

        foreach (var file in newMigrationFiles)
        {
            RunMigrationFile(file, connection, transaction);
        }

        transaction.Commit();
        connection.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then call &lt;code&gt;DatabaseMigrator.Migrate(connectionString);&lt;/code&gt; from your startup logic, and it's all wired up! We can focus then on implementing each of the TODOs here.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetLatestVersion&lt;/code&gt; is probably the most complicated of these, because we'll want to check whether &lt;code&gt;migration_history&lt;/code&gt; exists before we try to consult it, and create it if not. Before we get started implementing that method though, we'll want to write a little boilerplate to excute some queries on the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static NpgsqlCommand GetCommand(string query, NpgsqlConnection cnonnection, NpgsqlTransaction? transaction)
{
    var command = connection.CreateCommand();

    command.Connection = connection;
    command.CommandText = query;

    if (transaction is not null)
    {
        command.Transaction = transaction;
    }

    return command;
}

static void Command(NpgsqlConnection connection, NpgsqlTransaction transaction, string query)
{
    var command = GetCommand(query, connection, transaction);
    command.ExecuteNonQuery();
}

static T Query&amp;lt;T&amp;gt;(NpgsqlConnection connection, string query)
{
    var command = GetCommand(query, connection);
    return (T)command.ExecuteScalar();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanted to implement all the logic here to check that the result actually is a &lt;code&gt;T&lt;/code&gt; and handle that in a special flow, you can do. However, this is good enough for me - this code is running in a way where it's unlikely for me to encounter an exceptional scenario but in an &lt;em&gt;exceptional&lt;/em&gt; scenario, and if this code fails I want to let it throw anyway so that my app crashes and its health endpoint responds with a failure. Your scenario may well differ though.&lt;/p&gt;
&lt;p&gt;With that, I can outline &lt;code&gt;GetLatestVersion&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static int GetLatestVersion(NpgsqlConnection connection, NpgsqlTransaction transaction)
{
    var migrationHistoryExists = Query&amp;lt;bool&amp;gt;(
        connection,
        &amp;quot;SELECT EXISTS(SELECT 1 FROM pg_tables WHERE tablename = 'migration_history')&amp;quot;
    );

    if (migrationHistoryExists)
    {
        return Query&amp;lt;int&amp;gt;(
            connection,
            &amp;quot;SELECT MAX(version) FROM migration_history&amp;quot;
        );
    }
    else
    {
        Command(connection, transaction,
            &amp;quot;&amp;quot;&amp;quot;
            DROP SCHEMA public CASCADE;
            CREATE SCHEMA public;
            GRANT ALL ON SCHEMA public TO postgres;
            GRANT ALL ON SCHEMA public TO public;
            COMMENT ON SCHEMA public IS 'standard public schema';

            CREATE TABLE migration_history(
                &amp;quot;version&amp;quot; bigint primary key,
                &amp;quot;migrated&amp;quot; timestamp default NOW()
            )
            &amp;quot;&amp;quot;&amp;quot;
        );

        return -1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given that, it's quite easy to implement &lt;code&gt;GetMigrationFiles&lt;/code&gt;. The only peculiarity of that method is that it will return a tuple containing the version and file name for each file, so that it's easy for the other code to reference. Here I'm assuming all the migrations are in the &amp;quot;/Migrations&amp;quot; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static IEnumerable&amp;lt;(int, string)&amp;gt; GetNewMigrationFiles(int latestVersion) =&amp;gt;
    new DirectoryInfo(&amp;quot;/Migrations&amp;quot;).GetFiles()
    .Where(f =&amp;gt; f.Extension == &amp;quot;.sql&amp;quot;)
    .Select(f =&amp;gt; (version: Convert.ToInt32(f.Name.Split('_')[0]), file: f.FullName))
    .Where(f =&amp;gt; f.version &amp;gt; latestVersion)
    .OrderBy(f =&amp;gt; f.version);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can probably be more concise using query syntax and defining the version with &lt;code&gt;let&lt;/code&gt; but I'll leave that as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;The only thing left then is to run these scripts and update the migration history:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static void RunMigrationFile((int version, string name) file, NpgsqlConnection connection, NpgsqlTransaction transaction)
{
    var query = &amp;quot;&amp;quot;;
    using (var reader = new StreamReader(file.name))
    {
        query = reader.ReadToEnd();
    }

    conn.Command(connection, transaction, query);
    conn.Command(connection, transaction, $&amp;quot;INSERT INTO migration_history (version) VALUES ({file.version})&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's it! With just a 100-line C# file we've got fully-versioned migrations!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You can find all the code together on &lt;a href="https://gist.github.com/IanWold/d466f0e7e983da7b09e5ecc6bf719341"&gt;this GitHub Gist&lt;/a&gt;. I copy this for every project I start, and I start each database out with versioned migrations.&lt;/p&gt;
&lt;p&gt;You don't need to start your project off with a dependency on a third party migration library, you don't need to jump through any hoops - technical or conceptual - in order to get versioned migrations, and starting out with this puts you on the most solid path from the start. In future as your project evolves, if you end up in the rare situation of needing more features in your migrations, the code is right here for you to add it! If you end up needing so many migration features that a library like Flyway makes more sense, your story for switching to Flyway will be very easy. indeed.&lt;/p&gt;
&lt;p&gt;Happy migrating!&lt;/p&gt;
</description>
      <pubDate>Sat, 25 Nov 2023 00:00:00 Z</pubDate>
      <a10:updated>2023-11-25T00:00:00Z</a10:updated>
    </item>
  </channel>
</rss>